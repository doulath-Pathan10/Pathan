import React from 'react';
import { render } from '@testing-library/react';
import renderComponent from './renderComponent';
import { createElement } from 'react';

// Mock all the components that could be rendered
jest.mock('../../../shared/components/dates/dates', () => (props: any) => <div>Dates Mock: {JSON.stringify(props)}</div>);
jest.mock('../../../shared/components/information/information', () => (props: any) => <div>Information Mock: {JSON.stringify(props)}</div>);
jest.mock('../../../shared/components/multi-selection-box/multi-selection-box', () => (props: any) => <div>MultiSelectionBox Mock: {JSON.stringify(props)}</div>);
jest.mock('../../../shared/components/number/number', () => (props: any) => <div>Number Mock: {JSON.stringify(props)}</div>);
jest.mock('../../../shared/components/other-myinfo/other-myinfo', () => (props: any) => <div>OtherMyinfo Mock: {JSON.stringify(props)}</div>);
jest.mock('../../../shared/components/phone/phone', () => (props: any) => <div>Phone Mock: {JSON.stringify(props)}</div>);
jest.mock('../../../shared/components/radio-with-label/radio-with-label', () => (props: any) => <div>RadioWithLabel Mock: {JSON.stringify(props)}</div>);
jest.mock('../../../shared/components/selection-box/selection-box', () => (props: any) => <div>SelectionBox Mock: {JSON.stringify(props)}</div>);
jest.mock('../../../shared/components/text/text', () => (props: any) => <div>Text Mock: {JSON.stringify(props)}</div>);
jest.mock('../../../shared/components/toggle/toggle', () => (props: any) => <div>Toggle Mock: {JSON.stringify(props)}</div>);
jest.mock('../../../shared/components/type-ahead/type-ahead', () => (props: any) => <div>TypeAhead Mock: {JSON.stringify(props)}</div>);
jest.mock('../../../shared/components/button/button', () => (props: any) => <div>Button Mock: {JSON.stringify(props)}</div>);
jest.mock('../../../shared/components/amount/amount', () => (props: any) => <div>Amount Mock: {JSON.stringify(props)}</div>);
jest.mock('../../../shared/components/slider-with-limit/slider-with-limit', () => (props: any) => <div>SliderWithLimit Mock: {JSON.stringify(props)}</div>);
jest.mock('../../../shared/components/slider-with-currency/slider-with-currency', () => (props: any) => <div>SliderWithCurrency Mock: {JSON.stringify(props)}</div>);
jest.mock('../../../shared/components/signature/signature', () => (props: any) => <div>Signature Mock: {JSON.stringify(props)}</div>);

describe('renderComponent', () => {
  const mockHandleCallback = jest.fn();
  const mockHandleFieldDispatch = jest.fn();
  const mockUserInput = { testField: 'testValue' };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should render Dates component for Dates type', () => {
    const currentSection = {
      component_type: 'Dates',
      logical_field_name: 'test_date',
    };

    const { container } = render(
      renderComponent(
        currentSection,
        0,
        mockHandleCallback,
        mockHandleFieldDispatch,
        mockUserInput
      )
    );

    expect(container).toHaveTextContent('Dates Mock');
  });

  it('should render RadioWithLabel component for RadioWithLabel type', () => {
    const currentSection = {
      component_type: 'RadioWithLabel',
      logical_field_name: 'test_radio',
    };

    const { container } = render(
      renderComponent(
        currentSection,
        0,
        mockHandleCallback,
        mockHandleFieldDispatch,
        mockUserInput
      )
    );

    expect(container).toHaveTextContent('RadioWithLabel Mock');
  });

  it('should render Phone component for Phone type by default', () => {
    const currentSection = {
      component_type: 'Phone',
      logical_field_name: 'test_phone',
    };

    const { container } = render(
      renderComponent(
        currentSection,
        0,
        mockHandleCallback,
        mockHandleFieldDispatch,
        mockUserInput
      )
    );

    expect(container).toHaveTextContent('Phone Mock');
  });

  it('should render SelectionBox for Phone type when logical_field_name is mobile_number_rwb', () => {
    const currentSection = {
      component_type: 'Phone',
      logical_field_name: 'mobile_number_rwb',
    };

    const { container } = render(
      renderComponent(
        currentSection,
        0,
        mockHandleCallback,
        mockHandleFieldDispatch,
        mockUserInput
      )
    );

    expect(container).toHaveTextContent('SelectionBox Mock');
  });

  it('should render Phone component for Phone type when logical_field_name is mobile_number', () => {
    const currentSection = {
      component_type: 'Phone',
      logical_field_name: 'mobile_number',
    };

    const { container } = render(
      renderComponent(
        currentSection,
        0,
        mockHandleCallback,
        mockHandleFieldDispatch,
        mockUserInput
      )
    );

    expect(container).toHaveTextContent('Phone Mock');
  });

  it('should handle component_type with spaces by removing them', () => {
    const currentSection = {
      component_type: ' Type Ahead ',
      logical_field_name: 'test_typeahead',
    };

    const { container } = render(
      renderComponent(
        currentSection,
        0,
        mockHandleCallback,
        mockHandleFieldDispatch,
        mockUserInput
      )
    );

    expect(container).toHaveTextContent('TypeAhead Mock');
  });

  it('should render Text component for Display type', () => {
    const currentSection = {
      component_type: 'Display',
      logical_field_name: 'test_display',
    };

    const { container } = render(
      renderComponent(
        currentSection,
        0,
        mockHandleCallback,
        mockHandleFieldDispatch,
        mockUserInput
      )
    );

    expect(container).toHaveTextContent('Text Mock');
  });

  it('should render Button component for RateButton type', () => {
    const currentSection = {
      component_type: 'RateButton',
      logical_field_name: 'test_rate_button',
    };

    const { container } = render(
      renderComponent(
        currentSection,
        0,
        mockHandleCallback,
        mockHandleFieldDispatch,
        mockUserInput
      )
    );

    expect(container).toHaveTextContent('Button Mock');
  });

  it('should render Toggle component for authorize type', () => {
    const currentSection = {
      component_type: 'authorize',
      logical_field_name: 'test_authorize',
    };

    const { container } = render(
      renderComponent(
        currentSection,
        0,
        mockHandleCallback,
        mockHandleFieldDispatch,
        mockUserInput
      )
    );

    expect(container).toHaveTextContent('Toggle Mock');
  });

  it('should render Information component for Infowithoutmodal type', () => {
    const currentSection = {
      component_type: 'Infowithoutmodal',
      logical_field_name: 'test_info',
    };

    const { container } = render(
      renderComponent(
        currentSection,
        0,
        mockHandleCallback,
        mockHandleFieldDispatch,
        mockUserInput
      )
    );

    expect(container).toHaveTextContent('Information Mock');
  });

  it('should render SelectionBox for PhoneAreaCode type when logical_field_name is ofc1_number', () => {
    const currentSection = {
      component_type: 'PhoneAreaCode',
      logical_field_name: 'ofc1_number',
    };

    const { container } = render(
      renderComponent(
        currentSection,
        0,
        mockHandleCallback,
        mockHandleFieldDispatch,
        mockUserInput
      )
    );

    expect(container).toHaveTextContent('SelectionBox Mock');
  });

  it('should return undefined for unknown component types', () => {
    const currentSection = {
      component_type: 'UnknownComponent',
      logical_field_name: 'test_unknown',
    };

    const result = renderComponent(
      currentSection,
      0,
      mockHandleCallback,
      mockHandleFieldDispatch,
      mockUserInput
    );

    expect(result).toBeUndefined();
  });

  it('should pass correct props to the rendered component', () => {
    const currentSection = {
      component_type: 'Text',
      logical_field_name: 'test_text',
      customProp: 'customValue'
    };

    const { container } = render(
      renderComponent(
        currentSection,
        0,
        mockHandleCallback,
        mockHandleFieldDispatch,
        mockUserInput
      )
    );

    const expectedProps = {
      data: currentSection,
      key: 'test_text',
      handleCallback: mockHandleCallback,
      handleFieldDispatch: mockHandleFieldDispatch,
      value: mockUserInput
    };

    expect(container).toHaveTextContent(JSON.stringify(expectedProps));
  });
});
