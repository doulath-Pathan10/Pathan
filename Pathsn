import { useState, useEffect, useRef } from "react";
import Pdf from "../../../../shared/components/pdf/pdf";
import { getData, getPDFData } from "../../services/preApprovalServices";
import { CATEGORIES, KFS_DOC_URL, KFS_DOC_URL_Chinees } from "../../services/constants";
import { useDispatch, useSelector } from "react-redux";
import { StoreModel } from "../../../../utils/model/common-model";
import Spinner from "../../../../shared/components/spinner/spinner";
import { preApprovalAction } from "../../store/preApproval-slice";
import { dispatchLoader, lovRequests } from "../../../../services/common-service";
import './casaTNC.scss';
import CASATNCTerms from "../../../../assets/pdf-file/HK_Integrated_deposit.pdf";
import CASATNCCHINESE from "../../../../assets/pdf-file/hk-cx-important-info-n-ht-chi-03-2023s.pdf"
import './casaTNC.scss';
import { stagesAction } from "../../../../utils/store/stages-slice";
import { CONSTANTS } from "../../../../utils/common/constants";
import { getUrl } from "../../../../utils/common/change.utils";
const language = getUrl.getLanguageInfo("lang")

const CasaTNC: React.FC<any> = ({
    stageID,
    // nextPage
}) => {

    const listInnerRef = useRef<HTMLDivElement>(null);
    const [pdfLinkTerms, setPdfLinkTerms] = useState<any | null>(null);
    const [, setkfsDocPDF] = useState("");
    const [, setkfsDocPDFDownload] = useState("");
    const [pdfName, setPdfName] = useState('');
    const [visibleButton, setVisibleButton] = useState(false);
    const [showSpinner, setShowSpinner] = useState(true);
    const [, setTitle] = useState("Before you start your application:");
    const [, setTnCBannerNotes] = useState("Please READ the following Terms & Conditions by tapping on the button or using the scroll bar to read till the bottom of the screen to proceed");
    const formConfigmetaData = useSelector(
        (state: StoreModel) => state?.preApproval?.formConfigmetaData
    );
    const stageSelector = useSelector((state: StoreModel) => state.stages.stages);
    const dispatch = useDispatch();

    useEffect(() => {
        setShowSpinner(true);
        dispatch(dispatchLoader(true));
        setTitle('Before you start your application:');
        setTnCBannerNotes("Please READ the following Terms & Conditions by tapping on the button or using the scroll bar to read till the bottom of the screen to proceed");
        const url = language === 'zh' ? KFS_DOC_URL_Chinees : KFS_DOC_URL;
        getData(url)?.then((response: any) => {
            const campaignID = formConfigmetaData?.products[0].campaign;
            let pdfURLNew = "";
            /*istanbul ignore else*/
            if (stageID === undefined) {
                const userAgent = navigator.userAgent.toLowerCase();
                const isMobile = /andriod|iphone|ipad|mobile/i.test(userAgent) || navigator.maxTouchPoints > 0;
                const pdfURL = isMobile ? response.data.productsMob[campaignID] : response.data.products[campaignID];
                const pdfMap = pdfURL?.map((item: any) => item.pdfURL)
                const getPDFName: any = new URL(pdfMap).pathname.split('/').pop();
                /*istanbul ignore else*/ 
                if (window.location.host === "localhost:3000") {
                    if (pdfURL.length > 0 && typeof pdfURL[0] === 'object') {
                        pdfURLNew = pdfURL[0]?.pdfURL?.replace(
                            "https://pt.sc.com/",
                            "http://localhost:3000/"

                        );
                        setPdfName(getPDFName);
                    }
                } else {
                    pdfURLNew = pdfURL[0].pdfURL;
                }
                setkfsDocPDF(pdfURLNew);
                getPDFData(pdfURLNew).then((response: any) => {
                    const pdfurl: any = {};
                    pdfurl.pdf = response;
                    pdfurl.pdfurl = pdfURLNew;
                    setkfsDocPDFDownload(response);
                    dispatch(preApprovalAction.setKfsDocumentPdf(pdfurl.pdf));
                    // onScrollEnd(false); 
                    setShowSpinner(false);
                    dispatch(dispatchLoader(false));
                });
                const allPDFLinks = response?.data?.tncLinkCampaignCode.isCasa[0].pdfLinks;
                setPdfLinkTerms(allPDFLinks)
            }
        })
    }, []);

    useEffect(() => {
        const listInnerElement = listInnerRef.current;
        /* istanbul ignore else */
        if (listInnerElement) {
            listInnerElement.addEventListener("scroll", scrollToBottom);
            // Clean-up
            return () => {
                listInnerElement.removeEventListener("scroll", scrollToBottom);
            };
        }
        // window.history.replaceState("", "", "/hk/before-start")
    });


    const downloadPDFPreApproval = (e: React.MouseEvent<HTMLButtonElement>) => {
        e?.preventDefault()
        const lin = document.createElement('a');
        lin.href = CASATNCTerms;
        const isSafari = /^((?!chrome|andriod).)*safari/i.test(navigator.userAgent);
        if (isSafari) {
            lin.download = pdfName.endsWith('.pdf') ? pdfName : `${pdfName}.pdf`;
            document.body.appendChild(lin);
            lin.click();
            document.body.removeChild(lin);
        } else {
            lin.download = 'hk-cx-important-info-n-ht-eng-03-2023s';
            document.body.appendChild(lin);
            lin.click();
            document.body.removeChild(lin);
        };
    }
    const btnClickScroll = () => {
        /*istanbul ignore else*/
        if (!listInnerRef.current) return;
        const container = listInnerRef.current;
        let height = stageID === 0 ? 200 : 0;
        const scrollStep =( container.scrollHeight / 4) - height ;
        listInnerRef.current?.scrollBy({ top: scrollStep, behavior: "smooth" });
    };

    const scrollToBottom = () => {
        /*istanbul ignore else*/
        if (listInnerRef.current) {
            const { scrollTop, scrollHeight, clientHeight } = listInnerRef.current;
            const isNearBottom = scrollTop + clientHeight >= scrollHeight - 50;
/*istanbul ignore else*/
            if (isNearBottom) {
                setVisibleButton(true);
            }
        }
    };
    useEffect(() => {
        const listInnerElement = listInnerRef.current;
        setVisibleButton(false);
        /*istanbul ignore else*/
        if (listInnerElement) {
            listInnerElement.addEventListener("scroll", scrollToBottom);
            return () => {
                listInnerElement.removeEventListener("scroll", scrollToBottom);
            };
        }
    }, []);

    const nextPages = () => {
        dispatch(lovRequests(stageSelector[0].stageInfo, CONSTANTS.STAGE_NAMES.AD_1));
        dispatch(preApprovalAction.setCurrentStage(CONSTANTS.STAGE_NAMES.AD_1));
        dispatch(stagesAction.updateStageId(CONSTANTS.STAGE_NAMES.AD_1));
    }
    return (
        <div>
            {showSpinner === true ? (
                <Spinner></Spinner>
            ) : (
                <>
                    <div>
                        <div className="hk-banner-set">
                            <div className="card-title">{language === CONSTANTS.LANG_EN ? CONSTANTS.beforeYouStartYourApplication : language === CONSTANTS.LANG_CN ? CONSTANTS.beforeYouStartYourApplication_CN : CONSTANTS.beforeYouStartYourApplication_HK}</div>
                            <section className='banner_notes'>
                                <p>{language === CONSTANTS.LANG_EN ? CONSTANTS.pleaseReadTheFollowingTermsConditions : language === CONSTANTS.LANG_CN ? CONSTANTS.pleaseReadTheFollowingTermsConditions_CN : CONSTANTS.pleaseReadTheFollowingTermsConditions_HK}</p>
                            </section>
                        </div>
                        <button
                            onClick={(evt: React.MouseEvent<HTMLButtonElement>) => downloadPDFPreApproval(evt)}
                            className="view-pdf"
                        >
                            {language === CONSTANTS.LANG_EN ? CONSTANTS.DownloadBtn : language === CONSTANTS.LANG_CN ? CONSTANTS.DownloadBtn_CN : CONSTANTS.DownloadBtn_HK}
                        </button>
                    </div>
                    <div className="pdf-view">
                        <div className="react-pdf__Page__canvas1" ref={listInnerRef}>
                            {language === 'zh' ? (
                                <Pdf fileName={CASATNCCHINESE} />
                            ) : (
                                <Pdf fileName={CASATNCTerms} />
                            )}
                        </div>
                    </div>

                    {stageID == undefined && (
                        <div className="pdf-table">
                            <div className="download-section">
                                <span className="download-header">{`${language === CONSTANTS.LANG_EN ? CONSTANTS.tapBelow : language === CONSTANTS.LANG_CN? CONSTANTS.tapBelow_CN : CONSTANTS.tapBelow_HK}`}</span>
                                <span className="images"></span>
                            </div>

                            <div className="tc-container">
                                {pdfLinkTerms?.map((item: any) => {
                                    return (
                                        <div className="link_title">
                                            <a
                                                href={item.url}
                                                download
                                                target="_blank"
                                                className="href_title"
                                            >
                                                {item.Title}
                                            </a>
                                        </div>
                                    );
                                })}
                            </div>
                        </div>
                    )}
                    <div
                        className="col-xs-4 col-sm-4 col-md-4 col-lg-4"
                        id="footer-content"
                    >
                        {!visibleButton ? (
                            <>
                                <div className="pre-approval-accept confirm-btn1" aria-describedby="submitButton">
                                    <footer className="pre-approval-confirm-btn1" onClick={btnClickScroll}>
                                        {language === CONSTANTS.LANG_EN ? CONSTANTS.tapScroll : language === CONSTANTS.LANG_CN ? CONSTANTS.tapScroll_CN : CONSTANTS.tapScroll_HK}
                                    </footer>
                                </div>
                            </>
                        )
                            :
                            <div
                                className="pre-approval-accept confirm-btn1"
                                id="navigationBtn"
                            >
                                <button
                                    id="pre-approval-confirm-btn1"
                                    className="pre-approval-confirm-btn1"
                                    onClick={ nextPages}
                                >
                                    {language === CONSTANTS.LANG_EN ? CONSTANTS.iAccept : language === CONSTANTS.LANG_CN ? CONSTANTS.iAccept_CN : CONSTANTS.tapScroll_HK}
                                </button>

                            </div>
                        }
                    </div>
                </>
            )}
        </div>
    );
};
export default CasaTNC;
