import { authenticateType, filterDisableFields, getUrl } from "../../utils/common/change.utils";
import {
  KeyWithAnyModel,
  ValidationObjModel,
} from "../../utils/model/common-model";
import rulesUtils from "./rules.utils";
 
const RulesSSF = (
  props: KeyWithAnyModel,
  stageInfo: KeyWithAnyModel,
  missing_fields?: Array<string>
): KeyWithAnyModel => {
  const auth = getUrl.getParameterByName("auth");
  const fieldSet = props.flat();
  const products = JSON.parse(localStorage.getItem('products') || '[]');
  const TDProducts = stageInfo?.products.filter((product: any) => product?.product_category === 'TD');
  const filteredFields = props[0].filter((fields: any) => fields.field_set_name === "   ");
  const FieldSetMap:any = {};
  filteredFields[0]?.fields.map((product: any) => {
    products.forEach((prod: any) => {
      if (product.sub_product_code.includes(prod.product_type)) {
        const name = prod.product_category_name + " - " + prod.name;
        if(FieldSetMap[name]){
          FieldSetMap[name].fields.push(product);
        }else{
          FieldSetMap[name] = {
            field_set_name: name,
            fields: [product]
          }
        }
      }
    });
  });
  const groupedFieldSet:any = Object.values(FieldSetMap);
  filteredFields.push(...groupedFieldSet);
  props[0].push(...filteredFields);
  const isMyInfoVirtual = getUrl.getParameterByName("isMyInfoVirtual");
  const validationObj: ValidationObjModel = {
    nonEditable: [],
    hidden: [],
    modifyVisibility: []
  };
 
  if (
    stageInfo.application.source_system_name === "2" &&
    (authenticateType() === "myinfo" || isMyInfoVirtual === "true")
  ) {
    let nonEditableFields: Array<string> = [];
    let default_editable : any[] = [];
    /*istanbul ignore else */
    if(stageInfo.products[0].product_category !== 'CA' && stageInfo.products[0].product_category !== 'SA'){
     default_editable = ['email', 'mobile_number','account_currency_9']
    }
    if(stageInfo.products?.length>1){
    if(stageInfo.products.some((p:any)=>p.product_type ==="337") && stageInfo.products.some((p:any)=>p.product_type ==="337")){
      const hiddenFields = ["no_of_accounts_rwb","mode_of_operation","pass_exp_dt"];
      validationObj.hidden!.push(hiddenFields);

    }
    if(stageInfo.products.length>1 && TDProducts){
      const hiddenFields = ["no_of_accounts_rwb","mode_of_operation","pass_exp_dt"];
      validationObj.hidden!.push(hiddenFields);

    }
 
  }
    let myinfoMissingFields: Array<string> = ['ownership_status'];
   /*istanbul ignore else */
    if (!(stageInfo.applicants['mobile_number_a_1'])) {
      myinfoMissingFields.push('mobile_number');
    }
    /*istanbul ignore else */
    if (!stageInfo.applicants['email_a_1']) {
      myinfoMissingFields.push('email');
    }
 
    const myInfoMissingValues = myinfoMissingFields;
    nonEditableFields = filterDisableFields(
      fieldSet[0].fields,
      myInfoMissingValues,
      default_editable
    );
    validationObj.nonEditable.push(nonEditableFields);
    const hiddenFields = (parseInt(localStorage.getItem("applicantNo") || '0') > 1 ? ["contact_preference_casa_etc", "dsa_code","pass_exp_dt"] : ["contact_preference_casa_etc", "dsa_code","mode_of_operation","pass_exp_dt"]);
    validationObj.hidden!.push(hiddenFields);
  }
  else if (stageInfo.applicants['auth_mode_a_1'] === 'IX') {
    const ibankingFields = ["full_name", "email", "mobile_number", "account_currency_9", "account_currency", "contact_preference_casa_etc"];
    let ibankingDisableFields = ["full_name"]
    /*istanbul ignore else */
    if (stageInfo.applicants['mobile_number_a_1']) {
      ibankingDisableFields.push('mobile_number');
    }
    /*istanbul ignore else */
    if (stageInfo.applicants['email_a_1']) {
      ibankingDisableFields.push('email');
    }
    /*istanbul ignore else */
    if (stageInfo.applicants['account_currency_9_a_1']) {
      ibankingDisableFields.push('account_currency_9');
    }
    /*istanbul ignore else */
    if (stageInfo.applicants['account_currency_a_1']) {
      ibankingDisableFields.push('account_currency');
    }
    validationObj.nonEditable.push(ibankingDisableFields);
    let hiddenFields: any[] = [];
    fieldSet.forEach((field: KeyWithAnyModel) => {
      field.fields.forEach((fieldName: KeyWithAnyModel) => {
        /*istanbul ignore else */
        if (ibankingFields.indexOf(fieldName["logical_field_name"]) === -1) {
          hiddenFields.push(fieldName["logical_field_name"])
        }
      });
    });
    validationObj.hidden!.push(hiddenFields);
  } else if (authenticateType() === "manual") {
    let defaultVisiblity = ["date_of_birth", "residency_status"];
    validationObj.modifyVisibility!.push(defaultVisiblity)
    const hiddenFields = [
      "ownership_status",
      "residential_address",
      "see_other_myInfo_details",
      "see_other_myInfo_details_consent",
      "contact_preference_casa_etc",
      "residential_address_consent_a_1",
      "dsa_code",
      "mode_of_operation",
      "pass_exp_dt",
      "detailed_full_name"
    ];
    validationObj.hidden!.push(hiddenFields);
  } else {
    const hiddenFields = [
      "see_other_myInfo_details",
      "see_other_myInfo_details_consent",
      "contact_preference_casa_etc",
      "dsa_code"
    ];
    validationObj.hidden!.push(hiddenFields);
  }
  const updatedAccountCurrencyFields = props[0].filter((fields: any) => fields.field_set_name !== "   ");
  return rulesUtils([updatedAccountCurrencyFields], validationObj);
};
 
export default RulesSSF;
Please write test cases using jest with RTL
