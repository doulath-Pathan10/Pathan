import Rules_bd_1 from './Rules_bd_1';
import rulesUtils from './rules.utils';
import * as changeUtils from '../../utils/common/change.utils';

// Mock the dependencies
jest.mock('./rules.utils');
jest.mock('../../utils/common/change.utils');

describe('Rules_bd_1 Utility Function', () => {
  const mockProps = [
    [
      {
        field_set_name: "Basic Information",
        fields: [
          { logical_field_name: "full_name" },
          { logical_field_name: "email" },
          { logical_field_name: "mobile_number" },
          { logical_field_name: "account_currency_9" },
          { logical_field_name: "account_currency" },
          { logical_field_name: "contact_preference_casa" },
          { logical_field_name: "dsa_code" },
          { logical_field_name: "nationality" }
        ]
      },
      {
        field_set_name: "Additional Information",
        fields: [
          { logical_field_name: "see_other_myInfo_details" },
          { logical_field_name: "see_other_myInfo_details_consent" }
        ]
      }
    ]
  ];

  const mockApplication = {
    application: {
      source_system_name: "3",
      products: [
        { product_category: "CC" },
        { product_category: "CA" }
      ]
    }
  };

  const mockStageSelector = {
    stageInfo: {
      applicants: {
        auth_mode_a_1: 'IX',
        account_currency_9_a_1: '',
        account_currency_a_1: ''
      }
    },
    stageId: 'bd-1'
  };

  beforeEach(() => {
    jest.clearAllMocks();
    // Default mocks
    (changeUtils.authenticateType as jest.Mock).mockReturnValue('myinfo');
    (changeUtils.getUrl.getParameterByName as jest.Mock).mockReturnValue('true');
    (changeUtils.getUrl.getStageInfo as jest.Mock).mockReturnValue([mockStageSelector]);
  });

  it('should call rulesUtils with correct arguments', () => {
    Rules_bd_1(mockProps, mockApplication);
    expect(rulesUtils).toHaveBeenCalled();
  });

  describe('iBanking authentication mode (IX)', () => {
    beforeEach(() => {
      (changeUtils.getUrl.getStageInfo as jest.Mock).mockReturnValue([{
        stageInfo: {
          applicants: {
            auth_mode_a_1: 'IX'
          }
        }
      }]);
    });

    it('should set nonEditable fields correctly', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.nonEditable).toContainEqual([
        "full_name",
        "email",
        "mobile_number",
        "account_currency_9",
        "account_currency",
        "contact_preference_casa"
      ]);
    });

    it('should hide non-iBanking fields', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.hidden).toContainEqual([
        "dsa_code",
        "nationality"
      ]);
    });
  });

  describe('MyInfo or Resume authentication', () => {
    it('should set correct hidden fields when source system is 3', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.hidden).toContainEqual([
        "dsa_code",
        "nationality",
        "country_of_birth",
        "contact_preference",
        "gender",
        "marital_status",
        "nationality_add",
        "other_name_or_alias",
        "education_level"
      ]);
    });

    it('should add currency fields to hidden when empty in stageInfo', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.hidden[0]).toEqual(expect.arrayContaining([
        "account_currency_9",
        "account_currency"
      ]));
    });

    it('should set correct nonEditable fields', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.nonEditable).toContainEqual([
        "full_name",
        "email",
        "date_of_birth",
        "mobile_number",
        "residency_status",
        "NRIC",
        "residential_address",
        "see_other_myInfo_details",
        "see_other_myInfo_details_consent",
        "ownership_status",
        "account_currency_9",
        "account_currency"
      ]);
    });
  });

  describe('Manual authentication', () => {
    beforeEach(() => {
      (changeUtils.authenticateType as jest.Mock).mockReturnValue('manual');
    });

    it('should set correct hidden fields', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.hidden).toContainEqual([
        "ownership_status",
        "education_level",
        "nationality",
        "nationality_add",
        "country_of_birth",
        "contact_preference",
        "other_name_or_alias",
        "education_level",
        "gender",
        "marital_status",
        "residential_address",
        "see_other_myInfo_details",
        "see_other_myInfo_details_consent",
      ]);
    });

    it('should set correct nonEditable fields', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.nonEditable).toContainEqual([
        "full_name",
        "email",
        "mobile_number",
        "residential_status",
        "account_currency_9",
        "account_currency",
        "residency_status",
        "NRIC",
        "passport_no"
      ]);
    });
  });

  describe('Default case', () => {
    beforeEach(() => {
      (changeUtils.authenticateType as jest.Mock).mockReturnValue('other');
      (changeUtils.getUrl.getParameterByName as jest.Mock).mockReturnValue('false');
    });

    it('should hide only myInfo details fields', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.hidden).toContainEqual([
        "see_other_myInfo_details",
        "see_other_myInfo_details_consent",
      ]);
    });
  });

  describe('Product category handling', () => {
    it('should filter account_currency_9 when products are CC and CA', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [fieldSet] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(fieldSet[0][0].fields).not.toContainEqual(
        expect.objectContaining({ logical_field_name: "account_currency_9" })
      );
    });
  });

  describe('Edge cases', () => {
    it('should handle empty props', () => {
      const emptyProps = [[]];
      Rules_bd_1(emptyProps, mockApplication);
      expect(rulesUtils).toHaveBeenCalledWith([[]], expect.any(Object));
    });

    it('should handle missing field sets', () => {
      const partialProps = [[
        { field_set_name: "Other Set", fields: [] }
      ]];
      Rules_bd_1(partialProps, mockApplication);
      expect(rulesUtils).toHaveBeenCalled();
    });
  });
});
