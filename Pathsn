import Rules_ad_1 from './Rules_ad_1';
import rulesUtils from './rules.utils';
import { store } from '../../utils/store/store';

// Mock localStorage
const localStorageMock = (() => {
  let store: Record<string, string> = {};
  return {
    getItem: (key: string) => store[key] || null,
    setItem: (key: string, value: string) => {
      store[key] = value.toString();
    },
    clear: () => {
      store = {};
    },
  };
})();

Object.defineProperty(window, 'localStorage', {
  value: localStorageMock,
});

// Mock rulesUtils
jest.mock('./rules.utils', () => jest.fn());

describe('Rules_ad_1 Utility Function', () => {
  const mockProps = [
    [
      {
        field_set_name: 'Additional Details',
        fields: [
          { logical_field_name: 'reason_for_account_rwb', component_type: 'Text' },
          { logical_field_name: 'Initial_deposit_rwb', component_type: 'Text' },
          { logical_field_name: 'source_of_fund_rwb', component_type: 'Text' },
        ],
      },
      {
        field_set_name: 'Banking Services',
        fields: [
          { logical_field_name: 'debit_card_request_rwb', component_type: 'Checkbox' },
          { logical_field_name: 'issuance_type', component_type: 'SelectionBox' },
          { logical_field_name: 'embossed_dc_name_rwb', component_type: 'Text' },
          { logical_field_name: 'existing_account_no_dc', component_type: 'Text' },
          { logical_field_name: 'cheque_book_request_rwb', component_type: 'Checkbox' },
        ],
      },
      {
        field_set_name: 'Time Deposit Details',
        fields: [
          { logical_field_name: 'td_product_currency_value', component_type: 'Text' },
          { logical_field_name: 'td_depoist_amount', component_type: 'Text' },
          { logical_field_name: 'td_term_type', component_type: 'SelectionBox' },
        ],
      },
    ],
  ];

  const mockStageInfo = {
    applicants: {
      no_of_accounts_rwb_a_1: 2,
    },
    products: [],
  };

  beforeEach(() => {
    localStorage.clear();
    (rulesUtils as jest.Mock).mockClear();
  });

  describe('Basic functionality', () => {
    it('should handle empty products in localStorage', () => {
      localStorage.setItem('products', '[]');
      Rules_ad_1(mockProps, mockStageInfo);
      expect(rulesUtils).toHaveBeenCalled();
    });

    it('should handle single product case', () => {
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'CA', name: 'Current Account' }]));
      Rules_ad_1(mockProps, mockStageInfo);
      expect(rulesUtils).toHaveBeenCalled();
    });
  });

  describe('Multiple products scenarios', () => {
    beforeEach(() => {
      localStorage.setItem(
        'products',
        JSON.stringify([
          { product_category_name: 'CA', name: 'Current Account' },
          { product_category_name: 'TD', name: 'Time Deposit' },
        ])
      );
    });

    it('should handle multiple products with product type 307 and 318', () => {
      const stageInfo = {
        ...mockStageInfo,
        products: [
          { product_type: '307', product_category: 'CA' },
          { product_type: '318', product_category: 'CA' },
        ],
      };
      Rules_ad_1(mockProps, stageInfo);
      expect(rulesUtils).toHaveBeenCalled();
    });

    it('should handle multiple products with product type 339 and 318', () => {
      const stageInfo = {
        ...mockStageInfo,
        products: [
          { product_type: '339', product_category: 'CA' },
          { product_type: '318', product_category: 'CA' },
        ],
      };
      Rules_ad_1(mockProps, stageInfo);
      expect(rulesUtils).toHaveBeenCalled();
    });

    it('should handle multiple products with product type 504 and 516', () => {
      const stageInfo = {
        ...mockStageInfo,
        products: [
          { product_type: '504', product_category: 'CA' },
          { product_type: '516', product_category: 'CA' },
        ],
      };
      Rules_ad_1(mockProps, stageInfo);
      expect(rulesUtils).toHaveBeenCalled();
    });

    it('should handle multiple products with product type 504 and 507', () => {
      const stageInfo = {
        ...mockStageInfo,
        products: [
          { product_type: '504', product_category: 'CA' },
          { product_type: '507', product_category: 'CA' },
        ],
      };
      Rules_ad_1(mockProps, stageInfo);
      expect(rulesUtils).toHaveBeenCalled();
    });
  });

  describe('Repeat count scenarios', () => {
    it('should handle repeat count with product type 310', () => {
      const stageInfo = {
        ...mockStageInfo,
        products: [{ product_type: '310', product_category: 'CA' }],
      };
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'CA', name: 'Current Account' }]));
      Rules_ad_1(mockProps, stageInfo);
      expect(rulesUtils).toHaveBeenCalled();
    });

    it('should handle repeat count with product type 307', () => {
      const stageInfo = {
        ...mockStageInfo,
        products: [{ product_type: '307', product_category: 'CA' }],
      };
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'CA', name: 'Current Account' }]));
      Rules_ad_1(mockProps, stageInfo);
      expect(rulesUtils).toHaveBeenCalled();
    });

    it('should handle repeat count with product type 324', () => {
      const stageInfo = {
        ...mockStageInfo,
        products: [{ product_type: '324', product_category: 'CA' }],
      };
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'CA', name: 'Current Account' }]));
      Rules_ad_1(mockProps, stageInfo);
      expect(rulesUtils).toHaveBeenCalled();
    });
  });

  describe('Time Deposit scenarios', () => {
    it('should handle TD product category', () => {
      const stageInfo = {
        ...mockStageInfo,
        products: [{ product_category: 'TD' }],
      };
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'TD', name: 'Time Deposit' }]));
      Rules_ad_1(mockProps, stageInfo);
      expect(rulesUtils).toHaveBeenCalled();
    });

    it('should handle multiple products with TD', () => {
      const stageInfo = {
        ...mockStageInfo,
        products: [
          { product_type: '307', product_category: 'CA' },
          { product_category: 'TD' },
        ],
      };
      localStorage.setItem(
        'products',
        JSON.stringify([
          { product_category_name: 'CA', name: 'Current Account' },
          { product_category_name: 'TD', name: 'Time Deposit' },
        ])
      );
      Rules_ad_1(mockProps, stageInfo);
      expect(rulesUtils).toHaveBeenCalled();
    });

    it('should handle TD with product type 337', () => {
      const stageInfo = {
        ...mockStageInfo,
        products: [
          { product_type: '337', product_category: 'TD' },
          { product_type: '310', product_category: 'CA' },
        ],
      };
      localStorage.setItem(
        'products',
        JSON.stringify([
          { product_category_name: 'TD', name: 'Time Deposit' },
          { product_category_name: 'CA', name: 'Current Account' },
        ])
      );
      Rules_ad_1(mockProps, stageInfo);
      expect(rulesUtils).toHaveBeenCalled();
    });
  });

  describe('Edge cases', () => {
    it('should handle empty props', () => {
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'CA', name: 'Current Account' }]));
      Rules_ad_1([], mockStageInfo);
      expect(rulesUtils).toHaveBeenCalled();
    });

    it('should handle undefined no_of_accounts_rwb_a_1', () => {
      const stageInfo = {
        applicants: {},
        products: [{ product_type: '310', product_category: 'CA' }],
      };
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'CA', name: 'Current Account' }]));
      Rules_ad_1(mockProps, stageInfo);
      expect(rulesUtils).toHaveBeenCalled();
    });

    it('should handle CA product with type 317 or 314', () => {
      const stageInfo = {
        ...mockStageInfo,
        products: [{ product_type: '317', product_category: 'CA' }],
      };
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'CA', name: 'Current Account' }]));
      Rules_ad_1(mockProps, stageInfo);
      expect(rulesUtils).toHaveBeenCalled();
    });
  });

  describe('Field modifications', () => {
    it('should modify td_product_currency_value from Text to SelectionBox for TD products', () => {
      const stageInfo = {
        ...mockStageInfo,
        products: [{ product_category: 'TD' }],
      };
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'TD', name: 'Time Deposit' }]));
      
      Rules_ad_1(mockProps, stageInfo);
      
      const filteredFields = (rulesUtils as jest.Mock).mock.calls[0][0][0];
      const tdField = filteredFields
        .find((fs: any) => fs.field_set_name === 'Time Deposit Details')
        ?.fields.find((f: any) => f.logical_field_name === 'td_product_currency_value');
      
      expect(tdField?.component_type).toBe('SelectionBox');
    });

    it('should hide specific fields for TD products', () => {
      const stageInfo = {
        ...mockStageInfo,
        products: [{ product_category: 'TD' }],
      };
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'TD', name: 'Time Deposit' }]));
      
      Rules_ad_1(mockProps, stageInfo);
      
      const validationObj = (rulesUtils as jest.Mock).mock.calls[0][1];
      expect(validationObj.hidden[0]).toContain('debit_card_request_rwb');
      expect(validationObj.hidden[0]).toContain('existing_account_no_dc');
      expect(validationObj.hidden[0]).toContain('issuance_type');
    });
  });
});
