import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import HeaderModal from './HeaderModal';
import { useSelector, useDispatch } from 'react-redux';
import { getData, getPDFData } from '../../../modules/preApproval/services/preApprovalServices';

// Mock the react-redux hooks
jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

// Mock the services
jest.mock('../../../modules/preApproval/services/preApprovalServices', () => ({
  getData: jest.fn(),
  getPDFData: jest.fn(),
}));

// Mock the getLanguageInfo utility
jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn().mockReturnValue('en'),
  },
}));

// Mock the PDF component
jest.mock('../pdf/pdf', () => () => <div>Mock PDF Component</div>);

describe('HeaderModal Component', () => {
  const mockDispatch = jest.fn();
  const mockClosepdf = jest.fn();
  const mockFormConfigmetaData = {
    products: [
      {
        campaign: 'test-campaign',
      },
    ],
  };

  beforeEach(() => {
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useSelector as jest.Mock).mockImplementation((selector) => {
      if (selector.toString().includes('formConfigmetaData')) {
        return mockFormConfigmetaData;
      }
      return null;
    });

    // Mock successful responses
    (getData as jest.Mock).mockResolvedValue({
      data: {
        products: {
          'test-campaign': [
            { pdfURL: 'https://example.com/test.pdf' },
          ],
        },
        productsMob: {
          'test-campaign': [
            { pdfURL: 'https://example.com/mobile/test.pdf' },
          ],
        },
        tncLinkCampaignCode: {
          'test-campaign': [
            {
              pdfLinks: [
                { url: 'https://example.com/terms1.pdf', Title: 'Terms 1' },
                { url: 'https://example.com/terms2.pdf', Title: 'Terms 2' },
              ],
            },
          ],
          isCasa: [
            {
              pdfLinks: [
                { url: 'https://example.com/deposit1.pdf', Title: 'Deposit 1' },
              ],
            },
          ],
        },
      },
    });

    (getPDFData as jest.Mock).mockResolvedValue('mock-pdf-data');
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(
      <HeaderModal
        fileName="test.pdf"
        closepdf={mockClosepdf}
        title="Test Title"
      />
    );
    expect(screen.getByText('Test Title')).toBeInTheDocument();
  });

  it('displays the PDF component', () => {
    render(
      <HeaderModal
        fileName="test.pdf"
        closepdf={mockClosepdf}
        title="Test Title"
      />
    );
    expect(screen.getByText('Mock PDF Component')).toBeInTheDocument();
  });

  it('calls closepdf when close button is clicked', () => {
    render(
      <HeaderModal
        fileName="test.pdf"
        closepdf={mockClosepdf}
        title="Test Title"
      />
    );
    fireEvent.click(screen.getByRole('button', { name: /close/i }));
    expect(mockClosepdf).toHaveBeenCalled();
  });

  it('fetches PDF data on mount', async () => {
    render(
      <HeaderModal
        fileName="test.pdf"
        closepdf={mockClosepdf}
        title="Test Title"
      />
    );

    await waitFor(() => {
      expect(getData).toHaveBeenCalled();
      expect(getPDFData).toHaveBeenCalled();
    });
  });

  it('displays terms and conditions links when footer is true and title matches', async () => {
    render(
      <HeaderModal
        fileName="test.pdf"
        closepdf={mockClosepdf}
        title="Terms & Conditions , Credit Card Application Declaration"
        footer={true}
      />
    );

    await waitFor(() => {
      expect(screen.getByText('Terms 1')).toBeInTheDocument();
      expect(screen.getByText('Terms 2')).toBeInTheDocument();
    });
  });

  it('displays deposit links when footer is true and title does not match terms', async () => {
    render(
      <HeaderModal
        fileName="test.pdf"
        closepdf={mockClosepdf}
        title="Deposit Terms"
        footer={true}
      />
    );

    await waitFor(() => {
      expect(screen.getByText('Deposit 1')).toBeInTheDocument();
    });
  });

  it('handles mobile device detection', async () => {
    // Mock mobile user agent
    Object.defineProperty(window.navigator, 'userAgent', {
      value: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15',
      writable: true,
    });
    Object.defineProperty(window, 'innerWidth', {
      value: 500,
      writable: true,
    });

    render(
      <HeaderModal
        fileName="test.pdf"
        closepdf={mockClosepdf}
        title="Test Title"
      />
    );

    await waitFor(() => {
      expect(getData).toHaveBeenCalled();
    });
  });

  it('handles localhost URL replacement', async () => {
    const originalLocation = window.location;
    delete window.location;
    window.location = {
      ...originalLocation,
      host: 'localhost:3000',
    };

    render(
      <HeaderModal
        fileName="test.pdf"
        closepdf={mockClosepdf}
        title="Test Title"
      />
    );

    await waitFor(() => {
      expect(getData).toHaveBeenCalled();
    });

    window.location = originalLocation;
  });

  it('handles Chinese language', async () => {
    // Mock Chinese language
    (require('../../../utils/common/change.utils').getUrl.getLanguageInfo as jest.Mock).mockReturnValue('zh');

    render(
      <HeaderModal
        fileName="test.pdf"
        closepdf={mockClosepdf}
        title="Test Title"
      />
    );

    await waitFor(() => {
      expect(getData).toHaveBeenCalled();
    });
  });

  it('displays footer content when provided', () => {
    const testFooter = 'This is a test footer message';
    render(
      <HeaderModal
        fileName="test.pdf"
        closepdf={mockClosepdf}
        title="Test Title"
        footer={testFooter}
      />
    );
    expect(screen.getByText(testFooter)).toBeInTheDocument();
  });

  it('handles errors in data fetching', async () => {
    (getData as jest.Mock).mockRejectedValue(new Error('Failed to fetch'));
    
    render(
      <HeaderModal
        fileName="test.pdf"
        closepdf={mockClosepdf}
        title="Test Title"
      />
    );

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(dispatchLoader(false));
    });
  });
});
