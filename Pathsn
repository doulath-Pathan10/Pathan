// import { useState } from 'react';
import './signature.scss';
import { KeyWithAnyModel, StoreModel } from '../../../utils/model/common-model';
import { useSelector, useDispatch } from 'react-redux';
import { useState, useEffect } from 'react';
import { fieldError, isFieldUpdate } from '../../../utils/common/change.utils';
import errorMsg from '../../../assets/_json/error.json';
import SignaturePreview from './signature-preview';
import SignModel from './sign-model';
import content from '../../../assets/_json/content.json';

const Signature = (props: KeyWithAnyModel) => {
  // const { data } = props;
  const { fieldName, label_name, sign_title, sign_title_info } = props;
  const viewSignature = useSelector((state: any) => state.stages.signatureDocument);
  const fieldErrorSelector = useSelector((state: any) => state.stages.error);
  const [error, setError] = useState('');
  const [readMore, setReadMore] = useState(false);
  const [show, setShow] = useState(false);
  const currentStages = useSelector((state: StoreModel) => state.stages.currentStage);
  const readMoreText = () => {
    setReadMore(!readMore);
  };
  const dispatch = useDispatch();

  const showSignModel = () => {
    setShow(true);
  };
 
  useEffect(() => {
    if(currentStages === "preference" || currentStages === "bbSubmit") {
      if (viewSignature) {
        setError('');
        dispatch(isFieldUpdate(props, viewSignature, fieldName));      
      }
    }   
  }, [viewSignature]);

  useEffect(() => {
    if (fieldError(fieldErrorSelector, props)) {
      setError(`${label_name} ${errorMsg.emptyError}`);
    } else {
      setError('');
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [fieldErrorSelector]);

  const handlePopupBackButton = (data:any) => {
    setShow(data);
  }

  return (
    <>
    {!show ? <div className="signature">
      <label htmlFor={fieldName}>{label_name}</label>
    {fieldName === "signUser" &&  currentStages ==="preference"
      &&
      <span>{content.preference.signuser} </span>    
    }
      {!viewSignature ? <div className="signature__box" onClick={() => showSignModel()} >
        <div className="signature__img"><span></span></div>
        <div className="signature__label">
          <label className="signature__bluelabel">{sign_title}</label>
          <label className="signature__blacklabel">{sign_title_info}</label>
        </div>
      </div> : <div className="signature__box__view" onClick={showSignModel}>
        <SignaturePreview show={show} viewSignature={viewSignature} />
      </div>}       

      
    </div> : <SignModel show={show} fieldName={fieldName} viewSignature={viewSignature} handlebuttonClick={handlePopupBackButton} />}</>
  );
};

export default Signature;
Please write test cases using jest with RTL
