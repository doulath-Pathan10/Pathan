import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import ThankYouCC from './ThankYouCC';

// Mock the child components
jest.mock('./thankyou-timeline', () => {
  return function MockThankYouTimeline(props: any) {
    return (
      <div data-testid="thankyou-timeline">
        <div data-testid="timeline-title">{props.title}</div>
        <div data-testid="timeline-data">{JSON.stringify(props.data)}</div>
        <div data-testid="timeline-completed">{props.checkCompletedStatus.toString()}</div>
        <button onClick={props.handleLink} data-testid="timeline-link-handler">
          Handle Link
        </button>
      </div>
    );
  };
});

jest.mock('./thankyou-banner', () => {
  return function MockThankYouBanner(props: any) {
    return (
      <div data-testid="thankyou-banner">
        <div data-testid="banner-header">{props.banner_header}</div>
        <div data-testid="banner-content">{props.banner_content.toString()}</div>
        <div data-testid="product-name">{props.productName}</div>
        <div data-testid="banner-body-2">{props.banner_body_2}</div>
        <div data-testid="resume-url">{props.resumeUrl}</div>
      </div>
    );
  };
});

jest.mock('./thankyou-survey', () => {
  return function MockThankYouSurvey() {
    return <div data-testid="thankyou-survey">Survey Component</div>;
  };
});

// Mock the SCSS import
jest.mock('./thank-you.scss', () => ({}));

describe('ThankYouCC Component', () => {
  const mockThankyouData = {
    CCPL: {
      banner_header: 'Thank You Header',
      banner_body_1: 'Banner Body 1',
      banner_body_2: 'Banner Body 2',
      resumeUrl: 'https://example.com/resume',
      title: 'Application Title',
      content: 'Application Content',
      note_title: 'Important Note',
      note_content_1: 'Note content 1',
      note_content_2: 'Note content 2',
      note_content_3: 'Note content 3',
      note_content_4: 'Click here for more info',
      note_link: 'https://example.com/more-info',
      refId_lbl: 'Reference ID:',
      timeLine: [
        { step: 1, title: 'Application Submitted', completed: true },
        { step: 2, title: 'Under Review', completed: false }
      ]
    },
    STPCCBanner: {
      banner_header: 'STP Banner Header',
      banner_body_1: 'Congratulations! Your ',
      banner_body_2: ' application has been approved.'
    },
    CCSTP: [
      { step: 1, title: 'Application Approved', completed: true },
      { step: 2, title: 'Card Processing', completed: false }
    ],
    STPCC: {
      timeLine: 'STP Timeline Title',
      timeline_header: 'What happens next?',
      timeline_desc: 'Your card will be processed shortly.',
      continueButton: 'Continue Application',
      doneButton: 'Done'
    }
  };

  const baseProps = {
    applicationReferenceNo: 'REF123456789',
    showOTPPopup: jest.fn(),
    showContinuePopup: jest.fn(),
    submitForm: jest.fn(),
    thankyou: mockThankyouData
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('Non-STP Flow', () => {
    const nonSTPProps = {
      ...baseProps,
      applicationDetails: {
        isStp: false,
        thankyouProp: 'CCPL',
        thankyouText: 'CCPL',
        productName: ['Credit Card', 'Personal Loan']
      }
    };

    it('should render non-STP layout correctly', () => {
      render(<ThankYouCC {...nonSTPProps} />);

      // Check banner content
      expect(screen.getByTestId('thankyou-banner')).toBeInTheDocument();
      expect(screen.getByTestId('banner-header')).toHaveTextContent('Thank You Header');
      expect(screen.getByTestId('product-name')).toHaveTextContent('Credit Card and Personal Loan');
      expect(screen.getByTestId('banner-body-2')).toHaveTextContent('Banner Body 2');
      expect(screen.getByTestId('resume-url')).toHaveTextContent('https://example.com/resume');

      // Check title and content sections
      expect(screen.getByText('Application Title')).toBeInTheDocument();
      expect(screen.getByText('Application Content')).toBeInTheDocument();

      // Check timeline
      expect(screen.getByTestId('thankyou-timeline')).toBeInTheDocument();
      expect(screen.getByTestId('timeline-completed')).toHaveTextContent('true');

      // Check note sections
      expect(screen.getByText('Important Note')).toBeInTheDocument();
      expect(screen.getByText('Note content 1')).toBeInTheDocument();
      expect(screen.getByText('Note content 2')).toBeInTheDocument();
      expect(screen.getByText('Note content 3')).toBeInTheDocument();
      
      // Check external link
      const externalLink = screen.getByRole('link', { name: 'Click here for more info' });
      expect(externalLink).toHaveAttribute('href', 'https://example.com/more-info');
      expect(externalLink).toHaveAttribute('target', '_blank');
      expect(externalLink).toHaveAttribute('rel', 'feedback noreferrer');

      // Check reference number
      expect(screen.getByText('Reference ID:')).toBeInTheDocument();
      expect(screen.getByText('REF123456789')).toBeInTheDocument();

      // Check done button
      expect(screen.getByRole('button', { name: 'Done' })).toBeInTheDocument();

      // Check survey component
      expect(screen.getByTestId('thankyou-survey')).toBeInTheDocument();
    });

    it('should call submitForm when done button is clicked', () => {
      render(<ThankYouCC {...nonSTPProps} />);
      
      const doneButton = screen.getByRole('button', { name: 'Done' });
      fireEvent.click(doneButton);

      expect(baseProps.submitForm).toHaveBeenCalledTimes(1);
    });

    it('should not render STP-specific content', () => {
      render(<ThankYouCC {...nonSTPProps} />);

      // Should not show STP timeline header/desc
      expect(screen.queryByText('What happens next?')).not.toBeInTheDocument();
      expect(screen.queryByText('Your card will be processed shortly.')).not.toBeInTheDocument();

      // Should not show continue button
      expect(screen.queryByRole('button', { name: 'Continue Application' })).not.toBeInTheDocument();
    });

    it('should call showOTPPopup when timeline link handler is clicked', () => {
      render(<ThankYouCC {...nonSTPProps} />);
      
      const linkHandler = screen.getByTestId('timeline-link-handler');
      fireEvent.click(linkHandler);

      expect(baseProps.showOTPPopup).toHaveBeenCalledTimes(1);
    });
  });

  describe('STP Flow', () => {
    const stpProps = {
      ...baseProps,
      applicationDetails: {
        isStp: true,
        thankyouText: 'STPCC',
        productName: 'Premium Credit Card',
        cardNumber: '****1234'
      }
    };

    it('should render STP layout correctly', () => {
      render(<ThankYouCC {...stpProps} />);

      // Check STP banner content
      expect(screen.getByTestId('banner-header')).toHaveTextContent('STP Banner Header');
      expect(screen.getByTestId('product-name')).toHaveTextContent('Premium Credit Card');

      // Check STP title section
      expect(screen.getByText('Congratulations! Your Premium Credit Card application has been approved.')).toBeInTheDocument();
      expect(screen.getByText('Premium Credit Card')).toBeInTheDocument();
      expect(screen.getByText('****1234')).toBeInTheDocument();

      // Check STP timeline sections
      expect(screen.getByText('What happens next?')).toBeInTheDocument();
      expect(screen.getByText('Your card will be processed shortly.')).toBeInTheDocument();

      // Check continue button
      expect(screen.getByRole('button', { name: 'Continue Application' })).toBeInTheDocument();

      // Check reference number is still displayed
      expect(screen.getByText('REF123456789')).toBeInTheDocument();
    });

    it('should call showContinuePopup when continue button is clicked', () => {
      render(<ThankYouCC {...stpProps} />);
      
      const continueButton = screen.getByRole('button', { name: 'Continue Application' });
      fireEvent.click(continueButton);

      expect(baseProps.showContinuePopup).toHaveBeenCalledTimes(1);
    });

    it('should not render non-STP specific content', () => {
      render(<ThankYouCC {...stpProps} />);

      // Should not show application title/content
      expect(screen.queryByText('Application Title')).not.toBeInTheDocument();
      expect(screen.queryByText('Application Content')).not.to.BeInTheDocument();

      // Should not show note sections
      expect(screen.queryByText('Important Note')).not.toBeInTheDocument();
      expect(screen.queryByText('Note content 1')).not.toBeInTheDocument();

      // Should not show done button
      expect(screen.queryByRole('button', { name: 'Done' })).not.toBeInTheDocument();
    });

    it('should use CCSTP timeline data for STP flow', () => {
      render(<ThankYouCC {...stpProps} />);
      
      const timelineData = screen.getByTestId('timeline-data');
      expect(timelineData).toHaveTextContent(JSON.stringify(mockThankyouData.CCSTP));
    });
  });

  describe('getTimelineData function behavior', () => {
    it('should return CCPL timeline for non-STP', () => {
      const nonSTPProps = {
        ...baseProps,
        applicationDetails: {
          isStp: false,
          thankyouProp: 'CCPL',
          thankyouText: 'CCPL',
          productName: ['Credit Card']
        }
      };

      render(<ThankYouCC {...nonSTPProps} />);
      
      const timelineData = screen.getByTestId('timeline-data');
      expect(timelineData).toHaveTextContent(JSON.stringify(mockThankyouData.CCPL.timeLine));
    });

    it('should return CCSTP timeline for STP', () => {
      const stpProps = {
        ...baseProps,
        applicationDetails: {
          isStp: true,
          thankyouText: 'STPCC'
        }
      };

      render(<ThankYouCC {...stpProps} />);
      
      const timelineData = screen.getByTestId('timeline-data');
      expect(timelineData).toHaveTextContent(JSON.stringify(mockThankyouData.CCSTP));
    });
  });

  describe('Product name handling', () => {
    it('should join multiple product names with "and"', () => {
      const multiProductProps = {
        ...baseProps,
        applicationDetails: {
          isStp: false,
          thankyouProp: 'CCPL',
          thankyouText: 'CCPL',
          productName: ['Credit Card', 'Personal Loan', 'Savings Account']
        }
      };

      render(<ThankYouCC {...multiProductProps} />);
      
      expect(screen.getByTestId('product-name')).toHaveTextContent('Credit Card and Personal Loan and Savings Account');
    });

    it('should handle single product name', () => {
      const singleProductProps = {
        ...baseProps,
        applicationDetails: {
          isStp: false,
          thankyouProp: 'CCPL',
          thankyouText: 'CCPL',
          productName: ['Premium Card']
        }
      };

      render(<ThankYouCC {...singleProductProps} />);
      
      expect(screen.getByTestId('product-name')).toHaveTextContent('Premium Card');
    });
  });

  describe('Edge cases and error handling', () => {
    it('should handle missing thankyou data gracefully', () => {
      const propsWithMissingData = {
        ...baseProps,
        thankyou: {},
        applicationDetails: {
          isStp: false,
          thankyouProp: 'CCPL',
          thankyouText: 'CCPL',
          productName: ['Credit Card']
        }
      };

      expect(() => render(<ThankYouCC {...propsWithMissingData} />)).not.toThrow();
    });

    it('should handle undefined applicationReferenceNo', () => {
      const propsWithoutRefNo = {
        ...baseProps,
        applicationReferenceNo: undefined,
        applicationDetails: {
          isStp: false,
          thankyouProp: 'CCPL',
          thankyouText: 'CCPL',
          productName: ['Credit Card']
        }
      };

      render(<ThankYouCC {...propsWithoutRefNo} />);
      expect(screen.getByText('Reference ID:')).toBeInTheDocument();
    });

    it('should handle missing optional thankyou properties', () => {
      const minimalThankyouData = {
        CCPL: {
          banner_header: 'Header',
          timeLine: []
        }
      };

      const minimalProps = {
        ...baseProps,
        thankyou: minimalThankyouData,
        applicationDetails: {
          isStp: false,
          thankyouProp: 'CCPL',
          thankyouText: 'CCPL',
          productName: ['Credit Card']
        }
      };

      expect(() => render(<ThankYouCC {...minimalProps} />)).not.toThrow();
    });
  });

  describe('CSS classes', () => {
    it('should apply correct CSS classes', () => {
      const props = {
        ...baseProps,
        applicationDetails: {
          isStp: false,
          thankyouProp: 'CCPL',
          thankyouText: 'CCPL',
          productName: ['Credit Card']
        }
      };

      render(<ThankYouCC {...props} />);

      expect(document.querySelector('.thankyou__body__outer')).toBeInTheDocument();
      expect(document.querySelector('.thankyou__body')).toBeInTheDocument();
      expect(document.querySelector('.thankyou__title')).toBeInTheDocument();
      expect(document.querySelector('.thankyou__content')).toBeInTheDocument();
      expect(document.querySelector('.thankyou__note__content')).toBeInTheDocument();
      expect(document.querySelector('.body__app-details')).toBeInTheDocument();
      expect(document.querySelector('.body__refno')).toBeInTheDocument();
      expect(document.querySelector('.thankyou__continue')).toBeInTheDocument();
    });
  });
});
