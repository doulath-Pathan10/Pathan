import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import SliderWithLimit from './SliderWithLimit';
import Slider from '../slider/slider';
import Model from '../model/model';
import { store } from '../../../utils/store/store';
import * as validateService from '../../../services/validation-service';
import trustBankConstant from '../../../assets/_json/trust-bank.json';

// Mock dependencies
jest.mock('../slider/slider', () => jest.fn(({ options, updateSliderValue }) => (
  <div className="mock-slider" onClick={() => updateSliderValue('5000')}>
    Mock Slider
  </div>
)));

jest.mock('../model/model', () => jest.fn(() => <div>Mock Model</div>));

jest.mock('../../../utils/store/store', () => ({
  getState: jest.fn(),
  dispatch: jest.fn()
}));

jest.mock('../../../services/validation-service', () => ({
  formateCurrency: jest.fn((value) => value)
}));

jest.mock('../../../utils/common/change.utils', () => ({
  isFieldUpdate: jest.fn()
}));

describe('SliderWithLimit', () => {
  const mockProps = {
    data: {
      logical_field_name: 'test_slider'
    },
    handleFieldDispatch: jest.fn(),
    handleCallback: jest.fn()
  };

  const mockTrustBankState = {
    trustBank: {
      applicants: {
        minimum_limit_amount_portable_a_1: '1000',
        maximum_limit_amount_portable_a_1: '10000',
        phoenix_customer_limit_a_1: '5000'
      },
      products: [{
        offer_details: [{
          approved_amount: '3000'
        }]
      }]
    }
  };

  beforeEach(() => {
    (store.getState as jest.Mock).mockReturnValue(mockTrustBankState);
    (validateService.formateCurrency as jest.Mock).mockImplementation(val => val);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(<SliderWithLimit {...mockProps} />);
    expect(screen.getByText(trustBankConstant.sliderCreditLimitLabel)).toBeInTheDocument();
  });

  it('initializes with correct values from trustBank state', () => {
    render(<SliderWithLimit {...mockProps} />);
    
    expect(screen.getByText('S$ 1000')).toBeInTheDocument();
    expect(screen.getByText('S$ 10000')).toBeInTheDocument();
    expect(screen.getByText('5000')).toBeInTheDocument();
  });

  it('updates slider value and calls callbacks', () => {
    render(<SliderWithLimit {...mockProps} />);
    
    fireEvent.click(screen.getByText('Mock Slider'));
    
    expect(mockProps.handleFieldDispatch).toHaveBeenCalledWith('test_slider', '5000');
    expect(mockProps.handleCallback).toHaveBeenCalled();
  });

  it('shows model when info icon is clicked', () => {
    render(<SliderWithLimit {...mockProps} />);
    
    fireEvent.click(screen.getByRole('button', { name: '' })); // Clicking the info icon
    expect(screen.getByText('Mock Model')).toBeInTheDocument();
  });

  it('calculates available credit correctly', () => {
    render(<SliderWithLimit {...mockProps} />);
    
    // Initial available credit should be phoenixCustomerLimit (5000) minus 
    // (sliderValue (1000) - offerApprovedAmount (3000)) = 5000 - (1000-3000) = 7000
    expect(screen.getByText('7000')).toBeInTheDocument();
  });

  it('handles case when offerApprovedAmount is 0', () => {
    const modifiedState = {
      ...mockTrustBankState,
      trustBank: {
        ...mockTrustBankState.trustBank,
        products: [{
          offer_details: [{
            approved_amount: '0'
          }]
        }]
      }
    };
    (store.getState as jest.Mock).mockReturnValue(modifiedState);
    
    render(<SliderWithLimit {...mockProps} />);
    
    // Available credit should be phoenixCustomerLimit (5000) minus 
    // (sliderValue (1000) - minValue (1000)) = 5000 - 0 = 5000
    expect(screen.getByText('5000')).toBeInTheDocument();
  });

  it('renders the "Find out more" link correctly', () => {
    render(<SliderWithLimit {...mockProps} />);
    
    const link = screen.getByText(trustBankConstant.findOutMoreLabel);
    expect(link).toBeInTheDocument();
    expect(link).toHaveAttribute('href', process.env.REACT_APP_TRUST_LIMIT_FIND_OUT_MORE);
    expect(link).toHaveAttribute('target', '_blank');
    expect(link).toHaveAttribute('rel', 'noreferrer');
  });

  it('handles missing trustBank data gracefully', () => {
    (store.getState as jest.Mock).mockReturnValue({ trustBank: null });
    
    render(<SliderWithLimit {...mockProps} />);
    
    // Should render with default/empty values
    expect(screen.getByText('S$ 0')).toBeInTheDocument();
    expect(screen.getByText('0')).toBeInTheDocument();
  });
});
