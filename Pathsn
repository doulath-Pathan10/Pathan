import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { BrowserRouter } from 'react-router-dom';
import { configureStore } from '@reduxjs/toolkit';
import ThankYou from './thank-you';
import * as commonService from '../../../services/common-service';
import * as trackEvents from '../../../services/track-events';
import * as gaTrackEvents from '../../../services/ga-track-events';
import * as changeUtils from '../../../utils/common/change.utils';

// Mock external dependencies
jest.mock('../../../services/common-service');
jest.mock('../../../services/track-events');
jest.mock('../../../services/ga-track-events');
jest.mock('../../../utils/common/change.utils');
jest.mock('./thankyou-casa', () => {
  return function MockThankYouCASA() {
    return <div data-testid="thankyou-casa">ThankYou CASA Component</div>;
  };
});
jest.mock('./thankyou-cc', () => {
  return function MockThankYouCC() {
    return <div data-testid="thankyou-cc">ThankYou CC Component</div>;
  };
});
jest.mock('./thankyou-upload', () => {
  return function MockThankYouUpload() {
    return <div data-testid="thankyou-upload">ThankYou Upload Component</div>;
  };
});
jest.mock('./cc-without-activation', () => {
  return function MockCCWithoutActivation() {
    return <div data-testid="cc-without-activation">CC Without Activation</div>;
  };
});
jest.mock('./cc-activation-success', () => {
  return function MockCCActivationSuccess() {
    return <div data-testid="cc-activation-success">CC Activation Success</div>;
  };
});
jest.mock('./thankyou-error', () => {
  return function MockThankyouError() {
    return <div data-testid="thankyou-error">Thankyou Error</div>;
  };
});

// Mock environment variables
process.env.REACT_APP_HOME_PAGE_URL = 'https://example.com/home';
process.env.REACT_APP_IBANKING_SC_MOBILE = 'https://example.com/mobile';
process.env.REACT_APP_IBANKING_SC_MOBILE_TRANSFER = 'https://example.com/transfer';

describe('ThankYou Component', () => {
  let mockStore;
  let mockDispatch;

  // Mock initial state
  const initialState = {
    stages: {
      stages: [{
        stageId: 'thankyou',
        stageInfo: {
          application: {
            application_reference: 'APP123456'
          },
          products: [{
            product_category: 'SA',
            name: 'Savings Account',
            product_sequence_number: 1,
            product_type: 'REGULAR',
            acct_details: [{
              account_number: '1234567890',
              card_no: 'CARD123456'
            }]
          }],
          applicants: {
            embossed_name_a_1: 'John Doe',
            auth_mode_a_1: 'IX'
          }
        }
      }],
      journeyType: 'NTB',
      otpSuccess: false,
      isDocumentUpload: false
    }
  };

  const createMockStore = (customState = {}) => {
    return configureStore({
      reducer: {
        stages: (state = { ...initialState.stages, ...customState }, action) => {
          switch (action.type) {
            default:
              return state;
          }
        }
      }
    });
  };

  const renderWithProviders = (component, customState = {}) => {
    const store = createMockStore(customState);
    mockDispatch = jest.fn().mockResolvedValue({ status: 'SUCCESS' });
    store.dispatch = mockDispatch;
    
    return render(
      <Provider store={store}>
        <BrowserRouter>
          {component}
        </BrowserRouter>
      </Provider>
    );
  };

  beforeEach(() => {
    // Reset mocks
    jest.clearAllMocks();
    
    // Mock getUrl functions
    changeUtils.getUrl = {
      getChannelRefNo: jest.fn().mockReturnValue({ applicationRefNo: 'APP123456' }),
      getParameterByName: jest.fn().mockReturnValue(null),
      getUpdatedStage: jest.fn().mockReturnValue({ ccplChannel: 'WEB' })
    };

    // Mock window.location
    delete window.location;
    window.location = { href: '' };

    // Mock track events
    trackEvents.triggerAdobeEvent = jest.fn();
    gaTrackEvents.pageView = jest.fn();
    
    // Mock common service
    commonService.redirectingToIbanking = jest.fn();
    commonService.activateDigitalCard = jest.fn().mockResolvedValue({ status: 'SUCCESS' });
  });

  describe('Component Rendering', () => {
    test('should render ThankYou component with basic structure', () => {
      renderWithProviders(<ThankYou />);
      
      expect(screen.getByTestId('form')).toBeInTheDocument();
      expect(screen.getByTestId('app thankyou')).toBeInTheDocument();
      expect(screen.getByTestId('app__body')).toBeInTheDocument();
    });

    test('should render ThankYouCASA when SA products are present', () => {
      renderWithProviders(<ThankYou />);
      
      expect(screen.getByTestId('thankyou-casa')).toBeInTheDocument();
    });

    test('should render ThankYouCASA when CA products are present', () => {
      const caState = {
        stages: [{
          ...initialState.stages.stages[0],
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo,
            products: [{
              ...initialState.stages.stages[0].stageInfo.products[0],
              product_category: 'CA'
            }]
          }
        }]
      };

      renderWithProviders(<ThankYou />, caState);
      
      expect(screen.getByTestId('thankyou-casa')).toBeInTheDocument();
    });

    test('should render ThankYouUpload when auth parameter is upload', () => {
      changeUtils.getUrl.getParameterByName = jest.fn().mockReturnValue('upload');
      
      renderWithProviders(<ThankYou />);
      
      expect(screen.getByTestId('thankyou-upload')).toBeInTheDocument();
    });

    test('should render ThankYouUpload when isDocumentUpload is true', () => {
      const uploadState = {
        isDocumentUpload: true
      };

      renderWithProviders(<ThankYou />, uploadState);
      
      expect(screen.getByTestId('thankyou-upload')).toBeInTheDocument();
    });
  });

  describe('Application Details Processing', () => {
    test('should process application details correctly for STP case', () => {
      const stpState = {
        stages: [{
          ...initialState.stages.stages[0],
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo,
            products: [{
              product_category: 'CC',
              name: 'Credit Card',
              product_sequence_number: 1,
              product_type: 'PLATINUM',
              acct_details: [{
                account_number: '1234567890',
                card_no: 'CARD123456'
              }]
            }]
          }
        }]
      };

      renderWithProviders(<ThankYou />, stpState);
      
      // Component should process the application details correctly
      expect(screen.getByTestId('form')).toBeInTheDocument();
    });

    test('should handle multiple products correctly', () => {
      const multiProductState = {
        stages: [{
          ...initialState.stages.stages[0],
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo,
            products: [
              {
                product_category: 'CC',
                name: 'Credit Card',
                product_sequence_number: 1,
                product_type: 'PLATINUM',
                acct_details: [{ account_number: '1234567890', card_no: 'CARD123456' }]
              },
              {
                product_category: 'SA',
                name: 'Savings Account',
                product_sequence_number: 2,
                product_type: 'REGULAR',
                acct_details: [{ account_number: '0987654321' }]
              }
            ]
          }
        }]
      };

      renderWithProviders(<ThankYou />, multiProductState);
      
      expect(screen.getByTestId('thankyou-casa')).toBeInTheDocument();
    });
  });

  describe('Event Tracking', () => {
    test('should trigger Adobe analytics event on component load', () => {
      renderWithProviders(<ThankYou />);
      
      expect(trackEvents.triggerAdobeEvent).toHaveBeenCalledWith('formSubmit');
    });

    test('should trigger GA page view event', () => {
      renderWithProviders(<ThankYou />);
      
      expect(gaTrackEvents.pageView).toHaveBeenCalledWith('thankyou');
    });

    test('should not trigger events when auth is upload', () => {
      changeUtils.getUrl.getParameterByName = jest.fn().mockReturnValue('upload');
      
      renderWithProviders(<ThankYou />);
      
      expect(trackEvents.triggerAdobeEvent).not.toHaveBeenCalled();
      expect(gaTrackEvents.pageView).not.toHaveBeenCalled();
    });
  });

  describe('Form Submission', () => {
    test('should redirect to home page for non-ibanking auth mode', async () => {
      const nonIbankingState = {
        stages: [{
          ...initialState.stages.stages[0],
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo,
            applicants: {
              auth_mode_a_1: 'OTHER'
            }
          }
        }]
      };

      renderWithProviders(<ThankYou />, nonIbankingState);
      
      // Simulate form submission
      const form = screen.getByTestId('form');
      fireEvent.submit(form);
      
      expect(window.location.href).toBe('https://example.com/home');
    });

    test('should call ibanking redirection for IX auth mode', () => {
      renderWithProviders(<ThankYou />);
      
      const form = screen.getByTestId('form');
      fireEvent.submit(form);
      
      expect(commonService.redirectingToIbanking).toHaveBeenCalled();
    });

    test('should redirect to mobile ibanking when source is scm', () => {
      changeUtils.getUrl.getParameterByName = jest.fn().mockImplementation((param) => {
        if (param === 'source') return 'scm';
        return null;
      });

      renderWithProviders(<ThankYou />);
      
      const form = screen.getByTestId('form');
      fireEvent.submit(form);
      
      expect(window.location.href).toBe('https://example.com/mobile');
    });

    test('should redirect to mobile transfer when channel is MBNK', () => {
      changeUtils.getUrl.getParameterByName = jest.fn().mockImplementation((param) => {
        if (param === 'channel') return 'MBNK';
        return null;
      });

      renderWithProviders(<ThankYou />);
      
      const form = screen.getByTestId('form');
      fireEvent.submit(form);
      
      expect(window.location.href).toBe('https://example.com/transfer');
    });
  });

  describe('Card Activation Flow', () => {
    test('should show activation success UI when card activation succeeds', async () => {
      const otpSuccessState = {
        otpSuccess: true
      };

      mockDispatch = jest.fn().mockResolvedValue({ status: 'SUCCESS' });
      
      renderWithProviders(<ThankYou />, otpSuccessState);
      
      await waitFor(() => {
        expect(mockDispatch).toHaveBeenCalled();
      });
    });

    test('should show error UI when card activation fails', async () => {
      const otpSuccessState = {
        otpSuccess: true
      };

      mockDispatch = jest.fn().mockResolvedValue({ status: 'FAILED' });
      
      renderWithProviders(<ThankYou />, otpSuccessState);
      
      await waitFor(() => {
        expect(screen.getByTestId('thankyou-error')).toBeInTheDocument();
      });
    });
  });

  describe('Error Handling', () => {
    test('should handle missing stage selector gracefully', () => {
      const emptyState = {
        stages: []
      };

      expect(() => {
        renderWithProviders(<ThankYou />, emptyState);
      }).not.toThrow();
    });

    test('should handle missing product details gracefully', () => {
      const noProductsState = {
        stages: [{
          stageId: 'thankyou',
          stageInfo: {
            application: { application_reference: 'APP123456' },
            products: []
          }
        }]
      };

      expect(() => {
        renderWithProviders(<ThankYou />, noProductsState);
      }).not.toThrow();
    });

    test('should handle missing applicant details gracefully', () => {
      const noApplicantState = {
        stages: [{
          ...initialState.stages.stages[0],
          stageInfo: {
            ...initialState.stages.stages[0].stageInfo,
            applicants: null
          }
        }]
      };

      expect(() => {
        renderWithProviders(<ThankYou />, noApplicantState);
      }).not.toThrow();
    });
  });

  describe('URL Parameter Handling', () => {
    test('should handle different URL parameters correctly', () => {
      changeUtils.getUrl.getParameterByName = jest.fn().mockImplementation((param) => {
        switch (param) {
          case 'auth': return 'upload';
          case 'source': return 'web';
          case 'channel': return 'WEB';
          default: return null;
        }
      });

      renderWithProviders(<ThankYou />);
      
      expect(screen.getByTestId('thankyou-upload')).toBeInTheDocument();
    });
  });

  describe('Component State Management', () => {
    test('should initialize with correct default state', () => {
      renderWithProviders(<ThankYou />);
      
      // Component should render without errors
      expect(screen.getByTestId('form')).toBeInTheDocument();
    });

    test('should update state correctly when otpSuccess changes', async () => {
      const { rerender } = renderWithProviders(<ThankYou />);
      
      // Update store state to trigger otpSuccess
      const newState = {
        otpSuccess: true
      };
      
      rerender(
        <Provider store={createMockStore(newState)}>
          <BrowserRouter>
            <ThankYou />
          </BrowserRouter>
        </Provider>
      );
      
      await waitFor(() => {
        expect(mockDispatch).toHaveBeenCalled();
      });
    });
  });

  describe('Accessibility', () => {
    test('should have proper test ids for testing', () => {
      renderWithProviders(<ThankYou />);
      
      expect(screen.getByTestId('form')).toBeInTheDocument();
      expect(screen.getByTestId('app thankyou')).toBeInTheDocument();
      expect(screen.getByTestId('app__body')).toBeInTheDocument();
    });
  });
});
