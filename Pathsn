import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import Fields from './Fields';

// Mock the Redux hooks
jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

// Mock react-router-dom
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: jest.fn(),
}));

// Mock other dependencies
jest.mock('../../../services/common-service', () => ({
  isFormUpdate: jest.fn(),
  checkProductDetails: jest.fn(),
  lovRequests: jest.fn(),
  dispatchLoader: jest.fn(),
  submitBasicData: jest.fn(),
  channelReference: jest.fn(),
  creditToTrust: jest.fn(),
  thankYouPage: jest.fn(),
  submitBasicDataMyInfo: jest.fn(),
  submitBasicDataDocument: jest.fn(),
  getOfferData: jest.fn(),
  offerData: jest.fn(),
  defaultError: jest.fn(),
  rateRequest: jest.fn(),
  dedubeUtilData: jest.fn(),
  getClientInfo: jest.fn(),
}));

// Mock other utilities
jest.mock('../../../utils/common/change.utils', () => ({
  authenticateType: jest.fn(),
  FindIndex: jest.fn(),
  smoothScroll: jest.fn(),
  getUrl: {
    getParameterByName: jest.fn(),
    getProductInfo: jest.fn(),
  },
  getTokenChno: jest.fn(),
}));

// Mock services
jest.mock('../../../services/track-events');
jest.mock('../../../services/ga-track-events');

describe('Fields Component', () => {
  let mockDispatch: jest.Mock;
  let mockNavigate: jest.Mock;
  let mockStore: any;

  beforeEach(() => {
    mockDispatch = jest.fn();
    mockNavigate = jest.fn();
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useNavigate as jest.Mock).mockReturnValue(mockNavigate);

    // Mock useSelector implementation
    (useSelector as jest.Mock).mockImplementation((selector) => {
      const mockState = {
        stages: {
          stages: [
            {
              stageId: 'ssf-1',
              stageInfo: {
                products: [{ product_type: '280', product_category: 'CC' }],
                applicants: {
                  no_of_accounts_rwb_a_1: 1,
                  full_name_a_1: 'Test User',
                  residency_status_a_1: 'PR',
                  date_of_birth_a_1: '1990-01-01',
                  work_type_a_1: 'E',
                  country_of_tax_residence_a_1: 'SG',
                  tax_resident_of_other_country_a_1: 'N',
                  nationality_a_1: 'SG',
                  mobile_number_rwb_a_1: '65-12345678',
                  home_phone_number_rwb_a_1: '65-87654321',
                  application_sourcing_a_1: '1',
                  credit_limit_consent_a_1: 'N',
                  debit_card_request_rwb_a_1: 'Y',
                  issuance_type_a_1: 'I',
                  short_name_a_1: 'Test',
                  select_alt_addresses_a_1: 'PER',
                  select_alt_contacts_a_1: '',
                  declare_preferred_contacts_a_1: 'Y',
                  existing_personal_email_co1_a_1: 'test@test.com',
                  existing_office_email_em1_a_1: 'test@office.com',
                  existing_mobile_mo1_a_1: '65-12345678',
                  existing_office_telephone_ot1_a_1: '65-87654321',
                  existing_residential_telephone_rt2_a_1: '65-12344321',
                  yearly_assessable_income_a_1: '50000',
                  year_of_assessment_a_1: '2023',
                },
                application: {
                  channel_reference: 'TEST123',
                },
                fieldmetadata: {
                  data: {
                    stages: [],
                  },
                },
              },
            },
          ],
          currentStage: 'ssf-1',
          lastStageId: null,
          userInput: {
            applicants: {},
            missingFields: null,
          },
          conditionalFields: {
            newFields: {},
          },
          myinfoMissingFields: false,
          myinfoMissingLogicFields: [],
          updatedStageInputs: [],
          journeyType: 'NTC',
          otpTrigger: false,
        },
        fielderror: {
          mandatoryFields: [],
        },
        valueUpdate: {
          value: false,
          backNavigation: {
            lastStageId: null,
            formChange: false,
          },
          otherMyInfo: false,
        },
        lov: {},
        urlParam: {
          resume: false,
        },
        bancaList: {
          bancaDetails: {
            banca_product_applicable_a_1: 'Y',
            eligible_banca_insurances: ['SG-PA'],
            eligible_banca_insurance_informations: [
              {
                insurance_name: 'Personal Accident',
                insurance_code: 'SG-PA',
                insurance_description: 'Personal Accident Insurance',
              },
            ],
          },
        },
        tax: {
          fields: ['tax_id_no_1', 'country_of_tax_residence_1'],
        },
        alias: {
          fields: [],
        },
        error: {},
        postalCode: {
          showPopup: false,
        },
        referralcode: {
          refer: null,
          referId: null,
        },
        documentUploadList: {
          responseDocuments: [],
        },
        ageValidation: {
          isAgeValid: true,
        },
      };
      return selector(mockState);
    });

    mockStore = configureStore({
      reducer: {
        stages: () => ({}),
        fielderror: () => ({}),
        valueUpdate: () => ({}),
        lov: () => ({}),
        urlParam: () => ({}),
        bancaList: () => ({}),
        tax: () => ({}),
        alias: () => ({}),
        error: () => ({}),
        postalCode: () => ({}),
        referralcode: () => ({}),
        documentUploadList: () => ({}),
        ageValidation: () => ({}),
      },
    });

    // Mock sessionStorage
    Storage.prototype.getItem = jest.fn(() => '1');
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );
    expect(screen.getByRole('form')).toBeInTheDocument();
  });

  it('displays stage headers correctly', () => {
    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );
    
    expect(screen.getByText('Personal Details')).toBeInTheDocument();
  });

  it('handles form submission with valid data', async () => {
    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    const form = screen.getByRole('form');
    fireEvent.submit(form);

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalled();
    });
  });

  it('shows age popup when age validation fails', async () => {
    // Mock age validation to fail
    (useSelector as jest.Mock).mockImplementation((selector) => {
      const mockState = {
        stages: {
          stages: [
            {
              stageId: 'ssf-1',
              stageInfo: {
                products: [{ product_type: '280', product_category: 'CC', min_age: 21 }],
                applicants: {
                  date_of_birth_a_1: '2010-01-01', // Underage
                },
              },
            },
          ],
          currentStage: 'ssf-1',
          userInput: {
            applicants: {
              date_of_birth_a_1: '2010-01-01',
            },
          },
        },
        ageValidation: {
          isAgeValid: false,
        },
      };
      return selector(mockState);
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    const form = screen.getByRole('form');
    fireEvent.submit(form);

    await waitFor(() => {
      expect(screen.getByText('You must be at least 21 years old')).toBeInTheDocument();
    });
  });

  it('handles back navigation correctly', () => {
    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    const backButton = screen.getByText('Back');
    fireEvent.click(backButton);

    expect(mockDispatch).toHaveBeenCalled();
  });

  it('renders CPF contribution section when applicable', () => {
    // Mock state to include CPF data
    (useSelector as jest.Mock).mockImplementation((selector) => {
      const mockState = {
        stages: {
          stages: [
            {
              stageId: 'bd-3',
              stageInfo: {
                products: [{ product_type: '280', product_category: 'CC' }],
                applicants: {
                  Cpfcontributions: [
                    { month: 'Jan', amount: '1000' },
                    { month: 'Feb', amount: '1000' },
                  ],
                },
              },
            },
          ],
          currentStage: 'bd-3',
        },
      };
      return selector(mockState);
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    expect(screen.getByText('CPF Contribution History')).toBeInTheDocument();
  });

  it('renders document upload component when stage is "doc"', () => {
    // Mock state to be in doc stage
    (useSelector as jest.Mock).mockImplementation((selector) => {
      const mockState = {
        stages: {
          stages: [
            {
              stageId: 'doc',
            },
          ],
          currentStage: 'doc',
        },
      };
      return selector(mockState);
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    expect(screen.getByTestId('document-upload')).toBeInTheDocument();
  });

  it('renders review page when stage is "rp"', () => {
    // Mock state to be in review stage
    (useSelector as jest.Mock).mockImplementation((selector) => {
      const mockState = {
        stages: {
          stages: [
            {
              stageId: 'rp',
            },
          ],
          currentStage: 'rp',
        },
      };
      return selector(mockState);
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    expect(screen.getByText('Review Your Application')).toBeInTheDocument();
  });

  it('handles referral code popup when referral flag is true', () => {
    // Mock state with referral flag
    (useSelector as jest.Mock).mockImplementation((selector) => {
      const mockState = {
        stages: {
          stages: [
            {
              stageId: 'ssf-1',
            },
          ],
          currentStage: 'ssf-1',
        },
        referralcode: {
          refer: 'true',
          referId: null,
        },
      };
      return selector(mockState);
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    const form = screen.getByRole('form');
    fireEvent.submit(form);

    expect(screen.getByText('Referral Code')).toBeInTheDocument();
  });

  it('displays US popup when FATCA declaration is Y', () => {
    // Mock state with FATCA declaration
    (useSelector as jest.Mock).mockImplementation((selector) => {
      const mockState = {
        stages: {
          stages: [
            {
              stageId: 'ad-2',
              stageInfo: {
                products: [{ product_type: '280', product_category: 'CC' }],
              },
            },
          ],
          currentStage: 'ad-2',
          userInput: {
            applicants: {
              casa_fatca_declaration_1_a_1: 'Y',
            },
          },
        },
      };
      return selector(mockState);
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    const form = screen.getByRole('form');
    fireEvent.submit(form);

    expect(screen.getByText('US Person Declaration')).toBeInTheDocument();
  });

  it('handles myInfo field dispatch correctly', () => {
    // Mock authenticateType to return 'myinfo'
    require('../../../utils/common/change.utils').authenticateType.mockReturnValue('myinfo');

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    const myInfoButton = screen.getByText('See other MyInfo details');
    fireEvent.click(myInfoButton);

    expect(mockDispatch).toHaveBeenCalled();
  });

  it('renders Banca details when applicable', () => {
    // Mock state with banca details
    (useSelector as jest.Mock).mockImplementation((selector) => {
      const mockState = {
        stages: {
          stages: [
            {
              stageId: 'ad-1',
              stageInfo: {
                products: [{ product_type: '280', product_category: 'CC' }],
              },
            },
          ],
          currentStage: 'ad-1',
        },
        bancaList: {
          bancaDetails: {
            banca_product_applicable_a_1: 'Y',
            eligible_banca_insurances: ['SG-PA'],
            eligible_banca_insurance_informations: [
              {
                insurance_name: 'Personal Accident',
                insurance_code: 'SG-PA',
                insurance_description: 'Personal Accident Insurance',
              },
            ],
          },
        },
      };
      return selector(mockState);
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    expect(screen.getByText('Insurance Protection')).toBeInTheDocument();
  });
});
