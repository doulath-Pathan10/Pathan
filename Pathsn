import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import { MemoryRouter } from 'react-router-dom';
import ThankYou from './ThankYou';
import thankyouData from '../../../assets/_json/thankyou.json';
import { StoreModel } from '../../../utils/model/common-model';

// Mock components
jest.mock('./thankyou-casa', () => () => <div>ThankYouCASA Mock</div>);
jest.mock('./thankyou-cc', () => () => <div>ThankYouCC Mock</div>);
jest.mock('./cc-without-activation', () => () => <div>CCWithoutActivation Mock</div>);
jest.mock('./cc-activation-success', () => () => <div>CCActivationSuccess Mock</div>);
jest.mock('./thankyou-error', () => () => <div>ThankyouError Mock</div>);
jest.mock('./thankyou-upload', () => () => <div>ThankYouUpload Mock</div>);
jest.mock('../../../shared/components/popup-model/popup-model', () => ({ children, displayPopup }: any) => 
  displayPopup ? <div>{children}</div> : null);
jest.mock('../../../shared/components/model/model', () => ({ name, handlebuttonClick, handleContinueWithoutActivation }: any) => 
  <div>
    {name} Mock
    <button onClick={handlebuttonClick}>Back Button</button>
    <button onClick={handleContinueWithoutActivation}>Continue Without Activation</button>
  </div>);

// Mock services and utils
jest.mock('../../../services/track-events', () => ({
  triggerAdobeEvent: jest.fn(),
}));

jest.mock('../../../services/ga-track-events', () => ({
  pageView: jest.fn(),
}));

jest.mock('../../../services/common-service', () => ({
  redirectingToIbanking: jest.fn(),
  activateDigitalCard: jest.fn(),
}));

jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getChannelRefNo: jest.fn(),
    getParameterByName: jest.fn(),
    getUpdatedStage: jest.fn(),
  },
}));

jest.mock('../../../utils/store/store', () => ({
  store: {
    getState: jest.fn(() => ({ 
      stages: { 
        isDocumentUpload: false,
        journeyType: 'test',
        otpSuccess: false,
        stages: [] 
      } 
    })),
  },
}));

describe('ThankYou Component', () => {
  const mockStore = configureStore({
    reducer: {
      stages: () => ({ 
        stages: [
          {
            stageId: 'thankyou',
            stageInfo: {
              application: { application_reference: 'APP123' },
              products: [
                { 
                  product_category: 'SA',
                  name: 'Savings Account',
                  product_sequence_number: '1',
                  product_type: 'SAVINGS',
                  acct_details: [{ account_number: '1234567890' }]
                }
              ],
              applicants: {
                auth_mode_a_1: 'IX',
                embossed_name_a_1: 'John Doe'
              }
            }
          }
        ],
        journeyType: 'test',
        otpSuccess: false,
        isDocumentUpload: false
      }),
      urlParam: () => ({}),
    },
  });

  beforeEach(() => {
    jest.clearAllMocks();
    
    // Default mock implementations
    (require('../../../utils/common/change.utils').getUrl.getChannelRefNo as jest.Mock).mockReturnValue({
      applicationRefNo: 'APP123'
    });
    
    (require('../../../utils/common/change.utils').getUrl.getParameterByName as jest.Mock).mockReturnValue(null);
    
    (require('../../../utils/common/change.utils').getUrl.getUpdatedStage as jest.Mock).mockReturnValue({
      ccplChannel: ''
    });
    
    (require('../../../services/common-service').activateDigitalCard as jest.Mock).mockResolvedValue({
      status: 'SUCCESS'
    });
    
    process.env.REACT_APP_HOME_PAGE_URL = 'https://example.com';
    process.env.REACT_APP_IBANKING_SC_MOBILE = 'https://ibank.example.com/mobile';
    process.env.REACT_APP_IBANKING_SC_MOBILE_TRANSFER = 'https://ibank.example.com/mobile/transfer';
  });

  const renderThankYou = (initialEntries = ['/thankyou']) => {
    return render(
      <Provider store={mockStore}>
        <MemoryRouter initialEntries={initialEntries}>
          <ThankYou />
        </MemoryRouter>
      </Provider>
    );
  };

  it('renders without crashing', () => {
    renderThankYou();
    expect(screen.getByTestId('form')).toBeInTheDocument();
  });

  it('displays ThankYouCASA for SA/CA products', async () => {
    renderThankYou();
    await waitFor(() => {
      expect(screen.getByText('ThankYouCASA Mock')).toBeInTheDocument();
    });
  });

  it('displays ThankYouUpload when auth is upload', async () => {
    (require('../../../utils/common/change.utils').getUrl.getParameterByName as jest.Mock).mockReturnValue('upload');
    
    renderThankYou();
    await waitFor(() => {
      expect(screen.getByText('ThankYouUpload Mock')).toBeInTheDocument();
    });
  });

  it('displays ThankYouUpload when isDocumentUpload is true', async () => {
    (require('../../../utils/store/store').store.getState as jest.Mock).mockReturnValue({
      stages: { 
        isDocumentUpload: true,
        stages: mockStore.getState().stages.stages
      }
    });
    
    renderThankYou();
    await waitFor(() => {
      expect(screen.getByText('ThankYouUpload Mock')).toBeInTheDocument();
    });
  });

  it('triggers track events on mount', async () => {
    renderThankYou();
    await waitFor(() => {
      expect(require('../../../services/track-events').triggerAdobeEvent).toHaveBeenCalledWith('formSubmit');
      expect(require('../../../services/ga-track-events').pageView).toHaveBeenCalledWith('thankyou');
    });
  });

  it('does not trigger track events for upload journey', async () => {
    (require('../../../utils/common/change.utils').getUrl.getParameterByName as jest.Mock).mockReturnValue('upload');
    
    renderThankYou();
    await waitFor(() => {
      expect(require('../../../services/track-events').triggerAdobeEvent).not.toHaveBeenCalled();
      expect(require('../../../services/ga-track-events').pageView).not.toHaveBeenCalled();
    });
  });

  it('handles submitForm for IX auth mode', async () => {
    renderThankYou();
    
    const form = screen.getByTestId('form');
    fireEvent.submit(form);
    
    await waitFor(() => {
      expect(require('../../../services/common-service').redirectingToIbanking).toHaveBeenCalled();
    });
  });

  it('handles submitForm for non-IX auth mode', async () => {
    const nonIxStore = configureStore({
      reducer: {
        stages: () => ({ 
          stages: [
            {
              stageId: 'thankyou',
              stageInfo: {
                application: { application_reference: 'APP123' },
                products: [
                  { 
                    product_category: 'SA',
                    name: 'Savings Account',
                    acct_details: [{ account_number: '1234567890' }]
                  }
                ],
                applicants: {
                  auth_mode_a_1: 'OTHER'
                }
              }
            }
          ],
          journeyType: 'test'
        }),
      },
    });
    
    render(
      <Provider store={nonIxStore}>
        <MemoryRouter>
          <ThankYou />
        </MemoryRouter>
      </Provider>
    );
    
    const form = screen.getByTestId('form');
    fireEvent.submit(form);
    
    await waitFor(() => {
      expect(window.location.href).toBe('https://example.com/');
    });
  });

  it('handles goToIBanking for scm source', async () => {
    (require('../../../utils/common/change.utils').getUrl.getParameterByName as jest.Mock).mockImplementation((param: string) => 
      param === 'source' ? 'scm' : null
    );
    
    renderThankYou();
    
    const form = screen.getByTestId('form');
    fireEvent.submit(form);
    
    await waitFor(() => {
      expect(window.location.href).toBe('https://ibank.example.com/mobile');
    });
  });

  it('handles goToIBanking for MBNK channel', async () => {
    (require('../../../utils/common/change.utils').getUrl.getUpdatedStage as jest.Mock).mockReturnValue({
      ccplChannel: 'MBNK'
    });
    
    renderThankYou();
    
    const form = screen.getByTestId('form');
    fireEvent.submit(form);
    
    await waitFor(() => {
      expect(window.location.href).toBe('https://ibank.example.com/mobile/transfer');
    });
  });

  it('shows continue without activation popup', async () => {
    renderThankYou();
    
    // Simulate clicking a button that would show the popup
    fireEvent.click(screen.getByText('Continue Without Activation'));
    
    await waitFor(() => {
      expect(screen.getByText('CCThankYou Mock')).toBeInTheDocument();
    });
  });

  it('handles continue without activation', async () => {
    renderThankYou();
    
    // Simulate clicking continue without activation
    fireEvent.click(screen.getByText('Continue Without Activation'));
    fireEvent.click(screen.getByText('Back Button'));
    
    await waitFor(() => {
      expect(screen.queryByText('CCThankYou Mock')).not.toBeInTheDocument();
    });
  });

  it('handles card activation success', async () => {
    const otpStore = configureStore({
      reducer: {
        stages: () => ({ 
          stages: mockStore.getState().stages.stages,
          otpSuccess: true
        }),
      },
    });
    
    render(
      <Provider store={otpStore}>
        <MemoryRouter>
          <ThankYou />
        </MemoryRouter>
      </Provider>
    );
    
    await waitFor(() => {
      expect(require('../../../services/common-service').activateDigitalCard).toHaveBeenCalled();
    });
  });

  it('shows error UI when card activation fails', async () => {
    (require('../../../services/common-service').activateDigitalCard as jest.Mock).mockResolvedValue({
      status: 'FAILURE'
    });
    
    const otpStore = configureStore({
      reducer: {
        stages: () => ({ 
          stages: mockStore.getState().stages.stages,
          otpSuccess: true
        }),
      },
    });
    
    render(
      <Provider store={otpStore}>
        <MemoryRouter>
          <ThankYou />
        </MemoryRouter>
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByText('ThankyouError Mock')).toBeInTheDocument();
    });
  });

  it('handles CC products with STP data', async () => {
    const ccStore = configureStore({
      reducer: {
        stages: () => ({ 
          stages: [
            {
              stageId: 'thankyou',
              stageInfo: {
                application: { application_reference: 'APP123' },
                products: [
                  { 
                    product_category: 'CC',
                    name: 'Credit Card',
                    product_sequence_number: '1',
                    product_type: 'CREDIT',
                    acct_details: [{ card_no: '1234567890123456' }]
                  }
                ],
                applicants: {
                  auth_mode_a_1: 'IX',
                  embossed_name_a_1: 'John Doe'
                }
              }
            }
          ],
          journeyType: 'test'
        }),
      },
    });
    
    render(
      <Provider store={ccStore}>
        <MemoryRouter>
          <ThankYou />
        </MemoryRouter>
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByText('ThankYouCASA Mock')).toBeInTheDocument();
    });
  });

  it('handles empty stage selector', async () => {
    const emptyStore = configureStore({
      reducer: {
        stages: () => ({ stages: [] }),
      },
    });
    
    render(
      <Provider store={emptyStore}>
        <MemoryRouter>
          <ThankYou />
        </MemoryRouter>
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByTestId('form')).toBeInTheDocument();
    });
  });
});
