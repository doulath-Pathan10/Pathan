import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import ButtonGroup from './ButtonGroup';
import LoanDetailsInfo from './LoanDetailsInfo';
import { loanTopUpAction } from '../../../utils/store/loan-topup-slice';

// Mock the LoanDetailsInfo component
jest.mock('./LoanDetailsInfo', () => () => <div data-testid="loan-details-info">LoanDetailsInfo</div>);

// Mock the Redux store
const mockStore = configureStore([]);

describe('ButtonGroup Component', () => {
  const mockProps = {
    data: {
      logical_field_name: 'loan_tenor',
      rwb_label_name: 'Loan Tenure',
    },
    handleCallback: jest.fn(),
    handleFieldDispatch: jest.fn(),
  };

  const initialState = {
    stages: {
      userInput: {
        applicants: {
          loan_tenor_a_1: '',
          required_annual_income_a_1: '',
          required_loan_amount_a_1: '',
        },
      },
      updatedStageInputs: [],
      stages: [
        {
          stageId: 'ad-1',
          stageInfo: {
            products: [
              { product_type: '280', product_category: 'PL' },
              { product_type: '210', product_category: 'CC' }
            ],
            applicants: {
              annual_income_a_1: '',
              required_annual_income_a_1: '',
              staff_category_a_1: 'N',
            },
          },
        },
      ],
      lastStageId: '',
      journeyType: 'ETC',
    },
    loanTopUp: {
      outstandingAmount: '',
      existingLoanTopUp: false,
      newLoanTopUp: false,
      topupAmount: '',
      interestRate: '',
    },
    rate: {
      ar: '5',
      eir: '6',
      updatedInterestRates: [],
    },
  };

  let store;

  beforeEach(() => {
    store = mockStore(initialState);
    store.dispatch = jest.fn();
  });

  it('renders without crashing', () => {
    render(
      <Provider store={store}>
        <ButtonGroup {...mockProps} />
      </Provider>
    );
    
    expect(screen.getByText('Loan Tenure')).toBeInTheDocument();
  });

  it('displays tenure buttons based on product type 280', () => {
    render(
      <Provider store={store}>
        <ButtonGroup {...mockProps} />
      </Provider>
    );
    
    const buttons = screen.getAllByRole('button');
    expect(buttons.length).toBeGreaterThan(0);
  });

  it('calls updateTenureValue when a button is clicked', () => {
    render(
      <Provider store={store}>
        <ButtonGroup {...mockProps} />
      </Provider>
    );
    
    const firstButton = screen.getAllByRole('button')[0];
    fireEvent.click(firstButton);
    
    expect(store.dispatch).toHaveBeenCalled();
    expect(mockProps.handleCallback).toHaveBeenCalled();
  });

  it('displays active class on selected button', () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        userInput: {
          applicants: {
            loan_tenor_a_1: '12',
            required_annual_income_a_1: '',
            required_loan_amount_a_1: '',
          },
        },
      },
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <ButtonGroup {...mockProps} />
      </Provider>
    );
    
    const activeButton = screen.getByText('12 months');
    expect(activeButton).toHaveClass('active');
  });

  it('displays topup banner when existingCashone is true and existingLoanTopUp is true', () => {
    const customState = {
      ...initialState,
      loanTopUp: {
        outstandingAmount: '1000',
        existingLoanTopUp: true,
        newLoanTopUp: false,
        topupAmount: '',
      },
      stages: {
        ...initialState.stages,
        userInput: {
          applicants: {
            loan_tenor_a_1: '',
            required_annual_income_a_1: '',
            required_loan_amount_a_1: '2000',
          },
        },
      },
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <ButtonGroup {...mockProps} />
      </Provider>
    );
    
    expect(screen.getByText('Final Loan Amount')).toBeInTheDocument();
    expect(screen.getByText('SGD 3,000.00')).toBeInTheDocument();
  });

  it('renders LoanDetailsInfo when logical_field_name is loan_tenor', () => {
    render(
      <Provider store={store}>
        <ButtonGroup {...mockProps} />
      </Provider>
    );
    
    expect(screen.getByTestId('loan-details-info')).toBeInTheDocument();
  });

  it('sets default tenure when annual income changes', () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        userInput: {
          applicants: {
            loan_tenor_a_1: '',
            required_annual_income_a_1: '50000',
            required_loan_amount_a_1: '',
          },
        },
      },
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <ButtonGroup {...mockProps} />
      </Provider>
    );
    
    expect(store.dispatch).toHaveBeenCalled();
    expect(mockProps.handleCallback).toHaveBeenCalled();
  });
});
