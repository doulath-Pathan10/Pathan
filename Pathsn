import React from 'react';
import { render, screen, fireEvent, waitFor, act } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import OnboardingBeforeStart from '../onboarding-before-start';
import * as preApprovalServices from '../../services/preApprovalServices';
import * as commonService from '../../../../services/common-service';
import * as changeUtils from '../../../../utils/common/change.utils';
import { CONSTANTS } from '../../../../utils/common/constants';

// Mock all external dependencies
jest.mock('../../../../shared/components/pdf/pdf', () => {
  return function MockPdf({ fileName }) {
    return <div data-testid="pdf-component">PDF: {fileName}</div>;
  };
});

jest.mock('../../../../shared/components/spinner/spinner', () => {
  return function MockSpinner() {
    return <div data-testid="spinner">Loading...</div>;
  };
});

jest.mock('../../services/preApprovalServices');
jest.mock('../../../../services/common-service');
jest.mock('../../../../utils/common/change.utils');

// Mock PDF imports
jest.mock('../../../../assets/pdf-file/PIL/hk-personal-loan-terms-pil-aug09.pdf', () => 'mock-pil-pdf-1');
jest.mock('../../../../assets/pdf-file/PIL/hk-gn175.pdf', () => 'mock-pil-pdf-2');
jest.mock('../../../../assets/pdf-file/PIL/hk-loans-personal-instalment-loan-eng.pdf', () => 'mock-pil-pdf-3');
jest.mock('../../../../assets/pdf-file/CC/hk-gn175.pdf', () => 'mock-cc-pdf-1');
jest.mock('../../../../assets/pdf-file/CC/hk-gn177.pdf', () => 'mock-cc-pdf-2');
jest.mock('../../../../assets/pdf-file/CC/hk-cc-tncs-downloadnow.pdf', () => 'mock-cc-pdf-3');
jest.mock('../../../../assets/pdf-file/CC/e-statement-en.pdf', () => 'mock-cc-pdf-4');
jest.mock('../../../../assets/pdf-file/CC/hk-rewards-tncs-en.pdf', () => 'mock-cc-pdf-5');
jest.mock('../../../../assets/pdf-file/CC/hk-tnc-credit-card-instalment-plan-en.pdf', () => 'mock-cc-pdf-6');

// Mock environment variables
process.env.REACT_APP_KFS_DOC_URL = 'https://test-kfs-url.com';
process.env.REACT_APP_KFS_DOC_URL_Chinees = 'https://test-kfs-url-chinese.com';

describe('OnboardingBeforeStart Component', () => {
  let store;
  let mockProps;
  let mockGetData;
  let mockGetPDFData;
  let mockDispatchLoader;
  let mockGetUrl;

  const mockStageData = {
    stages: [{
      stageInfo: {
        products: [{
          campaign: 'HKPIL23PLSTP10',
          product_type: '1313'
        }]
      }
    }]
  };

  const mockFormConfigData = {
    products: [{
      campaign: 'HKPIL23PLSTP10'
    }]
  };

  const mockApiResponse = {
    data: {
      products: {
        'HKPIL23PLSTP10': [{
          pdfURL: 'https://pt.sc.com/test-pdf.pdf'
        }]
      },
      productsMob: {
        'HKPIL23PLSTP10': [{
          pdfURL: 'https://pt.sc.com/test-pdf-mobile.pdf'
        }]
      },
      CampaignTnC: {
        'HKPIL23PLSTP10': [{
          pdfURL: 'https://pt.sc.com/test-tnc.pdf'
        }]
      },
      CampaignTnCMob: {
        'HKPIL23PLSTP10': [{
          pdfURL: 'https://pt.sc.com/test-tnc-mobile.pdf'
        }]
      },
      tncLinkCampaignCode: {
        'HKPIL23PLSTP10': [{
          pdfLinks: [
            { Title: 'II. Personal Loan Terms', url: 'https://test-url-1.com' },
            { Title: 'III. Client Terms', url: 'https://test-url-2.com' },
            { Title: 'Welcome Offers', url: 'https://test-url-3.com' }
          ]
        }]
      }
    }
  };

  beforeEach(() => {
    // Reset all mocks
    jest.clearAllMocks();
    
    // Create mock store
    store = configureStore({
      reducer: {
        stages: (state = { stages: mockStageData.stages }, action) => state,
        preApproval: (state = { formConfigmetaData: mockFormConfigData }, action) => {
          switch (action.type) {
            case 'preApproval/setKfsDocumentPdf':
            case 'preApproval/setTandCDocumentPdf':
            case 'preApproval/setDownloadPDFData':
              return state;
            default:
              return state;
          }
        }
      }
    });

    // Setup default props
    mockProps = {
      isVisible: true,
      onScrollEnd: jest.fn(),
      stageID: 0,
      nextPage: jest.fn()
    };

    // Setup service mocks
    mockGetData = jest.spyOn(preApprovalServices, 'getData');
    mockGetPDFData = jest.spyOn(preApprovalServices, 'getPDFData');
    mockDispatchLoader = jest.spyOn(commonService, 'dispatchLoader');
    mockGetUrl = changeUtils.getUrl;

    // Setup default mock implementations
    mockGetData.mockResolvedValue(mockApiResponse);
    mockGetPDFData.mockResolvedValue('mock-pdf-blob-data');
    mockDispatchLoader.mockReturnValue({ type: 'DISPATCH_LOADER' });
    
    mockGetUrl.getParameterByName = jest.fn().mockReturnValue('premium123');
    mockGetUrl.getLanguageInfo = jest.fn().mockReturnValue('en');

    // Mock DOM methods
    global.URL = jest.fn().mockImplementation((url) => ({
      pathname: '/test-pdf.pdf'
    }));

    // Mock window location
    Object.defineProperty(window, 'location', {
      value: {
        host: 'localhost:3000'
      },
      writable: true
    });

    // Mock history
    Object.defineProperty(window, 'history', {
      value: {
        replaceState: jest.fn()
      },
      writable: true
    });

    // Mock navigator
    Object.defineProperty(navigator, 'userAgent', {
      value: 'Mozilla/5.0 (Windows NT 10.0) Chrome/91.0',
      writable: true
    });

    // Mock document methods
    const mockLink = {
      href: '',
      download: '',
      click: jest.fn()
    };
    document.createElement = jest.fn().mockReturnValue(mockLink);
    document.body.appendChild = jest.fn();
    document.body.removeChild = jest.fn();
  });

  describe('Component Rendering', () => {
    test('should render spinner initially', async () => {
      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...mockProps} />
        </Provider>
      );

      expect(screen.getByTestId('spinner')).toBeInTheDocument();
    });

    test('should render PDF component after loading for stageID 0', async () => {
      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...mockProps} />
        </Provider>
      );

      await waitFor(() => {
        expect(screen.queryByTestId('spinner')).not.toBeInTheDocument();
      });

      expect(screen.getByTestId('pdf-component')).toBeInTheDocument();
      expect(screen.getByText(/PDF: http:\/\/localhost:3000/)).toBeInTheDocument();
    });

    test('should render download button', async () => {
      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...mockProps} />
        </Provider>
      );

      await waitFor(() => {
        expect(screen.queryByTestId('spinner')).not.toBeInTheDocument();
      });

      expect(screen.getByText(CONSTANTS.DownloadBtn)).toBeInTheDocument();
    });

    test('should render PDF links table for stageID 1', async () => {
      const propsStage1 = { ...mockProps, stageID: 1 };
      
      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...propsStage1} />
        </Provider>
      );

      await waitFor(() => {
        expect(screen.queryByTestId('spinner')).not.toBeInTheDocument();
      });

      expect(screen.getByText('II. Personal Loan Terms')).toBeInTheDocument();
      expect(screen.getByText('III. Client Terms')).toBeInTheDocument();
      expect(screen.getByText('Welcome Offers')).toBeInTheDocument();
    });
  });

  describe('Language Support', () => {
    test('should display Chinese content when language is zh', async () => {
      mockGetUrl.getLanguageInfo.mockReturnValue('zh');

      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...mockProps} />
        </Provider>
      );

      await waitFor(() => {
        expect(mockGetData).toHaveBeenCalledWith('https://test-kfs-url-chinese.com');
      });
    });

    test('should display English content by default', async () => {
      mockGetUrl.getLanguageInfo.mockReturnValue('en');

      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...mockProps} />
        </Provider>
      );

      await waitFor(() => {
        expect(mockGetData).toHaveBeenCalledWith('https://test-kfs-url.com');
      });
    });
  });

  describe('PDF Download Functionality', () => {
    test('should download PDF when download button is clicked', async () => {
      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...mockProps} />
        </Provider>
      );

      await waitFor(() => {
        expect(screen.queryByTestId('spinner')).not.toBeInTheDocument();
      });

      const downloadButton = screen.getByText(CONSTANTS.DownloadBtn);
      fireEvent.click(downloadButton);

      expect(document.createElement).toHaveBeenCalledWith('a');
    });

    test('should handle Safari browser download', async () => {
      Object.defineProperty(navigator, 'userAgent', {
        value: 'Safari/537.36',
        writable: true
      });

      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...mockProps} />
        </Provider>
      );

      await waitFor(() => {
        expect(screen.queryByTestId('spinner')).not.toBeInTheDocument();
      });

      const downloadButton = screen.getByText(CONSTANTS.DownloadBtn);
      fireEvent.click(downloadButton);

      expect(document.createElement).toHaveBeenCalledWith('a');
    });
  });

  describe('Mobile Device Detection', () => {
    test('should use mobile PDF URLs for mobile devices', async () => {
      Object.defineProperty(navigator, 'userAgent', {
        value: 'iPhone',
        writable: true
      });

      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...mockProps} />
        </Provider>
      );

      await waitFor(() => {
        expect(mockGetPDFData).toHaveBeenCalledWith(
          expect.stringContaining('localhost:3000')
        );
      });
    });

    test('should apply correct CSS class for iPhone Safari', () => {
      Object.defineProperty(navigator, 'userAgent', {
        value: 'iPhone Safari Version/14.0',
        writable: true
      });

      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...mockProps} />
        </Provider>
      );

      // Component should render without errors
      expect(screen.getByTestId('spinner')).toBeInTheDocument();
    });

    test('should apply correct CSS class for Android', () => {
      Object.defineProperty(navigator, 'userAgent', {
        value: 'Android',
        writable: true
      });

      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...mockProps} />
        </Provider>
      );

      // Component should render without errors
      expect(screen.getByTestId('spinner')).toBeInTheDocument();
    });
  });

  describe('Campaign-specific PDF Downloads', () => {
    test('should download correct PIL PDF for Personal Loan Terms', async () => {
      const propsStage1 = { ...mockProps, stageID: 1 };
      
      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...propsStage1} />
        </Provider>
      );

      await waitFor(() => {
        expect(screen.queryByTestId('spinner')).not.toBeInTheDocument();
      });

      const downloadSpan = screen.getAllByText(CONSTANTS.DownloadBtn)[1]; // First one in table
      fireEvent.click(downloadSpan);

      expect(document.createElement).toHaveBeenCalledWith('a');
    });

    test('should handle credit card campaigns', async () => {
      // Update store with CC campaign
      const ccStore = configureStore({
        reducer: {
          stages: (state = { 
            stages: [{
              stageInfo: {
                products: [{
                  campaign: 'HKSOG20VAWV000',
                  product_type: '1313'
                }]
              }
            }]
          }, action) => state,
          preApproval: (state = { 
            formConfigmetaData: {
              products: [{
                campaign: 'HKSOG20VAWV000'
              }]
            }
          }, action) => state
        }
      });

      const ccApiResponse = {
        ...mockApiResponse,
        data: {
          ...mockApiResponse.data,
          tncLinkCampaignCode: {
            'HKSOG20VAWV000': [{
              pdfLinks: [
                { Title: 'III. Client Terms', url: 'https://test-url-1.com' },
                { Title: 'III. Credit Card Terms', url: 'https://test-url-2.com' }
              ]
            }]
          }
        }
      };

      mockGetData.mockResolvedValue(ccApiResponse);

      const propsStage1 = { ...mockProps, stageID: 1 };
      
      render(
        <Provider store={ccStore}>
          <OnboardingBeforeStart {...propsStage1} />
        </Provider>
      );

      await waitFor(() => {
        expect(screen.queryByTestId('spinner')).not.toBeInTheDocument();
      });

      expect(screen.getByText('III. Client Terms')).toBeInTheDocument();
    });
  });

  describe('Scroll Functionality', () => {
    test('should handle scroll to bottom', async () => {
      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...mockProps} />
        </Provider>
      );

      await waitFor(() => {
        expect(screen.queryByTestId('spinner')).not.toBeInTheDocument();
      });

      // Mock scroll properties
      const pdfElement = screen.getByTestId('pdf-component').closest('div');
      Object.defineProperty(pdfElement, 'scrollTop', { value: 800, writable: true });
      Object.defineProperty(pdfElement, 'scrollHeight', { value: 1000, writable: true });
      Object.defineProperty(pdfElement, 'clientHeight', { value: 200, writable: true });

      // Trigger scroll event
      fireEvent.scroll(pdfElement);

      expect(mockProps.onScrollEnd).toHaveBeenCalled();
    });

    test('should handle footer button scroll', async () => {
      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...mockProps} />
        </Provider>
      );

      await waitFor(() => {
        expect(screen.queryByTestId('spinner')).not.toBeInTheDocument();
      });

      const scrollButton = screen.getByRole('contentinfo');
      fireEvent.click(scrollButton);

      // Should not throw error
      expect(scrollButton).toBeInTheDocument();
    });
  });

  describe('Error Handling', () => {
    test('should handle API error gracefully', async () => {
      mockGetData.mockRejectedValue(new Error('API Error'));

      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...mockProps} />
        </Provider>
      );

      // Should still render spinner initially
      expect(screen.getByTestId('spinner')).toBeInTheDocument();
    });

    test('should handle PDF data fetch error', async () => {
      mockGetPDFData.mockRejectedValue(new Error('PDF Error'));

      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...mockProps} />
        </Provider>
      );

      expect(screen.getByTestId('spinner')).toBeInTheDocument();
    });
  });

  describe('Button Interactions', () => {
    test('should call nextPage when accept button is clicked', async () => {
      const props = { ...mockProps, isVisible: false };
      
      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...props} />
        </Provider>
      );

      await waitFor(() => {
        expect(screen.queryByTestId('spinner')).not.toBeInTheDocument();
      });

      const acceptButton = screen.getByText(CONSTANTS.acceptButton);
      fireEvent.click(acceptButton);

      expect(mockProps.nextPage).toHaveBeenCalled();
    });
  });

  describe('Environment Handling', () => {
    test('should handle non-localhost environment', async () => {
      Object.defineProperty(window, 'location', {
        value: {
          host: 'production.com'
        },
        writable: true
      });

      render(
        <Provider store={store}>
          <OnboardingBeforeStart {...mockProps} />
        </Provider>
      );

      await waitFor(() => {
        expect(mockGetPDFData).toHaveBeenCalledWith('https://pt.sc.com/test-pdf.pdf');
      });
    });
  });

  describe('Premium Code Handling', () => {
    test('should append premium code for specific campaigns', async () => {
      mockGetUrl.getParameterByName.mockReturnValue('001');
      
      // Update store with premium campaign
      const premiumStore = configureStore({
        reducer: {
          stages: (state = { 
            stages: [{
              stageInfo: {
                products: [{
                  campaign: 'HKSOG20VAWV000',
                  product_type: '1313'
                }]
              }
            }]
          }, action) => state,
          preApproval: (state = { 
            formConfigmetaData: {
              products: [{
                campaign: 'HKSOG20VAWV000'
              }]
            }
          }, action) => state
        }
      });

      const propsStage1 = { ...mockProps, stageID: 1 };
      
      render(
        <Provider store={premiumStore}>
          <OnboardingBeforeStart {...propsStage1} />
        </Provider>
      );

      await waitFor(() => {
        expect(mockGetData).toHaveBeenCalled();
      });
    });
  });
});

// Additional integration tests
describe('OnboardingBeforeStart Integration Tests', () => {
  test('should complete full flow for stageID 0', async () => {
    const store = configureStore({
      reducer: {
        stages: (state = { stages: mockStageData.stages }, action) => state,
        preApproval: (state = { formConfigmetaData: mockFormConfigData }, action) => state
      }
    });

    const mockProps = {
      isVisible: true,
      onScrollEnd: jest.fn(),
      stageID: 0,
      nextPage: jest.fn()
    };

    mockGetData.mockResolvedValue(mockApiResponse);
    mockGetPDFData.mockResolvedValue('mock-pdf-data');

    render(
      <Provider store={store}>
        <OnboardingBeforeStart {...mockProps} />
      </Provider>
    );

    // Initial state
    expect(screen.getByTestId('spinner')).toBeInTheDocument();

    // Wait for loading to complete
    await waitFor(() => {
      expect(screen.queryByTestId('spinner')).not.toBeInTheDocument();
    }, { timeout: 3000 });

    // Verify final state
    expect(screen.getByTestId('pdf-component')).toBeInTheDocument();
    expect(screen.getByText(CONSTANTS.DownloadBtn)).toBeInTheDocument();
    expect(mockProps.onScrollEnd).toHaveBeenCalledWith(true);
  });
});
