import Rules_bd_3 from './Rules_bd_3';
import rulesUtils from './rules.utils';
import { getUrl } from '../../utils/common/change.utils';

// Mock dependencies
jest.mock('./rules.utils', () => jest.fn(() => ({})));
jest.mock('../../utils/common/change.utils', () => ({
  getUrl: {
    getJourneyType: jest.fn(),
    getParameterByName: jest.fn()
  }
}));

describe('Rules_bd_3', () => {
  const baseProps = [
    [
      {
        field_set_name: 'Employment Details',
        fields: [{ logical_field_name: 'employment_field' }]
      },
      {
        field_set_name: 'Office Address (Optional)',
        fields: [{ logical_field_name: 'office_address_field' }]
      },
      {
        field_set_name: 'Existing Contact Details',
        fields: [{ logical_field_name: 'existing_contact_field' }]
      },
      {
        field_set_name: 'Additional Contact Details',
        fields: [{ logical_field_name: 'additional_contact_field' }]
      },
      {
        field_set_name: 'Prefered Contact For Each Clasification',
        fields: [{ logical_field_name: 'preferred_contact_field' }]
      },
      {
        field_set_name: 'Select Primary Contact under Mobile Phone',
        fields: [{ logical_field_name: 'mobile_primary_field' }]
      },
      {
        field_set_name: 'Select Primary Contact under email',
        fields: [{ logical_field_name: 'email_primary_field' }]
      },
      {
        field_set_name: 'Select Primary Contact under Residential Telephone No.',
        fields: [{ logical_field_name: 'residential_primary_field' }]
      },
      {
        field_set_name: 'Select Primary Contact under Office No.',
        fields: [{ logical_field_name: 'office_primary_field' }]
      },
      {
        field_set_name: 'For Internal Use',
        fields: [{ logical_field_name: 'internal_use_field' }]
      },
      {
        field_set_name: 'Original Sighted',
        fields: [{ logical_field_name: 'original_sighted_field' }]
      },
      {
        field_set_name: 'Credit Card Details',
        fields: [{ logical_field_name: 'credit_card_field' }]
      }
    ]
  ];

  const createStageInfo = (overrides = {}) => ({
    products: [
      { product_category: 'CA' } // Default to Current Account
    ],
    application: {
      journey_type: ''
    },
    ...overrides
  });

  beforeEach(() => {
    jest.clearAllMocks();
    (getUrl.getJourneyType as jest.Mock).mockReturnValue('');
  });

  describe('Field Grouping Logic', () => {
    it('should group all standard fields', () => {
      const result = Rules_bd_3(baseProps, createStageInfo());
      
      const [filteredFields] = (rulesUtils as jest.Mock).mock.calls[0];
      expect(filteredFields[0].length).toBe(8); // All standard fields except journey-specific ones
    });

    it('should include NTC-specific fields for CA products', () => {
      (getUrl.getJourneyType as jest.Mock).mockReturnValue('NTC');
      const stageInfo = createStageInfo({
        products: [{ product_category: 'CA' }]
      });

      const result = Rules_bd_3(baseProps, stageInfo);
      const [filteredFields] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(filteredFields[0].some((f: any) => 
        f.field_set_name === 'Select Primary Contact under Residential Telephone No.'
      )).toBe(true);
    });

    it('should unshift Credit Card Details for ECC journey', () => {
      (getUrl.getJourneyType as jest.Mock).mockReturnValue('ECC');
      const result = Rules_bd_3(baseProps, createStageInfo());
      
      const [filteredFields] = (rulesUtils as jest.Mock).mock.calls[0];
      expect(filteredFields[0][0].field_set_name).toBe('Credit Card Details');
    });
  });

  describe('Default Visibility Rules', () => {
    it('should set correct default visibility for contact fields', () => {
      const result = Rules_bd_3(baseProps, createStageInfo());
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.modifyVisibility[0]).toEqual(
        expect.arrayContaining([
          'existing_personal_email_co1',
          'existing_office_email_em1',
          'per_email_2',
          'office_email_1'
        ])
      );
    });

    it('should set correct default visibility for internal use fields', () => {
      const result = Rules_bd_3(baseProps, createStageInfo());
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.modifyVisibility[0]).toEqual(
        expect.arrayContaining([
          'sourcing_id_2',
          'sales_id_2'
        ])
      );
    });
  });

  describe('Product Category Specific Rules', () => {
    it('should hide specific fields for SA products', () => {
      const stageInfo = createStageInfo({
        products: [{ product_category: 'SA' }]
      });
      const result = Rules_bd_3(baseProps, stageInfo);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.hidden[0]).toEqual(
        expect.arrayContaining([
          'credit_limit_consent',
          'myinfo_data_cli',
          'ofc_postal_other_code'
        ])
      );
    });

    it('should set assessment fields for PL/CC products with NTC journey', () => {
      (getUrl.getJourneyType as jest.Mock).mockReturnValue('NTC');
      const stageInfo = createStageInfo({
        products: [{ product_category: 'PL' }],
        application: { journey_type: 'NTC' }
      });

      const result = Rules_bd_3(baseProps, stageInfo);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.modifyVisibility[0]).toEqual(
        expect.arrayContaining([
          'year_of_assessment_fff_1',
          'annual_income_fff_1'
        ])
      );
      expect(validationObj.nonEditable[0]).toEqual(
        expect.arrayContaining([
          'annual_income_fff_1',
          'residential_address'
        ])
      );
    });

    it('should set assessment fields for PL/CC products without NTC journey', () => {
      const stageInfo = createStageInfo({
        products: [{ product_category: 'CC' }]
      });

      const result = Rules_bd_3(baseProps, stageInfo);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.modifyVisibility[0]).toEqual(
        expect.arrayContaining([
          'year_of_assessment_fff_2',
          'annual_income_fff_2'
        ])
      );
    });
  });

  describe('Common Hidden Fields', () => {
    it('should always hide office address fields', () => {
      const result = Rules_bd_3(baseProps, createStageInfo());
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.hidden[0]).toEqual(
        expect.arrayContaining([
          'ofc_postal_other_code',
          'ofc_city',
          'ofc_state'
        ])
      );
    });
  });

  describe('Edge Cases', () => {
    it('should handle empty props', () => {
      const result = Rules_bd_3([], createStageInfo());
      expect(result).toBeDefined();
    });

    it('should handle missing field sets', () => {
      const modifiedProps = [[{ fields: [] }]];
      const result = Rules_bd_3(modifiedProps, createStageInfo());
      expect(result).toBeDefined();
    });

    it('should handle empty products array', () => {
      const stageInfo = createStageInfo({ products: [] });
      const result = Rules_bd_3(baseProps, stageInfo);
      expect(result).toBeDefined();
    });

    it('should handle missing Original Sighted field set', () => {
      const modifiedProps = [baseProps[0].filter(f => f.field_set_name !== 'Original Sighted')];
      const result = Rules_bd_3(modifiedProps, createStageInfo());
      expect(result).toBeDefined();
    });
  });
});
