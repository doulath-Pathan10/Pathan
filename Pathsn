import { getFields } from './your-file-path';
import { fieldErrorAction, stagesAction } from '../../../utils/store';
import { AppDispatch } from '../../../services/common-service';

// Simple mocks
jest.mock('../../../utils/store/field-error-slice');
jest.mock('../../../utils/store/stages-slice');
jest.mock('../../../services/common-service', () => ({
  getProductCategory: jest.fn(),
  getUrl: {
    getUserInputs: jest.fn(() => ({})),
    getJourneyType: jest.fn(() => '')
  }
}));
jest.mock('../../../utils/common/change.utils', () => ({
  authenticateType: jest.fn(() => 'manual'),
  FindIndex: jest.fn(() => 0),
  getUrl: jest.fn()
}));

const mockDispatch = jest.fn() as jest.MockedFunction<AppDispatch>;

describe('getFields function', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  const baseStage = {
    stageId: 'ad-1',
    stageInfo: {
      applicants: {},
      products: [],
      fieldmetadata: {
        data: {
          stages: [{
            stageId: 'ad',
            fields: [
              { logical_field_name: 'NRIC' },
              { logical_field_name: 'passport_no' },
              { logical_field_name: 'pass_exp_dt' },
              { logical_field_name: 'work_type' },
              { logical_field_name: 'name_of_employer' }
            ]
          }]
        }
      }
    }
  };

  // Test Case 1: Basic functionality with residency status
  it('should handle residency_status CT/PR value correctly', () => {
    const result = getFields(
      [baseStage],
      { logical_field_name: 'residency_status', value: 'CT' }
    )(mockDispatch);

    expect(mockDispatch).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields(['passport_no', 'pass_exp_dt'])
    );
    expect(result).toEqual([{ logical_field_name: 'NRIC' }]);
  });

  // Test Case 2: Foreigner residency status
  it('should handle residency_status FR value correctly', () => {
    require('../../../services/common-service').getUrl.getUserInputs.mockReturnValue({
      'passport_no_a_1': 'AB123456',
      'pass_exp_dt_a_1': '2030-01-01'
    });

    const result = getFields(
      [baseStage],
      { logical_field_name: 'residency_status', value: 'FR' }
    )(mockDispatch);

    expect(mockDispatch).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields(['NRIC'])
    );
    expect(result).toEqual([
      { logical_field_name: 'passport_no' },
      { logical_field_name: 'pass_exp_dt' }
    ]);
  });

  // Test Case 3: Work type employed
  it('should handle work_type S value correctly', () => {
    const result = getFields(
      [baseStage],
      { logical_field_name: 'work_type', value: 'S' }
    )(mockDispatch);

    expect(mockDispatch).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields(['name_of_business'])
    );
    expect(result).toEqual([
      { logical_field_name: 'name_of_employer' },
      { logical_field_name: 'work_type' }
    ]);
  });

  // Test Case 4: Empty radioResidency
  it('should return null when no radioResidency provided', () => {
    const result = getFields([baseStage])(mockDispatch);
    expect(result).toBeNull();
    expect(mockDispatch).not.toHaveBeenCalledWith(
      expect.objectContaining({
        type: fieldErrorAction.removeMandatoryFields.type
      })
    );
  });

  // Test Case 5: Employer other field
  it('should handle employerOther parameter', () => {
    const result = getFields(
      [baseStage],
      null,
      'name_of_employer_other'
    )(mockDispatch);

    expect(mockDispatch).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: [],
        newFields: ['name_of_employer_other'],
        value: ''
      })
    );
  });

  // Test Case 6: Credit limit consent
  it('should handle credit_limit_consent Y value', () => {
    require('../../../utils/common/change.utils').authenticateType.mockReturnValue('manual');
    
    const result = getFields(
      [baseStage],
      { logical_field_name: 'credit_limit_consent', value: 'Y' },
      undefined,
      undefined,
      { eligible_banca_insurances: ['life'] }
    )(mockDispatch);

    expect(mockDispatch).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields([
        'embossed_name', 'myinfo_data_cli', 'insurance_consent_life'
      ])
    );
  });

  // Test Case 7: Preferred limit handling
  it('should handle preferred_limit 0 value', () => {
    const result = getFields(
      [{
        ...baseStage,
        stageInfo: {
          ...baseStage.stageInfo,
          fieldmetadata: {
            data: {
              stages: [{
                stageId: 'ad',
                fields: [
                  { logical_field_name: 'credit_limit_consent_info_8' },
                  { logical_field_name: 'preferred_credit_limit' }
                ]
              }]
            }
          }
        }
      }],
      { logical_field_name: 'preferred_limit', value: '0' }
    )(mockDispatch);

    expect(mockDispatch).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields(['preferred_credit_limit', 'credit_limit_consent_info_5'])
    );
    expect(result).toEqual([{ logical_field_name: 'credit_limit_consent_info_8' }]);
  });
});
