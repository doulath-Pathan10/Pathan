import React from 'react';
import { render, screen } from '@testing-library/react';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import DynamicComponent from './DynamicComponent'; // Adjust path as needed

// Mock all the imported components
jest.mock('../commonComponents/onboarding-before-start/onboarding-before-start', () => {
  return function OnboardingBeforeStart(props) {
    return (
      <div data-testid="onboarding-before-start">
        OnboardingBeforeStart Component
        <div data-testid="stage-id">{props.stageID}</div>
        <div data-testid="is-visible">{props.isVisible ? 'visible' : 'hidden'}</div>
      </div>
    );
  };
});

jest.mock('../../dashboard/fields/fields', () => {
  return function Fields(props) {
    return (
      <div data-testid="fields">
        Fields Component
        <div data-testid="selected-menu">{props.selectedLeftMenu}</div>
      </div>
    );
  };
});

jest.mock('../commonComponents/loanDisbursement/loan-disbursement', () => {
  return function LoanDisbursement() {
    return <div data-testid="loan-disbursement">LoanDisbursement Component</div>;
  };
});

jest.mock('../commonComponents/documentUpload/documentUploadMain/document-upload-main-scr', () => {
  return function DocumentUploadSRC() {
    return <div data-testid="document-upload">DocumentUploadSRC Component</div>;
  };
});

jest.mock('../submission/submission', () => {
  return {
    Submission: function Submission() {
      return <div data-testid="submission">Submission Component</div>;
    }
  };
});

// Mock useSelector hook
jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useSelector: jest.fn(),
}));

describe('DynamicComponent', () => {
  const mockUseSelector = require('react-redux').useSelector;
  
  // Default props for testing
  const defaultProps = {
    isVisible: true,
    onScrollEnd: jest.fn(),
    stageId: 'test-stage-id',
    nextPage: jest.fn()
  };

  // Create a mock store
  const createMockStore = (currentStage) => {
    return createStore(() => ({
      preApproval: {
        currentStage
      }
    }));
  };

  const renderWithProvider = (props = {}, currentStage = 'PD-0') => {
    const store = createMockStore(currentStage);
    mockUseSelector.mockReturnValue(currentStage);
    
    return render(
      <Provider store={store}>
        <DynamicComponent {...defaultProps} {...props} />
      </Provider>
    );
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('Component Rendering Based on Current Stage', () => {
    test('renders OnboardingBeforeStart component when currentStage is PD-0', () => {
      renderWithProvider({}, 'PD-0');
      
      expect(screen.getByTestId('onboarding-before-start')).toBeInTheDocument();
      expect(screen.getByText('OnboardingBeforeStart Component')).toBeInTheDocument();
    });

    test('renders OnboardingBeforeStart component when currentStage is PD-1', () => {
      renderWithProvider({}, 'PD-1');
      
      expect(screen.getByTestId('onboarding-before-start')).toBeInTheDocument();
      expect(screen.getByText('OnboardingBeforeStart Component')).toBeInTheDocument();
    });

    test('renders Fields component when currentStage is PD-2', () => {
      renderWithProvider({}, 'PD-2');
      
      expect(screen.getByTestId('fields')).toBeInTheDocument();
      expect(screen.getByText('Fields Component')).toBeInTheDocument();
    });

    test('renders LoanDisbursement component when currentStage is LD', () => {
      renderWithProvider({}, 'LD');
      
      expect(screen.getByTestId('loan-disbursement')).toBeInTheDocument();
      expect(screen.getByText('LoanDisbursement Component')).toBeInTheDocument();
    });

    test('renders DocumentUploadSRC component when currentStage is DC', () => {
      renderWithProvider({}, 'DC');
      
      expect(screen.getByTestId('document-upload')).toBeInTheDocument();
      expect(screen.getByText('DocumentUploadSRC Component')).toBeInTheDocument();
    });

    test('renders Submission component when currentStage is FFD', () => {
      renderWithProvider({}, 'FFD');
      
      expect(screen.getByTestId('submission')).toBeInTheDocument();
      expect(screen.getByText('Submission Component')).toBeInTheDocument();
    });

    test('renders Fields component as default when currentStage is unknown', () => {
      renderWithProvider({}, 'UNKNOWN_STAGE');
      
      expect(screen.getByTestId('fields')).toBeInTheDocument();
      expect(screen.getByText('Fields Component')).toBeInTheDocument();
    });
  });

  describe('Props Passing', () => {
    test('passes correct props to OnboardingBeforeStart for PD-0 stage', () => {
      const customProps = {
        isVisible: false,
        stageId: 'custom-stage-id',
        onScrollEnd: jest.fn(),
        nextPage: jest.fn()
      };
      
      renderWithProvider(customProps, 'PD-0');
      
      expect(screen.getByTestId('stage-id')).toHaveTextContent('custom-stage-id');
      expect(screen.getByTestId('is-visible')).toHaveTextContent('hidden');
    });

    test('passes correct props to OnboardingBeforeStart for PD-1 stage', () => {
      const customProps = {
        isVisible: true,
        stageId: 'another-stage-id',
        onScrollEnd: jest.fn(),
        nextPage: jest.fn()
      };
      
      renderWithProvider(customProps, 'PD-1');
      
      expect(screen.getByTestId('stage-id')).toHaveTextContent('another-stage-id');
      expect(screen.getByTestId('is-visible')).toHaveTextContent('visible');
    });

    test('passes selectedLeftMenu prop to Fields component', () => {
      renderWithProvider({}, 'PD-2');
      
      // selectedLeftMenu should be empty string by default
      expect(screen.getByTestId('selected-menu')).toHaveTextContent('');
    });
  });

  describe('Redux State Integration', () => {
    test('correctly uses currentStage from Redux store', () => {
      const stages = ['PD-0', 'PD-1', 'PD-2', 'LD', 'DC', 'FFD'];
      const expectedComponents = [
        'onboarding-before-start',
        'onboarding-before-start', 
        'fields',
        'loan-disbursement',
        'document-upload',
        'submission'
      ];

      stages.forEach((stage, index) => {
        const { unmount } = renderWithProvider({}, stage);
        expect(screen.getByTestId(expectedComponents[index])).toBeInTheDocument();
        unmount();
      });
    });

    test('handles undefined currentStage gracefully', () => {
      mockUseSelector.mockReturnValue(undefined);
      const store = createMockStore(undefined);
      
      render(
        <Provider store={store}>
          <DynamicComponent {...defaultProps} />
        </Provider>
      );
      
      // Should render Fields component as default
      expect(screen.getByTestId('fields')).toBeInTheDocument();
    });

    test('handles null currentStage gracefully', () => {
      mockUseSelector.mockReturnValue(null);
      const store = createMockStore(null);
      
      render(
        <Provider store={store}>
          <DynamicComponent {...defaultProps} />
        </Provider>
      );
      
      // Should render Fields component as default
      expect(screen.getByTestId('fields')).toBeInTheDocument();
    });
  });

  describe('Component Mounting and Unmounting', () => {
    test('component mounts without errors', () => {
      expect(() => {
        renderWithProvider({}, 'PD-0');
      }).not.toThrow();
    });

    test('component unmounts without errors', () => {
      const { unmount } = renderWithProvider({}, 'PD-0');
      
      expect(() => {
        unmount();
      }).not.toThrow();
    });
  });

  describe('State Management', () => {
    test('selectedLeftMenu state is initialized as empty string', () => {
      renderWithProvider({}, 'PD-2');
      
      expect(screen.getByTestId('selected-menu')).toHaveTextContent('');
    });
  });

  describe('Edge Cases', () => {
    test('handles empty string currentStage', () => {
      renderWithProvider({}, '');
      
      // Should render Fields component as default
      expect(screen.getByTestId('fields')).toBeInTheDocument();
    });

    test('handles whitespace-only currentStage', () => {
      renderWithProvider({}, '   ');
      
      // Should render Fields component as default
      expect(screen.getByTestId('fields')).toBeInTheDocument();
    });

    test('renders only one component at a time', () => {
      renderWithProvider({}, 'PD-0');
      
      expect(screen.getByTestId('onboarding-before-start')).toBeInTheDocument();
      expect(screen.queryByTestId('fields')).not.toBeInTheDocument();
      expect(screen.queryByTestId('loan-disbursement')).not.toBeInTheDocument();
      expect(screen.queryByTestId('document-upload')).not.toBeInTheDocument();
      expect(screen.queryByTestId('submission')).not.toBeInTheDocument();
    });
  });

  describe('Function Props', () => {
    test('onScrollEnd function is passed correctly', () => {
      const mockOnScrollEnd = jest.fn();
      renderWithProvider({ onScrollEnd: mockOnScrollEnd }, 'PD-0');
      
      expect(screen.getByTestId('onboarding-before-start')).toBeInTheDocument();
      // The mock component doesn't trigger the function, but we can verify it's passed
    });

    test('nextPage function is passed correctly', () => {
      const mockNextPage = jest.fn();
      renderWithProvider({ nextPage: mockNextPage }, 'PD-1');
      
      expect(screen.getByTestId('onboarding-before-start')).toBeInTheDocument();
      // The mock component doesn't trigger the function, but we can verify it's passed
    });
  });
});
