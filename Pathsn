import Rules_ad_1 from './Rules_ad_1';
import { store } from '../../utils/store/store';
import rulesUtils from './rules.utils';

// Mock localStorage
const localStorageMock = (() => {
  let store: Record<string, string> = {};
  return {
    getItem: (key: string) => store[key] || null,
    setItem: (key: string, value: string) => {
      store[key] = value.toString();
    },
    clear: () => {
      store = {};
    }
  };
})();

Object.defineProperty(window, 'localStorage', {
  value: localStorageMock
});

// Mock rulesUtils
jest.mock('./rules.utils', () => jest.fn());

describe('Rules_ad_1 Utility Function', () => {
  const mockProps = [
    [
      {
        field_set_name: "Additional Details",
        fields: [
          { logical_field_name: "reason_for_account_rwb", component_type: "Input" },
          { logical_field_name: "Initial_deposit_rwb", component_type: "Input" }
        ]
      },
      {
        field_set_name: "Banking Services",
        fields: [
          { logical_field_name: "debit_card_request_rwb", component_type: "Checkbox" },
          { logical_field_name: "cheque_book_request_rwb", component_type: "Checkbox" }
        ]
      },
      {
        field_set_name: "Time Deposit Details",
        fields: [
          { logical_field_name: "td_product_currency_value", component_type: "Text" },
          { logical_field_name: "td_depoist_amount", component_type: "Input" }
        ]
      }
    ]
  ];

  const mockStageInfo = {
    products: [
      { product_category: 'CA', product_type: '307', product_category_name: 'Current', name: 'Premium Account' }
    ],
    applicants: {
      no_of_accounts_rwb_a_1: 2
    }
  };

  beforeEach(() => {
    localStorage.clear();
    (rulesUtils as jest.Mock).mockClear();
    (rulesUtils as jest.Mock).mockImplementation((fields, validation) => ({
      filteredFields: fields,
      validationObj: validation
    }));
  });

  it('should handle basic case with single product', () => {
    localStorage.setItem('products', JSON.stringify([{ 
      product_category_name: 'Current', 
      name: 'Premium Account' 
    }]));
    
    const result = Rules_ad_1(mockProps, mockStageInfo);
    
    expect(result.filteredFields[0]).toHaveLength(2);
    expect(result.filteredFields[0][0].field_set_name).toBe('Additional Details');
    expect(result.filteredFields[0][1].field_set_name).toBe('Banking Services');
  });

  it('should handle multiple products with custom field set names', () => {
    localStorage.setItem('products', JSON.stringify([
      { product_category_name: 'Current', name: 'Premium Account' },
      { product_category_name: 'Savings', name: 'Super Saver' }
    ]));
    
    const result = Rules_ad_1(mockProps, mockStageInfo);
    
    expect(result.filteredFields[0][0].field_set_name).toBe('Current - Premium Account Additional Details');
    expect(result.filteredFields[0][1].field_set_name).toMatch(/Banking Services/);
  });

  it('should handle repeatCount for multiple accounts', () => {
    localStorage.setItem('products', JSON.stringify([{ 
      product_category_name: 'Current', 
      name: 'Premium Account' 
    }]));
    
    const stageInfoWithRepeat = {
      ...mockStageInfo,
      applicants: { no_of_accounts_rwb_a_1: 3 }
    };
    
    const result = Rules_ad_1(mockProps, stageInfoWithRepeat);
    
    // Should have original + 2 repeats
    const additionalDetailsSets = result.filteredFields[0].filter(
      (fs: any) => fs.field_set_name === 'Additional Details'
    );
    expect(additionalDetailsSets).toHaveLength(2);
    
    const bankingServicesSets = result.filteredFields[0].filter(
      (fs: any) => fs.field_set_name === 'Banking Services'
    );
    expect(bankingServicesSets).toHaveLength(2);
  });

  it('should handle TD product category with special modifications', () => {
    localStorage.setItem('products', JSON.stringify([{ 
      product_category_name: 'Term Deposit', 
      name: 'Fixed Deposit' 
    }]));
    
    const tdStageInfo = {
      ...mockStageInfo,
      products: [{ product_category: 'TD', product_type: '500' }]
    };
    
    const result = Rules_ad_1(mockProps, tdStageInfo);
    
    // Check Time Deposit Details is added
    expect(result.filteredFields[0].some(
      (fs: any) => fs.field_set_name === 'Time Deposit Details'
    )).toBe(true);
    
    // Check component type change for td_product_currency_value
    const tdDetails = result.filteredFields[0].find(
      (fs: any) => fs.field_set_name === 'Time Deposit Details'
    );
    expect(tdDetails.fields.find(
      (f: any) => f.logical_field_name === 'td_product_currency_value'
    ).component_type).toBe('SelectionBox');
    
    // Check hidden fields
    expect(result.validationObj.hidden[0]).toContain('debit_card_request_rwb');
  });

  it('should filter specific fields for product type combinations', () => {
    localStorage.setItem('products', JSON.stringify([
      { product_category_name: 'Current', name: 'Premium Account' },
      { product_category_name: 'Savings', name: 'Super Saver' }
    ]));
    
    const comboStageInfo = {
      ...mockStageInfo,
      products: [
        { product_category: 'CA', product_type: '307' },
        { product_category: 'CA', product_type: '318' }
      ]
    };
    
    const result = Rules_ad_1(mockProps, comboStageInfo);
    
    // Check Banking Services fields are filtered
    const bankingServices = result.filteredFields[0].find(
      (fs: any) => fs.field_set_name.includes('Banking Services')
    );
    expect(bankingServices.fields.some(
      (f: any) => f.logical_field_name === 'cheque_book_request_rwb'
    )).toBe(false);
  });

  it('should add hidden fields for specific product types', () => {
    localStorage.setItem('products', JSON.stringify([{ 
      product_category_name: 'Current', 
      name: 'Premium Account' 
    }]));
    
    const result = Rules_ad_1(mockProps, mockStageInfo);
    
    expect(result.validationObj.hidden[0]).toContain('Initial_deposit_rwb');
    expect(result.validationObj.hidden[0]).toContain('cheque_book_request_rwb');
  });

  it('should handle empty products in localStorage', () => {
    localStorage.setItem('products', '[]');
    
    const result = Rules_ad_1(mockProps, mockStageInfo);
    
    expect(result.filteredFields[0][0].field_set_name).toBe('Additional Details');
  });

  it('should handle CA product type 317/314 with hidden reason_for_account_rwb', () => {
    localStorage.setItem('products', JSON.stringify([{ 
      product_category_name: 'Current', 
      name: 'Premium Account' 
    }]));
    
    const caStageInfo = {
      ...mockStageInfo,
      products: [{ product_category: 'CA', product_type: '317' }]
    };
    
    const result = Rules_ad_1(mockProps, caStageInfo);
    
    expect(result.validationObj.hidden[0]).toContain('reason_for_account_rwb');
  });

  it('should handle modifyVisibility fields for TD products', () => {
    localStorage.setItem('products', JSON.stringify([{ 
      product_category_name: 'Term Deposit', 
      name: 'Fixed Deposit' 
    }]));
    
    const tdStageInfo = {
      ...mockStageInfo,
      products: [{ product_category: 'TD', product_type: '500' }]
    };
    
    const result = Rules_ad_1(mockProps, tdStageInfo);
    
    expect(result.validationObj.modifyVisibility[0]).toContain('td_product_currency_value');
    expect(result.validationObj.modifyVisibility[0]).toContain('td_depoist_amount');
  });
});
