import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import ThankYouCC from './ThankYouCC';
import '@testing-library/jest-dom';

// Mock child components
jest.mock('./thankyou-banner', () => (props: any) => (
  <div data-testid="thankyou-banner">
    <h1>{props.banner_header}</h1>
    <p>{props.productName}</p>
    <p>{props.banner_body_2}</p>
  </div>
));

jest.mock('./thankyou-timeline', () => (props: any) => (
  <div data-testid="thankyou-timeline">
    <h2>{props.title}</h2>
    {props.data.map((item: any) => (
      <div key={item.title} onClick={props.handleLink}>
        {item.title} - {item.description}
      </div>
    ))}
  </div>
));

jest.mock('./thankyou-survey', () => () => (
  <div data-testid="thankyou-survey">Survey Component</div>
));

describe('ThankYouCC Component', () => {
  const defaultProps = {
    applicationDetails: {
      isStp: false,
      thankyouProp: 'standard',
      thankyouText: 'standard',
      productName: ['Credit Card'],
      cardNumber: '1234 5678 9012 3456'
    },
    thankyou: {
      standard: {
        CCPL: {
          banner_header: 'Thank you for your application!',
          banner_body_2: 'We will process your application shortly.',
          resumeUrl: '/resume',
          title: 'What happens next?',
          content: 'Here are the next steps in your application process.',
          timeLine: [
            { title: 'Step 1', description: 'Application received', completed: true },
            { title: 'Step 2', description: 'Under review', completed: false }
          ],
          note_title: 'Important Notes',
          note_content_1: 'Note content 1',
          note_content_2: 'Note content 2',
          note_content_3: 'Note content 3',
          note_content_4: 'Click here for more info',
          note_link: 'https://example.com/info',
          refId_lbl: 'Reference Number:'
        },
        timeLine: 'Application Timeline'
      },
      STPCCBanner: {
        banner_header: 'STP Application Complete',
        banner_body_1: 'Your ',
        banner_body_2: ' application is complete.'
      },
      CCPL: {
        note_title: 'General Notes',
        note_content_1: 'General note 1',
        note_content_2: 'General note 2',
        note_content_3: 'General note 3',
        note_content_4: 'General link',
        note_link: 'https://example.com/general'
      }
    },
    applicationReferenceNo: 'APP12345678',
    showOTPPopup: jest.fn(),
    showContinuePopup: jest.fn(),
    submitForm: jest.fn()
  };

  const stpProps = {
    ...defaultProps,
    applicationDetails: {
      ...defaultProps.applicationDetails,
      isStp: true
    }
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(<ThankYouCC {...defaultProps} />);
    expect(screen.getByTestId('thankyou-banner')).toBeInTheDocument();
  });

  describe('Non-STP Application', () => {
    it('displays the correct banner content', () => {
      render(<ThankYouCC {...defaultProps} />);
      expect(screen.getByText('Thank you for your application!')).toBeInTheDocument();
      expect(screen.getByText('Credit Card')).toBeInTheDocument();
      expect(screen.getByText('We will process your application shortly.')).toBeInTheDocument();
    });

    it('displays the timeline section', () => {
      render(<ThankYouCC {...defaultProps} />);
      expect(screen.getByText('Application Timeline')).toBeInTheDocument();
      expect(screen.getByText('Step 1 - Application received')).toBeInTheDocument();
    });

    it('displays the notes section', () => {
      render(<ThankYouCC {...defaultProps} />);
      expect(screen.getByText('Important Notes')).toBeInTheDocument();
      expect(screen.getByText('Note content 1')).toBeInTheDocument();
      expect(screen.getByText('Click here for more info')).toBeInTheDocument();
    });

    it('displays the reference number', () => {
      render(<ThankYouCC {...defaultProps} />);
      expect(screen.getByText('Reference Number:')).toBeInTheDocument();
      expect(screen.getByText('APP12345678')).toBeInTheDocument();
    });

    it('shows the Done button and handles click', () => {
      render(<ThankYouCC {...defaultProps} />);
      const button = screen.getByRole('button', { name: /done/i });
      fireEvent.click(button);
      expect(defaultProps.submitForm).toHaveBeenCalled();
    });
  });

  describe('STP Application', () => {
    it('displays the STP banner content', () => {
      render(<ThankYouCC {...stpProps} />);
      expect(screen.getByText('STP Application Complete')).toBeInTheDocument();
    });

    it('shows the Continue button and handles click', () => {
      render(<ThankYouCC {...stpProps} />);
      const button = screen.getByRole('button', { name: /continue/i });
      fireEvent.click(button);
      expect(stpProps.showContinuePopup).toHaveBeenCalled();
    });

    it('does not display the notes section', () => {
      render(<ThankYouCC {...stpProps} />);
      expect(screen.queryByText('Important Notes')).not.toBeInTheDocument();
    });
  });

  it('renders the ThankYouSurvey component', () => {
    render(<ThankYouCC {...defaultProps} />);
    expect(screen.getByTestId('thankyou-survey')).toBeInTheDocument();
  });

  it('handles timeline item clicks', () => {
    render(<ThankYouCC {...defaultProps} />);
    const timelineItem = screen.getByText('Step 1 - Application received');
    fireEvent.click(timelineItem);
    expect(defaultProps.showOTPPopup).toHaveBeenCalled();
  });
});
