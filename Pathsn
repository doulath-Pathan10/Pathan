import React, { FormEvent, useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import "./fields.scss";

import renderComponent from "./renderer";
import {
  getLovMissing,
  residentialAddress,
  stageFields,
  submitRequest,
  userInputPayload,
} from "./fields.utils";
import Footer from "../footer/footer";
import {
  FieldsetModel,
  KeyStringModel,
  KeyWithAnyModel,
  StoreModel,
  FieldModel,
} from "../../../utils/model/common-model";
import {
  isFormUpdate,
  checkProductDetails,
  lovRequests,
  dispatchLoader,
  submitBasicData,
  channelReference,
  submitBasicDataMyInfo,
  creditToTrust,
  thankYouPage, 
  submitBasicDataDocument,
  getOfferData,
  offerData,
  defaultError,
  rateRequest,
  dedubeUtilData,
  getClientInfo
} from "../../../services/common-service";
import { stagesAction } from "../../../utils/store/stages-slice";
import { getStageName, pageScrollTop, stateUrl } from "./stage.utils";
import { fieldErrorAction } from "../../../utils/store/field-error-slice";
import {
  authenticateType,
  FindIndex,
  smoothScroll,
  getUrl,
  getTokenChno
} from "../../../utils/common/change.utils";
import { useNavigate } from "react-router-dom";
import Model from "../../../shared/components/model/model";
import DocumentUpload from "../../../shared/components/document-upload/document-upload";
import { ValueUpdateAction } from "../../../utils/store/value-update-slice";
import ReviewPage from "../review-page/review-page";
import validateService from "../../../services/validation-service";
import CPFContribution from "../../../shared/components/cpf-contribution/cpf-contribution";
import BancaDetails from "../../../shared/components/banca-details/banca-details";
import {
  assignUpdateUserInput,
  deleteConditionalFieldSelector,
  removeUserInput,
  setFieldsForMyinfo,
} from "./fields-methods";
import trackEvents from "../../../services/track-events";
import gaTrackEvents from "../../../services/ga-track-events";
import { CONSTANTS,DEFAULT_NONEDITABLE } from "../../../utils/common/constants";
import { referralcodeAction } from "../../../utils/store/referral-code-slice";
import errorMsg from "../../../assets/_json/error.json";
import { store } from "../../../utils/store/store";
import Myinfobanner from "../../../shared/components/myinfo-banner/myinfo-banner";
import { trustBankAction } from "../../../utils/store/trust-bank-slice";
import auth from "../../../utils/store/auth-slice";
import { getFields } from "../../../shared/components/phone/phone.util";

const Fields = (props: KeyWithAnyModel) => {
  const stageSelector = useSelector((state: StoreModel) => state.stages.stages);
    const stageSelectorThankYou = useSelector((state: StoreModel) => state.stages.stages);
// const [fieldsComponent, setFieldsComponent] = useState(false);

  const madatoryFieldSelector = useSelector(
    (state: StoreModel) => state.fielderror.mandatoryFields
  );
  const isAgeValidSelector = useSelector((state:StoreModel)=>state.ageValidation.isAgeValid)
 const applicantsSelector = useSelector(
    (state: StoreModel) => state.stages.userInput.applicants
  );
  const missingFieldsSelector = useSelector(
    (state: StoreModel) => state.stages.userInput.missingFields
  );
  const conditionalFieldSelector = useSelector(
    (state: StoreModel) => state.stages.conditionalFields
  );
  let myinfoMissingFieldsSelector = useSelector(
    (state: StoreModel) => state.stages.myinfoMissingFields
  );
  const myinfoMissingLogicalFieldsSelector = useSelector(
    (state: StoreModel) => state.stages.myinfoMissingLogicFields
  );
  const updatedStageInputsSelector = useSelector(
    (state: StoreModel) => state.stages.updatedStageInputs
  );
  const userInputSelector = useSelector(
    (state: StoreModel) => state.stages.userInput
  );
  const currentStageSelector = useSelector(
    (state: StoreModel) => state.stages.currentStage
  );
  const lastStageSelector = useSelector(
    (state: any) => state.stages.lastStageId
  );
  const dependencyFieldsSelector = useSelector(
    (state: StoreModel) => state.stages.dependencyFields
  );
  const myinfoResSelector = useSelector(
    (state: StoreModel) => state.stages.myinfoResponse
  );
  const ibankingResSeletor = useSelector(
    (state: StoreModel) => state.stages.ibankingResponse
  );
  const valueSelector = useSelector((state: StoreModel) => state.valueUpdate);
  const applicationJourney = useSelector(
    (state: StoreModel) => state.stages.journeyType
  );
  const lovSelector = useSelector((state: StoreModel) => state.lov);
  const resumeSelector = useSelector(
    (state: StoreModel) => state.urlParam.resume
  );
  const bancaSelector = useSelector(
    (state: StoreModel) => state.bancaList.bancaDetails
  );
  const otpTriggerSelector = useSelector(
    (state: StoreModel) => state.stages.otpTrigger
  );
  const taxSelector = useSelector((state: StoreModel) => state.tax);
  const aliasSelector = useSelector((state: StoreModel) => state.alias);
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const [fields, setFields] = useState<FieldModel | null>();
  const [userInputs, setUserInputs] = useState<KeyWithAnyModel>({});
  const [stageId, setStageId] = useState<string>(stageSelector[0].stageId);
  const [otherMyinfo, setOtherMyinfo] = useState(false);
  const [showAgePopup, setShowAgePopup] = useState(false);
  const [showUSPopup, setShowUSPopup] = useState(false);
  const [cpfContributionData, setCpfContributionData] = useState([]);
  const [showNationalityPopup, setShowNationalityPopup] = useState(false);
  const [ageInvalidMessage, setAgeInvalidMessage] = useState("");
  const otherMyinfoSelector = useSelector(
    (state: StoreModel) => state.valueUpdate
  );
  let currentStageSection: KeyWithAnyModel = {};
  const [isRequiredValid, setIsRequiredValid] = useState("form-valid");
  const [isFormValid, setIsFormValid] = useState(true);
  const [checkboxStatus, setCheckboxStatus] = useState(false);
  const [isCASAProduct, setIsCASAProduct] = useState<boolean>(false);
  const productsSelector = useSelector(
    (_state: StoreModel) => stageSelector[0].stageInfo.products
  );
  const errorSelector = useSelector((state: StoreModel) => state.error);
  const showPopupSelector = useSelector((state: StoreModel) => state.postalCode.showPopup);
  const [showPostalPopup, setShowPostalPopup] = useState(false);
  const referralcodeSelector = useSelector((state: StoreModel) => state.referralcode);
  const [showReferralcodePopup, setShowReferralcodePopup] = useState(false);
  const [continueWithoutReferralcode, setContinueWithoutReferralcode] =
    useState(false);

  const [banckaMandatory, setBanckaMandatory] = useState<any>();
  const [basicResponse,setBasicResponse]=useState();
  const [otherAddressMandatory, setotherAddressMandatory] = useState([])
  const stage = store.getState();
  const td_multi_currency_products:any = getUrl.getProductInfo();
  let additionalFields: string[] = [] ;

  const documentStore = useSelector(
    (state: StoreModel) => state.documentUploadList
  );
  const repeatCount = stageSelector[0].stageInfo?.applicants.no_of_accounts_rwb_a_1? stageSelector[0].stageInfo?.applicants.no_of_accounts_rwb_a_1:1 ;
const products = JSON.parse(localStorage.getItem('products') || '[]');
const applicantNo:any = sessionStorage.getItem("currentStage")? sessionStorage.getItem("currentStage"):1;

  // useEffect(() => {
  //   if (props.selectedLeftMenu !== undefined) {
  //     const selectLeftMenu: string = props.selectedLeftMenu;
  //     leftMenuHandler(selectLeftMenu);
  //   }
  //   // eslint-disable-next-line react-hooks/exhaustive-deps
  // }, [props.selectedLeftMenu]);
 
  // useEffect(() => {
  //  if(stageSelector[0].stageInfo.products[0].product_type === '280'){
  //     if(stageSelector[0].stageId ==="ld-1"){
  //   setShowPostalPopup(!!showPopupSelector);
  //     }
  //   }
  //   // eslint-disable-next-line react-hooks/exhaustive-deps
  // });

  // useEffect(() => {
  //   if (props.selectedLeftMenu !== undefined) {
  //     const selectLeftMenu: string = props.selectedLeftMenu;
  //     leftMenuHandler(selectLeftMenu);
  //   }
  //   // eslint-disable-next-line react-hooks/exhaustive-deps
  // }, [props.selectedLeftMenu]);
  useEffect(() => {
    if (otherMyinfo) {
      const checkProductType = checkProductDetails(productsSelector);
      setIsCASAProduct(checkProductType ? true : false);
      if (
        stageSelector &&
        stageSelector.length > 0 &&
        stageSelector[0].stageInfo.applicants.Cpfcontributions
      ) {
        setCpfContributionData(
          stageSelector[0].stageInfo.applicants.Cpfcontributions
        );
      }
    }

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [otherMyinfo]);
  useEffect(() => {
        let updateUserInputs = { ...userInputs };
    if (Object.keys(updateUserInputs).length > 0) {
      dispatch(
        deleteConditionalFieldSelector(
          updateUserInputs,
          conditionalFieldSelector
        )
      ).then((updateUserInputsResponse: any) => {
        updateUserInputs = updateUserInputsResponse;
      });
    }
    if (Object.keys(conditionalFieldSelector.newFields).length > 0) {
      for (let key in conditionalFieldSelector.newFields) {
        const stageData = stageSelector[0].stageInfo.applicants[key + "_a_" + applicantNo];
        updateUserInputs[key] = stageData || "";
      }
    }
    if (dependencyFieldsSelector.workType) {
      dispatch(
        removeUserInput(
          updateUserInputs,
          dependencyFieldsSelector,
          conditionalFieldSelector
        )
      ).then((updateUserInputsResponse: any) => {
        setUserInputs(updateUserInputsResponse);
      });
    }
    if (Object.keys(updateUserInputs).length > 0) {
      let getUsInput = applicantsSelector;
      dispatch(assignUpdateUserInput(getUsInput, updateUserInputs)).then(
        (updateUserInputsResponse: any) => {
          delete updateUserInputs.add_tax_residency;
          delete updateUserInputs.add_tax_residency_note;
          delete updateUserInputs.enter_account_info;
          //delete updateUserInputs.name_of_employer;
          delete updateUserInputs.job_title;
          delete updateUserInputs.nature_of_employer;
          delete updateUserInputs.name_of_business;
          if("tax_id_no" in updateUserInputsResponse && 
            updateUserInputsResponse.tax_id_no===undefined){
            delete updateUserInputs.tax_id_no;
          }
          if("tax_id_no_1" in updateUserInputsResponse && 
            updateUserInputsResponse.tax_id_no_1===undefined){
            delete updateUserInputs.tax_id_no_1;
          }
           if("tax_id_no_2" in updateUserInputsResponse && 
            updateUserInputsResponse.tax_id_no_2===undefined){
            delete updateUserInputs.tax_id_no_2;
          }
          if("tax_id_no_3" in updateUserInputsResponse && 
          updateUserInputsResponse.tax_id_no_3===undefined){
          delete updateUserInputs.tax_id_no_3;
         }
         if("tax_id_no_4" in updateUserInputsResponse && 
        updateUserInputsResponse.tax_id_no_4===undefined){
        delete updateUserInputs.tax_id_no_4;
}
         if("crs_comments_1" in updateUserInputsResponse&&
         updateUserInputsResponse.crs_comments_1===undefined){
          delete updateUserInputsResponse.crs_comments_1;
         }
         if("crs_comments_2" in updateUserInputsResponse&&
         updateUserInputsResponse.crs_comments_2===undefined){
          delete updateUserInputsResponse.crs_comments_2;
         }
         if("crs_comments_3" in updateUserInputsResponse&&
         updateUserInputsResponse.crs_comments_3===undefined){
          delete updateUserInputsResponse.crs_comments_3;
         }
         if("crs_comments_4" in updateUserInputsResponse&&
         updateUserInputsResponse.crs_comments_4===undefined){
          delete updateUserInputsResponse.crs_comments_4;
         }
         if("casa_fatca_declaration" in updateUserInputsResponse &&
         updateUserInputs.casa_fatca_declaration===undefined){
          delete updateUserInputsResponse.casa_fatca_declaration;
         }
         if("embossed_name" in updateUserInputsResponse && updateUserInputsResponse.embossed_name.length >0
         &&stageSelector[0].stageId==="ad-2"){
          delete updateUserInputs.embossed_name;
         }
          if(stageSelector[0].stageId==="ad-2" && stage.stages.journeyType === "NTC"){
            const updatedResponse={...updateUserInputsResponse,embossed_name: stageSelector[0].stageInfo.applicants["full_name_a_1"]}
            setUserInputs(updatedResponse);
          }
          if(stageSelector[0].stageId==="ad-1"){
            if(userInputSelector.applicants["debit_card_request_rwb_a_1"] === "N") {
              dispatch(fieldErrorAction.removeMandatoryFields(["issuance_type", "embossed_dc_name_rwb"]));
              dispatch(
                stagesAction.removeAddToggleField({
                  removeFields:["issuance_type", "embossed_dc_name_rwb"],
                  newFields: [],
                  value: "",
                }))
            }else if(userInputSelector.applicants["debit_card_request_rwb_a_1"] === "Y") {
              userInputSelector.applicants["issuance_type_a_1"] == "I"?
              dispatch(fieldErrorAction.removeMandatoryFields(["embossed_dc_name_rwb"]))
              :
              dispatch(fieldErrorAction.getMandatoryFields(["issuance_type", "embossed_dc_name_rwb"]));

             userInputSelector.applicants["issuance_type_a_1"] == "I"?
              dispatch(
                stagesAction.removeAddToggleField({
                  removeFields: ["embossed_dc_name_rwb"],
                  newFields: [],
                  value: "",
                })
              ):
              dispatch(
                stagesAction.removeAddToggleField({
                  removeFields: [],
                  newFields: ["issuance_type", "embossed_dc_name_rwb"],
                  value: "",
                })
              )
            }
            const updatedResponse={...updateUserInputsResponse,short_name: stageSelector[0].stageInfo.applicants["short_name_p_1"]?stageSelector[0].stageInfo.applicants["short_name_p_1"]: userInputSelector.applicants["short_name_a_1"]?userInputSelector.applicants["short_name_a_1"]:""}
            setUserInputs(updatedResponse);
          }
          if(products.length > 1){
            if(stageSelector[0].stageId==="ad-1"){
              if(userInputSelector.applicants["debit_card_request_rwb_2_a_1"] === "N") {
                dispatch(fieldErrorAction.removeMandatoryFields(["issuance_type_2", "embossed_dc_name_rwb_2"]));
                dispatch(
                  stagesAction.removeAddToggleField({
                    removeFields:["issuance_type_2", "embossed_dc_name_rwb_2"],
                    newFields: [],
                    value: "",
                  }))
              }else if(userInputSelector.applicants["debit_card_request_rwb_2_a_1"] === "Y") {
                userInputSelector.applicants["issuance_type_2_a_1"] == "I"?
                dispatch(fieldErrorAction.removeMandatoryFields(["embossed_dc_name_rwb_2"]))
                :
                dispatch(fieldErrorAction.getMandatoryFields(["issuance_type_2", "embossed_dc_name_rwb_2"]));
  
               userInputSelector.applicants["issuance_type_2_a_1"] == "I"?
                dispatch(
                  stagesAction.removeAddToggleField({
                    removeFields: ["embossed_dc_name_rwb_2"],
                    newFields: [],
                    value: "",
                  })
                ):
                dispatch(
                  stagesAction.removeAddToggleField({
                    removeFields: [],
                    newFields: ["issuance_type_2", "embossed_dc_name_rwb_2"],
                    value: "",
                  })
                )
              }
              const updatedResponse={...updateUserInputsResponse,short_name_2: stageSelector[0].stageInfo.applicants["short_name_2_p_1"]?stageSelector[0].stageInfo.applicants["short_name_2_p_1"]: userInputSelector.applicants["short_name_2_a_1"]?userInputSelector.applicants["short_name_2_a_1"]:""}
              setUserInputs(updatedResponse);
            }


          }
          if(stageSelector[0].stageId==="ad-1"){
            for(let i =0; i < repeatCount -1 ; i++){
              const Suffix = i + 2;
              const requestkey =`debit_card_request_rwb_${Suffix}_a_1`;
              const issuanceKey = `issuance_type_${Suffix}`;
              const embossedKey = `embossed_dc_name_rwb_${Suffix}`;
              const shortNameKey = `short_name_${Suffix}_p_1`;
              const short_Name_key = `short_name_${Suffix}`;

              if(userInputSelector.applicants[requestkey] === "N") {
              dispatch(fieldErrorAction.removeMandatoryFields([issuanceKey, embossedKey]));
              dispatch(
                stagesAction.removeAddToggleField({
                  removeFields:[issuanceKey,embossedKey],
                  newFields: [],
                  value: "",
                }))
            }else if(userInputSelector.applicants[requestkey] === "Y") {
              userInputSelector.applicants[`${issuanceKey}_a_1`] == "I"?
              dispatch(fieldErrorAction.removeMandatoryFields([embossedKey]))
              :
              dispatch(fieldErrorAction.getMandatoryFields([issuanceKey, embossedKey]));
              userInputSelector.applicants[`${issuanceKey}_a_1`] == "I"?
              dispatch(
                stagesAction.removeAddToggleField({
                  removeFields: [embossedKey],
                  newFields: [],
                })
              ):
              dispatch(
                stagesAction.removeAddToggleField({
                  removeFields: [],
                  newFields: [issuanceKey,embossedKey],
                  value: "",
                })
              )
            }
            const updatedResponse={...updateUserInputsResponse,[short_Name_key]: stageSelector[0].stageInfo.applicants[shortNameKey]?stageSelector[0].stageInfo.applicants[shortNameKey]: userInputSelector.applicants[shortNameKey]?userInputSelector.applicants[shortNameKey]:""}
            setUserInputs(updatedResponse);
          }
          }
          
          if(stageSelector[0].stageId==="bd-3"){
            const updatedResponse={...updateUserInputsResponse,application_sourcing: stageSelector[0].stageInfo.applicants["application_sourcing_a_1"]?stageSelector[0].stageInfo.applicants["application_sourcing_a_1"]:userInputSelector.applicants["application_sourcing_a_1"]?userInputSelector.applicants["application_sourcing_a_1"]:""}
            setUserInputs(updatedResponse);
            dispatch(fieldErrorAction.getMandatoryFields(["work_type"]));
            dispatch(
              stagesAction.removeAddToggleField({
                removeFields: [],
                newFields: ["work_type"],
                value: userInputSelector.applicants.work_type_a_1?userInputSelector.applicants.work_type_a_1:stageSelector[0].stageInfo.applicants.work_type_a_1,
              })
            );
          }
          else{
            if (!("mobile_number" in updateUserInputs)) {
              setUserInputs(updateUserInputsResponse);
            }
          }
        }
      );
    } else if (!dependencyFieldsSelector.workType && 
      (stageSelector[0].stageId !== "ssf-1" && authenticateType() !== "manual")) {
      setUserInputs(updateUserInputs);
    }
      // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [conditionalFieldSelector]);

  useEffect(() => {
    if (!!currentStageSelector) {
      setStageId(currentStageSelector!);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentStageSelector]);

  useEffect(() => {
    if (stageSelector && stageSelector.length > 0) {
      if (stageId === "ssf-1" && window.adobeDataLayer.length < 1) {
        trackEvents.atViewStart();
        trackEvents.triggerAdobeEvent("formStart");
      }
      if (stageId !== "doc" && stageId !== "rp") {
        setFields(stageFields(stageSelector, stageId));
      } else {
        setFields(null);
      }

      if(stageSelector[0].stageId === "bd-3" && (applicationJourney === 'NTC'||applicationJourney === 'NTB'||applicationJourney === 'ETB'||applicationJourney === 'ECA')){
        if(stageSelector[0].stageInfo.products[0].product_category === 'CC' || stageSelector[0].stageInfo.products[0].product_type === '280'){
         setOtherMyinfo(true);
        }
      }
    }
    pageScrollTop();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [stageSelector, stageId]);

  useEffect(() => {
    if (valueSelector.value !== false && stageId !== "doc") {
      if (fields && fields["fields"] && fields["fields"].length > 0) {
        let mandatoryFields: Array<string> = [];
        if(banckaMandatory) {
          mandatoryFields = Object.keys(banckaMandatory);
        }
        let value: KeyStringModel = {};
        fields.fields.forEach((res: FieldsetModel) => {
          res.fields.forEach((fName: KeyWithAnyModel) => {
            if (
              fName.mandatory === "Yes" &&
              fName.logical_field_name !== "see_other_myInfo_details"
            ) {
              let logicalFieldVal =
                stageSelector[0].stageInfo.applicants[
                  fName.logical_field_name + "_a_" + applicantNo
                ];
                if (
                 (!logicalFieldVal && 
                  fName.logical_field_name === "embossed_name" &&
                  new RegExp(fName.regex).test(
                    stageSelector[0].stageInfo.applicants["full_name_a_1"]
                  ) && stage.stages.journeyType === "NTC") || (!logicalFieldVal && 
                    fName.logical_field_name === "embossed_name" &&
                    new RegExp(fName.regex).test(
                      stageSelector[0].stageInfo.applicants["full_name_a_1"]
                    ) && stage.stages.journeyType === "ETC")
                ) {
                const fullName =
                  stageSelector[0].stageInfo.applicants["full_name_a_1"];
                if (fullName && fullName.length >= 19) {
                  const firstName = fullName.split(" ")[0];
                  logicalFieldVal = firstName.length >= 19 ? "" : firstName;
                } else {
                  logicalFieldVal = fullName;
                }
              }
              let residentialData: string | null = null;
              if (fName.logical_field_name === "residential_address") {
                residentialData = residentialAddress(stageSelector);
              }
              if (residentialData !== null) {
                value[fName.logical_field_name] = residentialData;
              } else {
                if (fName.logical_field_name === "passport_no") {
                  value[fName.logical_field_name] = logicalFieldVal
                    ? logicalFieldVal
                    : userInputSelector.applicants[
                        fName.logical_field_name + "_a_" + applicantNo
                      ];
                } else {
                  value[fName.logical_field_name] = logicalFieldVal
                    ? logicalFieldVal
                    : "";
                }
              }
              mandatoryFields.push(fName.logical_field_name);
              if (
                stageSelector[0].stageId === "ad-2" &&
                taxSelector &&
                taxSelector.fields
              ) {
                taxSelector.fields.forEach((field, index) => {
                  const isMandatoryField = !mandatoryFields.find(
                    (logical_name) => logical_name === field
                  );
                  let seqNo = field.split("_")[3];
                  if (isMandatoryField) {
                    if (field.substr(0, 9) === "tax_id_no") {
                      if (
                        seqNo &&
                        userInputSelector.applicants[field + "_a_" + applicantNo]
                      ) {
                        mandatoryFields.push(field);
                      }
                    } else {
                      mandatoryFields.push(field);
                    }
                  }
                  if (index % 2 === 1 && seqNo) {
                    if (
                      userInputSelector.applicants[
                        "crs_reason_code_" + seqNo + "_a_" + applicantNo
                      ]
                    ) {
                      mandatoryFields.push("crs_reason_code_" + seqNo);
                    }
                    if (
                      userInputSelector.applicants[
                        "crs_comments_" + seqNo + "_a_" + applicantNo
                      ]
                    ) {
                      mandatoryFields.push("crs_comments_" + seqNo);
                    }
                  }
                });
              }
              if (
                aliasSelector &&
                aliasSelector.fields &&
                (stageSelector[0].stageId === "ssf-1" ||
                  stageSelector[0].stageId === "bd-1")
              ) {
                aliasSelector.fields.forEach((field) => {
                  const isMandatoryField = !mandatoryFields.find(
                    (logical_name) => logical_name === field
                  );
                  if (isMandatoryField) {
                    mandatoryFields.push(field);
                  }
                });
              } 
              if (
                (
                  stageSelector[0].stageId === "bd-2")
              ) {
                  mandatoryFields.push("gender","country_of_birth","education_level","postal_code_rwb","postal_code_other","block_rwb","street_name_rwb");
                }
                if (
                  (
                    stageSelector[0].stageId === "ad-2")
                ) {
                  mandatoryFields.push("crs_reason_code","crs_comments");
                }
                if ((stageSelector[0].stageId === "bd-1")) {
                  if(!mandatoryFields.includes("residency_status")){
                    if(stageSelector[0].stageInfo.applicants.residency_status_a_1 === "CT" ||
                      stageSelector[0].stageInfo.applicants.residency_status_a_1 === "PR"){
                        mandatoryFields.push("residency_status","NRIC");
                    } else if (stageSelector[0].stageInfo.applicants.residency_status_a_1 === "FR") {
                      mandatoryFields.push("residency_status","passport_no");
                    }
                  }
                }
                if(stageSelector[0].stageId === "ssf-1"&&stageSelector[0].stageInfo.products[0].product_type === "337" && stageSelector[0]. stageInfo.products[1].product_type === "310"){
                  mandatoryFields.push("account_currency_rwb_9")
                }
                if(stageSelector[0].stageId === "ad-1"){
                  mandatoryFields.push("debit_card_request_rwb")
                }
                if(stageSelector[0].stageId === "ad-1" &&repeatCount)
                {
                  mandatoryFields.push("debit_card_request_rwb_2")
                   for(let i =0 ; i<repeatCount -1; i++){
                    mandatoryFields.push(`debit_card_request_rwb_${i+2}`)

                  }
                
                }
            }
            if(fName.logical_field_name === "mobile_number_rwb" 
            && (stageSelector[0].stageId === "ssf-1" || stageSelector[0].stageId === "bd-1")){
              const checkFields = res.fields.filter((field:any) => field.logical_field_name === "mobile_number");
              if(checkFields.length===0){
              const stageComponents = dispatch(
                getFields(stageSelector, {fields:["mobile_number_rwb"]})
            );
             res.fields.splice(4,0,stageComponents[0]);
            setFields(fields);
            additionalFields.push("mobile_number");
              }
            }
            if(fName.logical_field_name === "home_phone_number_rwb" 
            && (stageSelector[0].stageId === "bd-2")){
              const checkFields = res.fields.filter((field:any) => field.logical_field_name === "home_phone_number");
              if(checkFields.length===0){
              const stageComponents = dispatch(
                getFields(stageSelector, {fields:["home_phone_number_rwb"]})
            );
              if(authenticateType()==="myinfo"){
               
              res.fields.splice(7,0,stageComponents[0]);
                setFields(fields);
              }
              else if(authenticateType()==="manual"){
              res.fields.splice(6,0,stageComponents[0]);
                setFields(fields);
              }
            }
          }
            if(stageSelector[0].stageId === "bd-3" && res.field_set_name === "Additional Contact Details"){
              const moveItem = (array:any, fromIndex:any, toIndex:any) => {
                const updated = [...res.fields];
                const [movedItem] = updated.splice(fromIndex, 1);
                updated.splice(toIndex, 0, movedItem);
                return updated;
              };
              if(fName.logical_field_name === "mobile_1" && stageSelector[0].stageId === "bd-3" && !additionalFields.includes("mobile_1")){
                const stageComponents = dispatch(
                  getFields(stageSelector, {fields:["mobile_1"]})
                );
                res.fields.push(stageComponents[0]);
               const updatedArr =moveItem(res.fields, 15, 5);
               res.fields = updatedArr;
                additionalFields.push("mobile_1");
              }
              else if(fName.logical_field_name === "mobile_2" && stageSelector[0].stageId === "bd-3" && !additionalFields.includes("mobile_2")){
                const stageComponents = dispatch(
                  getFields(stageSelector, {fields:["mobile_2"]})
                );
                res.fields.push(stageComponents[0]);
                const updatedArr =moveItem(res.fields, 16, 7);
                res.fields = updatedArr;                
                additionalFields.push("mobile_2");
              }else if(fName.logical_field_name === "overseas_mobile1_contact_no" && stageSelector[0].stageId === "bd-3" && !additionalFields.includes("overseas_mobile1_contact_no")){
                const stageComponents = dispatch(
                  getFields(stageSelector, {fields:["overseas_mobile1_contact_no"]})
                );
                res.fields.push(stageComponents[0]);
                const updatedArr =moveItem(res.fields, 17, 9);
                res.fields = updatedArr; 
                additionalFields.push("overseas_mobile1_contact_no");
              }else if(fName.logical_field_name === "overseas_mobile2_contact_no" && stageSelector[0].stageId === "bd-3"
              && !additionalFields.includes("overseas_mobile2_contact_no")){
                const stageComponents = dispatch(
                  getFields(stageSelector, {fields:["overseas_mobile2_contact_no"]})
                );
                res.fields.push(stageComponents[0]);
                const updatedArr =moveItem(res.fields, 18, 11);
                res.fields = updatedArr; 
                additionalFields.push("overseas_mobile2_contact_no");
              }else if(fName.logical_field_name === "ofc1_number" && stageSelector[0].stageId === "bd-3"
              && !additionalFields.includes("ofc1_number")){
                const stageComponents = dispatch(
                  getFields(stageSelector, {fields:["ofc1_number"]})
                );
                res.fields.push(stageComponents[0]);
                const updatedArr =moveItem(res.fields, 19, 13);
                res.fields = updatedArr; 
                additionalFields.push("ofc1_number");
              }
              else if(fName.logical_field_name === "ofc2_number" && stageSelector[0].stageId === "bd-3"
              && !additionalFields.includes("ofc2_number")){
                const stageComponents = dispatch(
                  getFields(stageSelector, {fields:["ofc2_number"]})
                );
                res.fields.push(stageComponents[0]);
                const updatedArr =moveItem(res.fields, 20, 15);
                res.fields = updatedArr; 
                additionalFields.push("ofc2_number");
              }
              else if(fName.logical_field_name === "office_phone1_number" && stageSelector[0].stageId === "bd-3"
              && !additionalFields.includes("office_phone1_number")){
                const stageComponents = dispatch(
                  getFields(stageSelector, {fields:["office_phone1_number"]})
                );
                res.fields.push(stageComponents[0]);
                const updatedArr =moveItem(res.fields, 21, 17);
                res.fields = updatedArr; 
                additionalFields.push("office_phone1_number");
              }else if(fName.logical_field_name === "office_phone2_number" && stageSelector[0].stageId === "bd-3"
              && !additionalFields.includes("office_phone2_number")){
                const stageComponents = dispatch(
                  getFields(stageSelector, {fields:["office_phone2_number"]})
                );
                res.fields.push(stageComponents[0]);
                const updatedArr =moveItem(res.fields, 22, 19);
                res.fields = updatedArr; 
                additionalFields.push("office_phone2_number");
              }else if(fName.logical_field_name === "ohph1_number" && stageSelector[0].stageId === "bd-3"
              && !additionalFields.includes("ohph1_number")){
                const stageComponents = dispatch(
                  getFields(stageSelector, {fields:["ohph1_number"]})
                );
                res.fields.push(stageComponents[0]);
                const updatedArr =moveItem(res.fields, 23, 21);
                res.fields = updatedArr; 
                additionalFields.push("ohph1_number");
              }else if(fName.logical_field_name === "ohph2_number" && stageSelector[0].stageId === "bd-3"
              && !additionalFields.includes("ohph2_number")){
                const stageComponents = dispatch(
                  getFields(stageSelector, {fields:["ohph2_number"]})
                );
                res.fields.push(stageComponents[0]);
                const updatedArr =moveItem(res.fields, 24, 23);
                res.fields = updatedArr; 
                additionalFields.push("ohph2_number");
              }
              else if(fName.logical_field_name === "home_phone2_number" && stageSelector[0].stageId === "bd-3"
              &&!additionalFields.includes("home_phone2_number")){
                const stageComponents = dispatch(
                  getFields(stageSelector, {fields:["home_phone2_number"]})
                );
                res.fields.push(stageComponents[0]);
                const updatedArr =moveItem(res.fields, 25, 25);
                res.fields = updatedArr; 
                additionalFields.push("home_phone2_number");
              }
             
            }
          });
        }); 
        
        if(banckaMandatory && (stageId === "ad-1" || (stageId === "bd-3" && userInputSelector.applicants["credit_limit_consent_a_1"] === "N")) 
        && bancaSelector && bancaSelector.banca_product_applicable_a_1 === "Y") {
          setUserInputs({...value, ...banckaMandatory});          
        } else {
          if(stageSelector[0].stageId ==="bd-2"&& (stage.stages.journeyType === "NTB" ||  stage.stages.journeyType === "ETB") && authenticateType() ==="manual" &&stageSelector[0].stageInfo.applicants.residency_status_a_1 !== "FR"){
            if(!userInputSelector.applicants.postal_code_rwb && !userInputSelector.applicants.block_rwb && !userInputSelector.applicants.street_name_rwb){
             const updatedResponse = {...value,postal_code_rwb:"",street_name_rwb:"",block_rwb:""}
             setUserInputs(updatedResponse)
            }
          }
          else{
          setUserInputs(value);
          }
        }
        if (lastStageSelector !== "doc") {
          dispatch(fieldErrorAction.getMandatoryFields(null));
          // dispatch(stagesAction.setLastStageId(null));
        }
        dispatch(fieldErrorAction.getMandatoryFields(mandatoryFields));
      } else {
        dispatch(fieldErrorAction.getMandatoryFields(null));
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [fields, dispatch, valueSelector.value, stageSelector, banckaMandatory]);

  useEffect(() => {
    const addressMapping: Record<string, string[]> = {
      PER: ["per_country", "per_postal_code", "per_block", "per_street_name"],
      AL1: ["alt_country_1", "alt_postal_code_1", "alt_block_1", "alt_street_name_1"],
      AL2: ["alt_country_2", "alt_postal_code_2", "alt_block_2", "alt_street_name_2"],
      AL3: ["alt_country_3", "alt_postal_code_3", "alt_block_3", "alt_street_name_3"],
      AL4: ["alt_country_4", "alt_postal_code_4", "alt_block_4", "alt_street_name_4"],
      AL5: ["alt_country_5", "alt_postal_code_5", "alt_block_5", "alt_street_name_5"],
    };
 
    const allFields = Object.values(addressMapping).flat();
 
    if (userInputSelector.applicants.select_alt_addresses_a_1) {
      const selectedValues = userInputSelector.applicants.select_alt_addresses_a_1.split(",");
 
      Object.entries(addressMapping).forEach(([key, fields]) => {
        if (selectedValues.includes(key)
        &&
        !otherAddressMandatory.includes(key as never)
        ) {
          // Add mandatory fields
          dispatch(fieldErrorAction.getMandatoryFields(fields));
          dispatch(
            stagesAction.removeAddToggleField({
              removeFields: [],
              newFields: fields,
              value: "",
            })
          );
          fields.forEach((field) => {
            setUserInputs((prevUserInputs) => ({
              ...prevUserInputs,
              [field]: "",
            }));
          });
          setotherAddressMandatory((prevItems) => [...prevItems, key] as never[]);
        }
        else {
          // Remove fields if not included
          dispatch(
            stagesAction.removeAddToggleField({
              removeFields: fields,
              newFields: [],
            })
          );
        }
      });
    } else {
      // Handle case when no addresses are selected
      dispatch(
        stagesAction.removeAddToggleField({
          removeFields: allFields,
          newFields: [],
          value: "",
        })
      );
    }
   
    },[userInputSelector.applicants["select_alt_addresses_a_1"]])


  useEffect(() => {
    if (valueSelector.value !== false && stageId !== "doc") {
      let mandatoryFields:any = {};
        if (
          (stageId === "ad-1" ||
            (stageId === "bd-3" &&
              userInputSelector.applicants["credit_limit_consent_a_1"] === "N")) &&  bancaSelector 
              && bancaSelector.banca_product_applicable_a_1 === "Y"
        ) {
          bancaSelector.eligible_banca_insurances.forEach((eligibleBancaInsurance: any) => {
            let insuranceVal =
              stageSelector[0].stageInfo.applicants["insurance_consent_" + eligibleBancaInsurance + "_a_" + applicantNo];            
            mandatoryFields["insurance_consent_" + eligibleBancaInsurance] = insuranceVal || '';
            setBanckaMandatory(mandatoryFields);
          });
        }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [bancaSelector, stageId]);

  useEffect(() => {
    if (
      (stageSelector[0].stageId === "ssf-2" ||
        stageSelector[0].stageId === "ssf-1") &&
      authenticateType() !== "manual"
    ) {
      dispatch(stagesAction.mergeBasicInputs());
    } else {
      dispatch(
        stagesAction.mergeLastStageInputs(
          valueSelector.backNavigation.lastStageId
        )
      );
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentStageSelector]);

  useEffect(() => {
    stateUrl(stageId);
    if (stageSelector[0] && stageSelector[0].stageId !== "ffd-1") {
      gaTrackEvents.pageView(stageId);
    }
    if (stageId !== "ssf-1" && (getUrl.getParameterByName("auth") !== "upload" && !store.getState().stages.isDocumentUpload)) {
      trackEvents.atViewStart();
      trackEvents.triggerAdobeEvent("formStepCompletions");
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [stageId]);

  const leftMenuHandler = (selectLeftMenu: string) => {
    const stageIndex = FindIndex(stageSelector[0].stageInfo, selectLeftMenu);
    const getNewStageID =
      stageSelector[0].stageInfo.fieldmetadata.data.stages[stageIndex];
    if (getNewStageID) {
      setFields(getNewStageID.fields);
      setStageId(getNewStageID.stageId);
      dispatch(stagesAction.resetCurrentStage(getNewStageID.stageId));
      dispatch(stagesAction.updateStageId(getNewStageID.stageId));
    }
  };

  //Handle back if checks -- sonar fixes

  const ageValidStageCheck = () => {
    return (stageSelector[0].stageId === "ssf-1" ||
      stageSelector[0].stageId === "ssf-2") &&
      stageSelector
      ? true
      : false;
  };

  const otherMyinfoCheck = () => {
    let isFormValid = true;
    if (
      myinfoMissingLogicalFieldsSelector &&
      myinfoMissingLogicalFieldsSelector.length > 0
    ) {
      const isStageExits = updatedStageInputsSelector.findIndex(
        (ref: any) => ref.stageId === "ssf-2"
      );
      myinfoMissingLogicalFieldsSelector.forEach((logicalField: string) => {
        if (
          !(
            stageSelector[0].stageInfo.applicants[logicalField] ||
            userInputSelector.applicants[logicalField] ||
            (isStageExits >= 0
              ? updatedStageInputsSelector[isStageExits].applicants[
                  logicalField
                ]
              : null)
          )
        ) {
          isFormValid = false;
        }
      });
    }

    return otherMyinfoSelector.otherMyInfo &&
      otherMyinfoSelector.backNavigation.formChange &&
      otherMyinfoSelector.backNavigation.lastStageId !== null &&
      isFormValid
      ? true
      : false;
  };
  
  const navigateToNextStage = () => {
    if (authenticateType() === "myinfo" && otherMyinfoCheck()) {
      myinfoMissingFieldsSelector = false;
    }
    dispatch(userInputPayload(applicantsSelector, stageSelector));
    dispatch(stagesAction.resetNewAndOldFields());
    trackEvents.triggerAdobeEvent("ctaClick", "Continue");
    if (!((stageSelector[0].stageInfo.products[0].product_category === 'CC'
     || stageSelector[0].stageInfo.products[0].product_category === 'PL') && applicationJourney === 'NTC') &&
      authenticateType() === "myinfo" &&
      ((stageSelector[0].stageId === "ssf-1") || (stageSelector[0].stageId === "bd-1"))
      // myinfoMissingFieldsSelector &&
      // myinfoMissingLogicalFieldsSelector
    ) {
        dispatch(stagesAction.updateLastStageInput(stageSelector[0].stageId));
        let channelReferenceNumber = getTokenChno().channelRefNo? getTokenChno().channelRefNo:stageSelector[0].stageInfo.application.channel_reference;
        let stateInfofield = JSON.parse(JSON.stringify(stageSelector[0].stageInfo));
        const productCategory = stageSelector[0].stageInfo.products.map((product:any)=>product.product_category);
        const productCategories=productCategory.join(",");
        let fieldUpdate:any;
        let fullName = stateInfofield.applicants[`full_name_a_${applicantNo}`]||"";
        let nameParts =fullName.split(/\s+/);
        let firstName="";
        let lastName:"";
        const mobileNo = applicantsSelector[`mobile_number_rwb_a_${applicantNo}`]? applicantsSelector[`mobile_number_rwb_a_${applicantNo}`] + "-" + applicantsSelector[`mobile_number_a_${applicantNo}`]:
        stageSelector[0].stageInfo.applicants[`mobile_number_rwb_a_${applicantNo}`];
        const totalApplicantNo:any = localStorage.getItem("applicantNo")? localStorage.getItem("applicantNo"):1;
        // const applicantNo:any = 1;
        const rmId:any = localStorage.getItem("rmId")? localStorage.getItem("rmId"):"";

        for (let key in applicantsSelector) {
          stateInfofield.applicants[key] = applicantsSelector[key];
        }
        if(nameParts.length>=2){
          firstName=`${nameParts[0]} ${nameParts[1]}`;
          lastName=nameParts.slice(2).join("");
        }
        else if(nameParts.length===1){
          firstName =nameParts[0];
        }
        lastName=nameParts.length>1? nameParts[nameParts.length -1]:"";
        
                  if(stageSelector[0].stageInfo.products[0].product_category==="CC"&&stageSelector[0].stageInfo.products[1].product_category==="PL"){
                    fieldUpdate = {...stateInfofield,
                      applicants:{
                        ...stateInfofield.applicants,
                        account_currency_9_p_2:applicantsSelector[`account_currency_9_a_${applicantNo}`],
                        [`first_name_a_${applicantNo}`]:firstName,
                        [`middle_name_a_${applicantNo}`]:lastName,
                        [`mobile_number_rwb_a_${applicantNo}`]:mobileNo,
                        [`address_usage_indicator_a_${applicantNo}`]: "MIF",
                        product_categories:productCategories
                      }
                    }
                  }else{
                    fieldUpdate = {...stateInfofield,
                    applicants:{
                      ...stateInfofield.applicants,
                      [`first_name_a_${applicantNo}`]:stateInfofield.applicants[`full_name_a_${applicantNo}`],
                      account_currency_rwb_1_p_1:applicantsSelector[`account_currency_rwb_1_a_${applicantNo}`],
                      [`address_usage_indicator_a_${applicantNo}`]: "MIF",
                      [`closing_id_2_a_${applicantNo}`]:rmId,
                      [`mobile_number_rwb_a_${applicantNo}`]:mobileNo,
                      [`referral_id_2_a_${applicantNo}`]:rmId,
                      [`sales_id_2_a_${applicantNo}`]:rmId,
                      [`sourcing_id_2_a_${applicantNo}`]:rmId,
                      product_categories:productCategories
                    },
                    application:{
                      ...stateInfofield.application,
                      applicant_no: parseInt(applicantNo),
                      total_applicants: 1,
                      total_applicants_gb: parseInt(totalApplicantNo)
                    }
                  }
                  }
delete fieldUpdate.applicants[`account_currency_rwb_1_a_${applicantNo}`];
delete fieldUpdate.applicants[`mobile_number_a_${applicantNo}`];

dedubeUtilData(fieldUpdate,channelReferenceNumber,dispatch).then((res1:any)=>{
  let channelReferenceNumber = getTokenChno().channelRefNo? getTokenChno().channelRefNo:stageSelector[0].stageInfo.application.channel_reference;
  sessionStorage.setItem("channelRef", channelReferenceNumber);
  const productType = res1.products.map((product:any)=>product.product_type);
  if(res1){
          dispatch(dispatchLoader(true));
         
          res1 = {...res1,
                  productsInBundle:productType,
                  stage:{
                    ...res1.stage,
                    stage_id: "dud",
                  }
                };
            }
            if(parseInt(applicantNo) >1){
              delete res1.applicants.NRIC_a_1;
              delete res1.applicants.email_a_1;
              delete res1.applicants.mobile_number_a_1;
              delete res1.applicants.mobile_number_rwb_a_1;
            }
    channelReference(res1,channelReferenceNumber,dispatch).then((res2:any)=>{
      if(parseInt(localStorage.getItem("applicantNo") || '0') > 1 && applicantNo < parseInt(localStorage.getItem("applicantNo") || '0')){
        console.log("1", sessionStorage.getItem("currentStage"), localStorage.getItem("applicantNo"))
        const currentStage = parseInt(sessionStorage.getItem("currentStage") || '1') + 1;
        const applicantNo = parseInt(localStorage.getItem("applicantNo") || '1');
        console.log(currentStage, applicantNo, currentStage < applicantNo,"2");
        if (currentStage <= applicantNo) {
          sessionStorage.setItem("currentStage", JSON.stringify(currentStage));
        }
        navigate("/sg/selectflow");
      }else{
      if(res2.data){
        res2 = {...res2.data,
          applicants:{},
          productsInBundle:productType,
          stage:{
            ...res2.data.stage,
            page_id: "ssf-d",
            stage_id: "dd",
            stage_params: {current_applicant: applicantNo,is_dedupe_required:true}
          }
        }

              if(stageSelector[0].stageInfo.products[0].product_category === 'TD'){
                  delete res2.application.is_td_with_casa;       
                  delete res2.application.application_status;       
                  delete res2.application.application_date;       
                  delete res2.application.request_id;       
               }
                submitBasicDataMyInfo(res2,dispatch).then((res3:any)=>{
                let channelReferenceNumber = getTokenChno().channelRefNo;
                  if(res3){
                          dispatch(dispatchLoader(true));
                let fieldUpdate:any;
                    if(res3.applicant_documents[0].journey_type === 'ETC' || res3.applicant_documents[0].journey_type==='NTC' || res3.applicant_documents[0].journey_type==='NTB'
                    ||res3.applicant_documents[0].journey_type==='ECA' || res3.applicant_documents[0].journey_type==='ETB' || res3.applicant_documents[0].journey_type==='ECC'){
                        fieldUpdate = {...res3,
                          stage:{
                            ...res3.stage,
                            page_id: "bd-2",
                          }
                        };
                    }
              setBasicResponse(res3);

              if (res3 && res3.applicant_documents[0].journey_type) {
                dispatch(
                  stagesAction.setJourneyType(res3.applicant_documents[0].journey_type)
                );
              }
            
              if(res3.applicant_documents[0].journey_type === 'ETC' || res3.applicant_documents[0].journey_type === 'NTC' || res3.applicant_documents[0].journey_type === 'NTB'
               || res3.applicant_documents[0].journey_type === 'ETB' || res3.applicant_documents[0].journey_type === 'ECA'|| res3.applicant_documents[0].journey_type==='ECC'){
                dispatch(stagesAction.updateLastStageInput(stageSelector[0].stageId));
                setFields(
                  stageFields(
                    stageSelector,
                    "bd-2",
                    missingFieldsSelector,
                  "othermyinfo"
                  )
                );
                stateUrl("bd-2");
                dispatch(stagesAction.resetCurrentStage("bd-2"));
                dispatch(stagesAction.updateStageId("bd-2"));
              }
              }
            })}
          }
        })
      })      
    } else if (
      stageSelector[0].stageId === "rp" &&
      stageSelector[0].stageInfo.products[0].product_type === "005"
    ) {
      navigate("/otp");
    } else if (
      stageSelector[0].stageId === "bd-3" &&
      applicantsSelector.credit_limit_consent_a_1 === "Y" &&
      otpTriggerSelector
    ) {
      dispatch(stagesAction.setOtpShow(true));
    } else if (
      (stageSelector[0].stageId === "ssf-1" || stageSelector[0].stageId === "bd-1") && authenticateType() === "manual"
    ) {
      let channelReferenceNumber = getTokenChno().channelRefNo? getTokenChno().channelRefNo:stageSelector[0].stageInfo.application.channel_reference;
      const fieldUpdate = JSON.parse(JSON.stringify(stageSelector[0].stageInfo));
      const productCategory = stageSelector[0].stageInfo.products.map((product:any)=>product.product_category);
      const applicantNo:any = localStorage.getItem("applicantNo")? localStorage.getItem("applicantNo"):1;
      const mobileNo = applicantsSelector["mobile_number_rwb_a_1"]? applicantsSelector["mobile_number_rwb_a_1"] + "-" + applicantsSelector["mobile_number_a_1"]:
                        stageSelector[0].stageInfo.applicants.mobile_number_rwb_a_1;
      const rmId:any = localStorage.getItem("rmId")? localStorage.getItem("rmId"):"";

      const productCategories=productCategory.join(",");
      for (let key in applicantsSelector) {
        fieldUpdate.applicants[key] = applicantsSelector[key];
      }
      let stateInfofield = {...fieldUpdate,
        applicants:{
          ...fieldUpdate.applicants,
          address_usage_indicator_a_1: "NEW",
          account_currency_rwb_1_p_1:applicantsSelector["account_currency_rwb_1_a_1"],
          referral_id_2_a_1: rmId,
          sales_id_2_a_1:rmId,
          closing_id_2_a_1:rmId,
          sourcing_id_2_a_1:rmId,
          mobile_number_rwb_a_1:mobileNo,
          product_categories:productCategories
        },
        application:{
          ...fieldUpdate.application,
          applicant_no: parseInt(applicantNo),
          total_applicants: parseInt(applicantNo),
          total_applicants_gb: parseInt(applicantNo)
        },
        td_multi_currency_products:td_multi_currency_products
      };
      delete stateInfofield.applicants.account_currency_rwb_1_a_1;
      delete stateInfofield.applicants.mobile_number_a_1;

      // submitBasicData(stateInfofield,channelReferenceBasicData,dispatch).then((response)=>{
        dedubeUtilData(stateInfofield,channelReferenceNumber,dispatch).then((res1:any)=>{
          let channelReferenceNumber = getTokenChno().channelRefNo? getTokenChno().channelRefNo:stageSelector[0].stageInfo.application.channel_reference;
          const productType = res1.products.map((product:any)=>product.product_type);
          if(res1){
                  dispatch(dispatchLoader(true));
                  res1 = {...res1,
                          productsInBundle:productType,
                          stage:{
                            ...res1.stage,
                            stage_id: "dud",
                          }
                        };
                    }
                    if(parseInt(applicantNo) >1){
                      delete res1.applicants.NRIC_a_1;
                      delete res1.applicants.email_a_1;
                      delete res1.applicants.mobile_number_a_1;
                      delete res1.applicants.mobile_number_rwb_a_1;
                    }
                        channelReference(res1,channelReferenceNumber,dispatch).then((res2:any)=>{
                          if(parseInt(localStorage.getItem("applicantNo") || '0') > 1 && applicantNo < parseInt(localStorage.getItem("applicantNo") || '0')){
                            console.log("1", sessionStorage.getItem("currentStage"), localStorage.getItem("applicantNo"))
                            const currentStage = parseInt(sessionStorage.getItem("currentStage") || '1') + 1;
                            const applicantNo = parseInt(localStorage.getItem("applicantNo") || '1');
                            console.log(currentStage, applicantNo, currentStage < applicantNo,"2");
                            if (currentStage <= applicantNo) {
                              sessionStorage.setItem("currentStage", JSON.stringify(currentStage));
                            }
                            navigate("/sg/selectflow");
                          }
                  else{if(res2.data){
                res2 = {...res2.data,
                  applicants:{},
                  productsInBundle:productType,
                  stage:{
                    ...res2.data.stage,
                    page_id: "ssf-d",
                    stage_id: "dd",
                    stage_params: {current_applicant: applicantNo,is_dedupe_required:true}
                  }
                }
                submitBasicData(res2,channelReferenceNumber,dispatch).then((response:any)=>{
                  if(response){
                          dispatch(dispatchLoader(true));
              setBasicResponse(response);           
            if(response.applicant_documents[0].journey_type === 'ETC'||response.applicant_documents[0].journey_type === 'NTC' || response.applicant_documents[0].journey_type === 'NTB'
            || response.applicant_documents[0].journey_type === 'ETB' || response.applicant_documents[0].journey_type === 'ECA'|| response.applicant_documents[0].journey_type==='ECC'){
            dispatch(
              stagesAction.setJourneyType(response.applicant_documents[0].journey_type)
            );
            dispatch(stagesAction.updateLastStageInput(stageSelector[0].stageId));
            setFields(
              stageFields(
                stageSelector, 
                "bd-2"
              )
            );
            stateUrl("bd-2");
            dispatch(stagesAction.resetCurrentStage("bd-2")); 
            dispatch(stagesAction.updateStageId("bd-2"));
          }
        // else if (response.applicant_documents[0]?.journey_type === 'ETC'){
        //   dispatch(
        //     stagesAction.setJourneyType(response.applicant_documents[0].journey_type)
        //   );
        //   dispatch(stagesAction.updateLastStageInput(stageSelector[0].stageId));
        //             setFields(
        //     stageFields(
        //       stageSelector,
        //       "ad-2"
        //     )
        //   );
        //   stateUrl("ad-2");
        //   dispatch(stagesAction.resetCurrentStage("ad-2"));
        //   dispatch(stagesAction.updateStageId("ad-2"));   
        // }
      }
     })
    }}
  })
})
}
    else if ((stageSelector[0].stageId === "bd-2"||stageSelector[0].stageId === "ld-1") && (stage.stages.journeyType === "NTC" || stage.stages.journeyType === "NTB"
    || stage.stages.journeyType === "ETB" || stage.stages.journeyType === "ECA" || stage.stages.journeyType === "ECC"||stage.stages.journeyType === 'ETC')) {
      let channelReferenceBasicData = stageSelector[0].stageInfo.application.channel_reference;
      const fieldUpdate = JSON.parse(JSON.stringify(basicResponse));
      if(authenticateType() === "myinfo"){
      for (let key in applicantsSelector) {
        if(applicantsSelector[key]!=="" && typeof applicantsSelector[key]==="string"){
          if(key !== "marital_status_a_1"){
          fieldUpdate.applicants[key] = applicantsSelector[key];
          }  
       }
       }}
        else {
        for (let key in applicantsSelector) {
          if(applicantsSelector[key]!=="" && typeof applicantsSelector[key]==="string"){
            fieldUpdate.applicants[key] = applicantsSelector[key];
          }
      }}
      let stateInfofield = {
        ...fieldUpdate,
        stage:{
        ...fieldUpdate.stage,
        page_id: "bd-2",
      }};
            channelReference(stateInfofield,channelReferenceBasicData,dispatch)
      .then((response:any) =>{
        if(response){
                    channelReference({...response.data,
            stage:{
              ...response.data.stage,
              page_id: "bd-3",
            }},channelReferenceBasicData,dispatch).then((res:any)=>{
              if(res){
                setBasicResponse(res.data);
                dispatch(
                  stagesAction.getStage({
                    id: "setApplicantList",
                    formConfig: res.data.applicants
                  })
                );
                dispatch(stagesAction.updateLastStageInput(stageSelector[0].stageId));
                                  setFields(
                  stageFields(
                    stageSelector, 
                    "bd-3"
                  )
                );
                stateUrl("bd-3");
                dispatch(stagesAction.resetCurrentStage("bd-3"));
                dispatch(stagesAction.updateStageId("bd-3"));
                const isStageExits = updatedStageInputsSelector.findIndex(
                  (ref: any) => ref.stageId === "bd-3"
                );
                if(isStageExits){
                  setIsFormValid(true)
                }else{
                  setIsFormValid(false);
                }
              }
            })
        }
      })
    }
    else if (stageSelector[0].stageId === "bd-3" && (stage.stages.journeyType === "NTC" || stage.stages.journeyType === "NTB"
    || stage.stages.journeyType === "ETB" || stage.stages.journeyType === "ECA" || stage.stages.journeyType === "ECC"||stage.stages.journeyType === 'ETC')) {
      let channelReferenceBasicData = stageSelector[0].stageInfo.application.channel_reference;
      const fieldUpdate = JSON.parse(JSON.stringify(basicResponse));
      for (let key in applicantsSelector) {
        if(applicantsSelector[key]!=="" && typeof applicantsSelector[key]==="string"){
          fieldUpdate.applicants[key] = applicantsSelector[key];
        }
      }
      let stateInfofield:any;
      // if(cpfContributionData.length > 0){
      //   stateInfofield = {...fieldUpdate,
      //     applicants:{
      //       ...fieldUpdate.applicants,
      //       "noa_valid_a_1": "Y",
      //       "cpf_valid_a_1": "Y",
      //     },
      //     stage: {
      //       ...fieldUpdate.stage,
      //       workflow_stage_id: null,
      //         page_id: "bd-3",
      //         stage_params: {
      //           ...fieldUpdate.stage.stage_params,
      //             is_dedupe_required: false,
      //             current_applicant: 1,
      //         },
      //     },
      //   };
      // }
      // else{
        const mobile1 = applicantsSelector["mobile_1_a_1"]? applicantsSelector["mobile_1_a_1"] + "-" + applicantsSelector["mobile_1_add_a_1"] : stageSelector[0].stageInfo.applicants.mobile_1_a_1;
        const mobile2 = applicantsSelector["mobile_2_a_1"]? applicantsSelector["mobile_2_a_1"] + "-" + applicantsSelector["mobile_2_add_a_1"] : stageSelector[0].stageInfo.applicants.mobile_2_a_1;
        const ofc1 = applicantsSelector["ofc1_number_a_1"]? applicantsSelector["ofc1_number_a_1"] + "-" + applicantsSelector["ofc1_a_1"] : stageSelector[0].stageInfo.applicants.ofc1_number_a_1;
        const ofc2 = applicantsSelector["ofc2_number_a_1"]? applicantsSelector["ofc2_number_a_1"] + "-" + applicantsSelector["ofc2_a_1"] : stageSelector[0].stageInfo.applicants.ofc2_number_a_1;
        const officePhone1 = applicantsSelector["office_phone1_number_a_1"]? applicantsSelector["office_phone1_number_a_1"] + "-" + applicantsSelector["office_phone1_a_1"] : stageSelector[0].stageInfo.applicants.office_phone1_number_a_1;
        const officePhone2 = applicantsSelector["office_phone2_number_a_1"]? applicantsSelector["office_phone2_number_a_1"] + "-" + applicantsSelector["office_phone2_a_1"] : stageSelector[0].stageInfo.applicants.office_phone2_number_a_1;
        const ohph1 = applicantsSelector["ohph1_number_a_1"]? applicantsSelector["ohph1_number_a_1"] + "-" + applicantsSelector["ohph1_a_1"] : stageSelector[0].stageInfo.applicants.ohph1_number_a_1;
        const ohph2 = applicantsSelector["ohph2_number_a_1"]? applicantsSelector["ohph2_number_a_1"] + "-" + applicantsSelector["ohph2_a_1"] : stageSelector[0].stageInfo.applicants.ohph2_number_a_1;
        const overseasNo1 = applicantsSelector["overseas_mobile1_contact_no_a_1"]? applicantsSelector["overseas_mobile1_contact_no_a_1"] + "-" + applicantsSelector["overseas_mobile1_a_1"] : stageSelector[0].stageInfo.applicants.overseas_mobile1_contact_no_a_1;
        const overseasNo2 = applicantsSelector["overseas_mobile2_contact_no_a_1"]? applicantsSelector["overseas_mobile2_contact_no_a_1"] + "-" + applicantsSelector["overseas_mobile2_a_1"] : stageSelector[0].stageInfo.applicants.overseas_mobile2_contact_no_a_1;
        const houseNo2 = applicantsSelector["home_phone2_number_a_1"]? applicantsSelector["home_phone2_number_a_1"] + "-" + applicantsSelector["home_phone2_a_1"] : stageSelector[0].stageInfo.applicants.home_phone2_number_a_1;
        let ofcCountry = applicantsSelector["ofc_country_a_1"]? applicantsSelector["ofc_country_a_1"] : stageSelector[0].stageInfo.applicants.ofc_country_a_1;
        const ofcPostal = applicantsSelector["ofc_postal_code_a_1"]? applicantsSelector["ofc_postal_code_a_1"] : stageSelector[0].stageInfo.applicants.ofc_postal_code_a_1;
        const ofcBlock = applicantsSelector["ofc_block_a_1"]? applicantsSelector["ofc_block_a_1"] : stageSelector[0].stageInfo.applicants.ofc_block_a_1;
        const ofcBuildingName = applicantsSelector["ofc_building_name_a_1"]? applicantsSelector["ofc_building_name_a_1"] : stageSelector[0].stageInfo.applicants.ofc_building_name_a_1;
        const ofcStreetName = applicantsSelector["ofc_street_name_a_1"]? applicantsSelector["ofc_street_name_a_1"] : stageSelector[0].stageInfo.applicants.ofc_street_name_a_1;
        const ofcUnitNo = applicantsSelector["ofc_unit_no_a_1"]? applicantsSelector["ofc_unit_no_a_1"] : stageSelector[0].stageInfo.applicants.ofc_unit_no_a_1;
        let ofcAddress :string = "";

        if (ofcBlock && ofcStreetName && ofcPostal && ofcCountry) {
          if (ofcCountry === "SG") {
            ofcCountry = "Singapore";
          }
          ofcAddress = [
            ofcBlock,
            ofcBuildingName,
            ofcStreetName,
            ofcUnitNo,
            ofcPostal,
            ofcCountry
          ]
            .filter(Boolean)
            .join(",");
        }
        stateInfofield = {...fieldUpdate,
        applicants:{
          ...fieldUpdate.applicants,
          "noa_valid_a_1": "N",
          "cpf_valid_a_1": "N",
          "mobile_1_a_1": mobile1 || null,
          "mobile_2_a_1": mobile2 || null,
          "ofc1_number_a_1": ofc1 || null,
          "ofc2_number_a_1": ofc2 || null,
          "office_phone1_number_a_1": officePhone1 || null,
          "office_phone2_number_a_1": officePhone2 || null,
          "ohph1_number_a_1": ohph1 || null,
          "ohph2_number_a_1": ohph2 || null,
          "overseas_mobile1_contact_no_a_1": overseasNo1 || null,
          "overseas_mobile2_contact_no_a_1": overseasNo2 || null,
          "office_address_rwb_a_1": ofcAddress || null,
          "ofc_city_a_1": ofcAddress? 'Singapore': null,
          "home_phone2_number_a_1": houseNo2 || null,
          "preferred_contact_per_email_a_1": "COL",
          "ofc_country_a_1": ofcCountry|| null,
          "ofc_postal_code_a_1": ofcPostal || null,
          "ofc_block_a_1": ofcBlock || null,
          "ofc_building_name_a_1": ofcBuildingName || null,
          "ofc_street_name_a_1": ofcStreetName || null,
          "ofc_unit_no_a_1": ofcUnitNo || null
        },
        stage: {
          ...fieldUpdate.stage,
          workflow_stage_id: null,
            page_id: "bd-3",
            stage_params: {
              ...fieldUpdate.stage.stage_params,
                is_dedupe_required: false,
                current_applicant: 1,
            },
        },
      // }
    };
    delete stateInfofield.applicants.mobile_1_add_a_1;
    delete stateInfofield.applicants.mobile_2_add_a_1;
    delete stateInfofield.applicants.ofc1_number_a_1;
    delete stateInfofield.applicants.ofc2_number_a_1;
    delete stateInfofield.applicants.office_phone1_a_1;
    delete stateInfofield.applicants.office_phone2_a_1;
    delete stateInfofield.applicants.ohph1_a_1;
    delete stateInfofield.applicants.ohph2_a_1;
    delete stateInfofield.applicants.overseas_mobile1_a_1;
    delete stateInfofield.applicants.overseas_mobile2_a_1;
    delete stateInfofield.applicants.houseNo2;
        submitBasicDataDocument(stateInfofield,channelReferenceBasicData,dispatch).then((response:any)=>{
          setBasicResponse(response.data)
          if(response && response.data.applicant_documents[0]?.document_list?.length>0){
                        channelReference({...response.data,
              stage:{
                ...response.data.stage,
                page_id: "doc",
              }},channelReferenceBasicData,dispatch).then((response:any)=>{
              if(response){
              setBasicResponse(response.data);
               dispatch(stagesAction.updateLastStageInput(stageSelector[0].stageId));
               dispatch(
                 stagesAction.getStage({
                     id: "setDocumentList",
                     formConfig: response.data,
                   }))
               stateUrl("doc");
               dispatch(stagesAction.resetCurrentStage("doc"));
               dispatch(stagesAction.updateStageId("doc"));
             }
          })
        }
        else{
          let channelReferenceBasicData = stageSelector[0].stageInfo.application.channel_reference;
            const fieldUpdate = JSON.parse(JSON.stringify(basicResponse));
            for (let key in applicantsSelector) {
              if(applicantsSelector[key]!=="" && typeof applicantsSelector[key]==="string"){
                fieldUpdate.applicants[key] = applicantsSelector[key];
              }
            }
            let state:any;
            if(stageSelector[0].stageInfo.products[0].product_category==="CC"
              &&stageSelector[0].stageInfo.products[1].product_category==="CC"){
                    state="ad-1"
            }else{
                    state="ad-2"
            }
            let stateInfofield = {
              ...fieldUpdate,
              applicants: {
                ...fieldUpdate.applicants,
                ofcAddress: ofcAddress || null,
                ofc_city_a_1: ofcAddress ? 'Singapore' : null,
              },
              stage: {
                ...fieldUpdate.stage,
                page_id: state,
              },
            };
                        channelReference(stateInfofield,channelReferenceBasicData,dispatch).then((response)=>{
              setBasicResponse(response.data);
              if(response){
               dispatch(lovRequests(stageSelector[0].stageInfo, state));
                dispatch(stagesAction.updateLastStageInput(stageSelector[0].stageId));
                setFields(
                  stageFields(
                    stageSelector,
                    state
                  )
                );
                stateUrl(state);
                dispatch(stagesAction.resetCurrentStage(state));
                dispatch(stagesAction.updateStageId(state));
          }
        })      
        }
    });
     }
     else if (stageSelector[0].stageId === "ad-2" && (stage.stages.journeyType === "NTC" || stage.stages.journeyType === "NTB"
     || stage.stages.journeyType === "ETB" || stage.stages.journeyType === "ECA" || stage.stages.journeyType === "ECC" || stage.stages.journeyType === "ETC")) {
      let channelReferenceBasicData = stageSelector[0].stageInfo.application.channel_reference;
      const fieldUpdate = JSON.parse(JSON.stringify(basicResponse));
      let stateInfofield;
      for (let key in applicantsSelector) {
        if(applicantsSelector[key]!=="" && typeof applicantsSelector[key]==="string"){
          fieldUpdate.applicants[key] = applicantsSelector[key];
        }
      }
      stateInfofield = {...fieldUpdate,
          stage: {
            ...fieldUpdate.stage,
            workflow_stage_id: null,
              page_id: "ad-2",
              stage_params: {
                ...fieldUpdate.stage.stage_params,
                  is_dedupe_required: false,
                  current_applicant: 1,
              },
          },
      };
            channelReference(stateInfofield,channelReferenceBasicData,dispatch).then((response)=>{
        setBasicResponse(response.data);
        if(response){
          dispatch(
            stagesAction.getStage({
              id: "setApplicantList",
              formConfig: response.data.applicants
            })
          );
          dispatch(stagesAction.updateLastStageInput(stageSelector[0].stageId));
          setFields(
            stageFields(
              stageSelector,
              "ad-1"
            )
          );
          stateUrl("ad-1");
          dispatch(stagesAction.resetCurrentStage("ad-1"));
          dispatch(stagesAction.updateStageId("ad-1"));
    }
  })   
     }
     else if (stageSelector[0].stageId ==="rp") 
    {
     const channelReference = stageSelector[0].stageInfo.application.channel_reference;
     const fieldUpdate = JSON.parse(JSON.stringify(basicResponse));
     for (let key in applicantsSelector) {
      if(applicantsSelector[key]!=="" && typeof applicantsSelector[key]==="string"){
       fieldUpdate.applicants[key] = applicantsSelector[key];
      }
     }
     let updatedField = {...fieldUpdate,
              stage: {
                ...fieldUpdate.stage,
                "stage_id": "FFD",
                "page_id": "rp",
              }
    }
     thankYouPage(updatedField,channelReference,dispatch)
     .then((response) =>{
      if(response){
       dispatch(stagesAction.updateLastStageInput(stageSelector[0].stageId));
       setFields(
         stageFields(
           stageSelector, 
           "ffd-1"
         ));
         stateUrl("ffd-1");
       dispatch(stagesAction.resetCurrentStage("ffd-1"));
       dispatch(stagesAction.updateStageId("ffd-1"));  
         }
     })
     navigate("/sg/thankyou");
     }
     
    else if (stageSelector[0].stageId === "ad-1" && (stage.stages.journeyType === "NTC" || stage.stages.journeyType === "NTB"
    || stage.stages.journeyType === "ETB" || stage.stages.journeyType === "ECA" || stage.stages.journeyType === "ECC" || stage.stages.journeyType === "ETC"))
    {
      let channelReferenceBasicData = stageSelector[0].stageInfo.application.channel_reference;
      const fieldUpdate = JSON.parse(JSON.stringify(basicResponse));
      for (let key in applicantsSelector) {
        if(applicantsSelector[key]!=="" && typeof applicantsSelector[key]==="string"){
          fieldUpdate.applicants[key] = applicantsSelector[key];
        }
      }
      const deResDoc = JSON.parse(JSON.stringify(documentStore.responseDocuments));
      delete fieldUpdate.applicants.purpose_of_account_a_1;
      delete fieldUpdate.applicants.fff_journey;
      delete fieldUpdate.applicants.account_currency_rwb_1_a_1;
      let stateInfofield = {
        ...fieldUpdate,
        applicant_documents:deResDoc.length?[
          ...deResDoc,
        ]:fieldUpdate.applicant_documents,
        applicants: {
          ...fieldUpdate.applicants,
          purpose_of_account_p_2: applicantsSelector["purpose_of_account_a_1"],
          work_type_a_1: stageSelector[0].stageInfo.applicants.work_type_a_1,
          purpose_of_account_rwb_p_1: fieldUpdate.applicants.purpose_of_account_rwb_a_1,
          short_name_p_1: fieldUpdate.applicants.short_name_a_1,
          "city_rwb_a_1": "Singapore",
          account_level_mailing_address_p_1: fieldUpdate.applicants.account_level_mailing_address_a_1,
          
        },
        stage: {
          ...fieldUpdate.stage,
          stage_id: 'AD',
          page_id: "ad-1",
        },
      };
    
      delete stateInfofield.applicants.purpose_of_account_rwb_a_1;
      delete stateInfofield.applicants.account_level_mailing_address_a_1;
      delete stateInfofield.applicants.short_name_a_1;
      creditToTrust(stateInfofield,channelReferenceBasicData,dispatch).then((response:any)=>{
        if(response){ 
          setBasicResponse(response.data);
          if(response && ((stageSelector[0].stageInfo.applicants.country_of_tax_residence_a_1=='SG' && stageSelector[0].stageInfo.applicants.tax_resident_of_other_country_a_1=="Y") || (stageSelector[0].stageInfo.applicants.country_of_tax_residence_a_1!=='SG' && stageSelector[0].stageInfo.applicants.tax_id_no_a_1!=="") )&& response.data.applicant_documents[0]?.document_list?.length>0){
               dispatch(stagesAction.updateLastStageInput(stageSelector[0].stageId));
               dispatch(
                 stagesAction.getStage({
                     id: "setDocumentList",
                     formConfig: response.data,
                   }))
               stateUrl("doc-2");
               dispatch(stagesAction.resetCurrentStage("doc-2"));
               dispatch(stagesAction.updateStageId("doc-2"));
           }
          else{    
            const stageTo = CONSTANTS.STAGE_NAMES.RP;
            dispatch(stagesAction.updateLastStageInput(stageSelector[0].stageId));
            stateUrl("rp");
            dispatch(stagesAction.resetCurrentStage("rp"));
            dispatch(stagesAction.updateStageId(stageTo));  
            dispatch(dispatchLoader(false));
            }
          } else {
            defaultError();
          }
      })
    }

    else if (stageSelector[0].stageId ==="ACD") 
    {
     const channelReferenceBasicData = stageSelector[0].stageInfo.application.channel_reference;
     const fieldUpdate = JSON.parse(JSON.stringify(basicResponse));
     for (let key in applicantsSelector) {
       fieldUpdate.applicants[key] = applicantsSelector[key];
     }
     offerData(fieldUpdate,channelReferenceBasicData,dispatch).then((response:any)=>{
      if(response.status===200){
        let stateInfofield = {...response.data,
          stage:{
          ...response.data.stage,
          stage_id:'FFD',
          page_id: "rp",
        }};
          channelReference(stateInfofield,response.data.application.channel_reference,dispatch).then((response:any)=>{
          if(response){
            // dispatch(
            //   stagesAction.getStage({
            //       id: "rp",
            //       formConfig: response.data,
            //  }));
             const stageTo = CONSTANTS.STAGE_NAMES.RP;
             dispatch(stagesAction.updateStageId(stageTo));
             stateUrl("rp");
             dispatch(stagesAction.resetCurrentStage("rp"));
             dispatch(stagesAction.updateStageId("rp"));  
      }
    })
      }
     })
    }
    else {
      let stagePayload = applicantsSelector;
      const otpAuth = false;
      dispatch(
        submitRequest(
          stagePayload,
          stageSelector[0],
          stageSelectorThankYou,
          valueSelector,
          applicationJourney,
          lovSelector,
          userInputSelector,
          errorSelector,
          otpAuth,
          false,
          false,
          bancaSelector
        )
      )
        .then((stage: string) => {
          setOtherMyinfo(false);
          if (stage === "ffd-1") {
            navigate("/sg/thankyou");
          } else {
            setStageId(stage);
          }
          pageScrollTop();
        })
        .catch((_err: any) => {
          // do nothing
        });
    }
  };

  const myinfoFieldDispatch = () => {
    if (stageSelector && stageSelector.length > 0) {
      if (stageSelector[0].stageId === "ssf-1") {
        dispatch(stagesAction.updateLastStageInput(stageSelector[0].stageId));
      }
      if (
        stageSelector[0].stageId !== "ssf-1" &&
        Object.values(applicantsSelector).length > 0
      ) {
        dispatch(userInputPayload(applicantsSelector, stageSelector, "ssf-2"));
      }
      setFields(
        stageFields(
          stageSelector,
          "ssf-2",
          missingFieldsSelector,
          "othermyinfo"
        )
      );
      setOtherMyinfo(true);
      if (missingFieldsSelector !== null) {
        dispatch(stagesAction.removeMandatoryFields([]));
      }
      dispatch(stagesAction.revertMyinfoMandatoryFields(stageSelector));
    }
  };

//when choose multiple other addresses remove other mandataroryfields at BD-2 Personal details page
//Start  
const  deleteAddressFields=(userInputs: any, fields: string[])=> {
    fields.forEach(field => delete userInputs[field]);
}

const fieldsToDelete:any = {
  "": ["per_country", "per_postal_code", "per_block", "per_street_name", "alt_country_1", "alt_postal_code_1", "alt_block_1", "alt_street_name_1", "alt_country_2", "alt_postal_code_2", "alt_block_2", "alt_street_name_2", "alt_country_3", "alt_postal_code_3", "alt_block_3", "alt_street_name_3", "alt_country_4", "alt_postal_code_4", "alt_block_4", "alt_street_name_4", "alt_country_5", "alt_postal_code_5", "alt_block_5", "alt_street_name_5"],
  "PER": ["alt_country_1", "alt_postal_code_1", "alt_block_1", "alt_street_name_1", "alt_country_2", "alt_postal_code_2", "alt_block_2", "alt_street_name_2", "alt_country_3", "alt_postal_code_3", "alt_block_3", "alt_street_name_3", "alt_country_4", "alt_postal_code_4", "alt_block_4", "alt_street_name_4", "alt_country_5", "alt_postal_code_5", "alt_block_5", "alt_street_name_5"],
  "AL1": ["per_country", "per_postal_code", "per_block", "per_street_name", "alt_country_2", "alt_postal_code_2", "alt_block_2", "alt_street_name_2", "alt_country_3", "alt_postal_code_3", "alt_block_3", "alt_street_name_3", "alt_country_4", "alt_postal_code_4", "alt_block_4", "alt_street_name_4", "alt_country_5", "alt_postal_code_5", "alt_block_5", "alt_street_name_5"],
  "AL2": ["per_country", "per_postal_code", "per_block", "per_street_name", "alt_country_1", "alt_postal_code_1", "alt_block_1", "alt_street_name_1", "alt_country_3", "alt_postal_code_3", "alt_block_3", "alt_street_name_3", "alt_country_4", "alt_postal_code_4", "alt_block_4", "alt_street_name_4", "alt_country_5", "alt_postal_code_5", "alt_block_5", "alt_street_name_5"],
  "AL3": ["per_country", "per_postal_code", "per_block", "per_street_name", "alt_country_1", "alt_postal_code_1", "alt_block_1", "alt_street_name_1","alt_country_2", "alt_postal_code_2", "alt_block_2", "alt_street_name_2", "alt_country_4", "alt_postal_code_4", "alt_block_4", "alt_street_name_4", "alt_country_5", "alt_postal_code_5", "alt_block_5", "alt_street_name_5"],
  "AL4": ["per_country", "per_postal_code", "per_block", "per_street_name", "alt_country_1", "alt_postal_code_1", "alt_block_1", "alt_street_name_1","alt_country_2", "alt_postal_code_2", "alt_block_2", "alt_street_name_2", "alt_country_3", "alt_postal_code_3", "alt_block_3", "alt_street_name_3", "alt_country_5", "alt_postal_code_5", "alt_block_5", "alt_street_name_5"],
  "AL5": ["per_country", "per_postal_code", "per_block", "per_street_name", "alt_country_1", "alt_postal_code_1", "alt_block_1", "alt_street_name_1","alt_country_2", "alt_postal_code_2", "alt_block_2", "alt_street_name_2", "alt_country_3", "alt_postal_code_3", "alt_block_3", "alt_street_name_3", "alt_country_4", "alt_postal_code_4", "alt_block_4", "alt_street_name_4"]
};
//End
  const removeUserInputData = (): any => {
    return async () => {
      madatoryFieldSelector.forEach((data: string) => {

        if (userInputs[data]) {
          delete userInputs[data];
          delete userInputs["first_name"];
          delete userInputs["office_phone_number"];
          delete userInputs["credit_limit_consent_info_5"];
          delete userInputs["credit_limit_consent_info_8"];
        if(stageSelector[0].stageId==='ssf-1'){
            delete userInputs["account_currency_rwb_1"];
          }
          if(stageSelector[0].stageId==='ad-2'){
            delete userInputs["job_title"];
            delete userInputs["name_of_employer"];
            delete userInputs["nature_of_employer"];
            delete userInputs["name_of_business"];
            delete userInputs["office_phone_number"];
            delete userInputs["embossed_name"]
            delete userInputs["embossed_name_1"]
            delete userInputs["deposit_insurance_scheme"]
            delete userInputs["office_email_1"];
            delete userInputs["office_email_2"];
            delete userInputs["per_email_1"];
            delete userInputs["per_email_2"];
            delete userInputs["crs_reason_code"];
            delete userInputs["casa_fatca_declaration"];
            delete userInputs["home_phone2"];
            delete userInputs["mobile_1_add"];
            delete userInputs["mobile_2_add"];
            delete userInputs["ofc1"];
            delete userInputs["ofc2"];
            delete userInputs["office_phone1"];
            delete userInputs["office_phone2"];
            delete userInputs["ohph1"];
            delete userInputs["ohph2"];
            delete userInputs["overseas_mobile1"];
            delete userInputs["overseas_mobile2"];
            delete userInputs["account_level_mailing_address"];
            delete userInputs["consolidated_stmt_required"];
            delete userInputs["purpose_of_account_rwb"];
            delete userInputs["declare_preferred_contacts"];
            delete userInputs["ofc_block"];
            delete userInputs["ofc_postal_code"];
            delete userInputs["ofc_street_name"];
            delete userInputs["work_type"];
            delete userInputs["account_level_mailing_address_2"];
            delete userInputs["purpose_of_account_rwb_2"];
            delete userInputs["account_level_mailing_address_3"];
            delete userInputs["purpose_of_account_rwb_3"];
            delete userInputs["account_level_mailing_address_4"];
            delete userInputs["purpose_of_account_rwb_4"];
            delete userInputs["account_level_mailing_address_5"];
            delete userInputs["purpose_of_account_rwb_5"];
            delete userInputs["account_level_mailing_address_6"];
            delete userInputs["purpose_of_account_rwb_6"];
            delete userInputs["account_level_mailing_address_7"];
            delete userInputs["purpose_of_account_rwb_7"];
            delete userInputs["account_level_mailing_address_8"];
            delete userInputs["purpose_of_account_rwb_8"];
            delete userInputs["alt_block_1"];
            delete userInputs["alt_block_2"];
            delete userInputs["alt_block_3"];
            delete userInputs["alt_block_4"];
            delete userInputs["alt_block_5"];
            delete userInputs["alt_street_name_1"];
            delete userInputs["alt_street_name_2"];
            delete userInputs["alt_street_name_3"];
            delete userInputs["alt_street_name_4"];
            delete userInputs["alt_street_name_5"];
            delete userInputs["per_block"];
            delete userInputs["per_street_name"];
            delete userInputs["account_level_mailing_address_2"];
            delete userInputs["purpose_of_account_rwb_2"];
            delete userInputs["account_level_mailing_address_3"];
            delete userInputs["purpose_of_account_rwb_3"];
            delete userInputs["account_level_mailing_address_4"];
            delete userInputs["purpose_of_account_rwb_4"];
            delete userInputs["account_level_mailing_address_5"];
            delete userInputs["purpose_of_account_rwb_5"];
            delete userInputs["account_level_mailing_address_6"];
            delete userInputs["purpose_of_account_rwb_6"];
            delete userInputs["account_level_mailing_address_7"];
            delete userInputs["purpose_of_account_rwb_7"];
            delete userInputs["account_level_mailing_address_8"];
            delete userInputs["purpose_of_account_rwb_8"];
            delete userInputs["work_type"];


            delete userInputs["crs_comments"];
            delete userInputs["td_fund_account_choice"];
            delete userInputs["td_rollover"];
            delete userInputs["td_term_type"];
          }
          if(stageSelector[0].stageId==="ad-1"){
              delete userInputs["job_title"];
              delete userInputs["name_of_employer"];
              delete userInputs["nature_of_employer"];
              delete userInputs["name_of_business"];
              delete userInputs["office_phone_number"];
              delete userInputs["declare_preferred_contacts"];
              delete userInputs["consolidated_stmt_required"];
              delete userInputs["insurance_consent_SG-PA"];
              delete userInputs["account_currency_rwb_1"];
            }
            if(stageSelector[0].stageId==="doc-2"){
               delete userInputs["job_title"];
              delete userInputs["name_of_employer"];
              delete userInputs["nature_of_employer"];
              delete userInputs["name_of_business"];
              delete userInputs["office_phone_number"];
              delete userInputs["declare_preferred_contacts"];
              delete userInputs["consolidated_stmt_required"];
              delete userInputs["insurance_consent_SG-PA"];
              delete userInputs["account_currency_rwb_1"];
            }
            if(stageSelector[0].stageId==="bd-1"){
              delete userInputs["mobile_number"];
              delete userInputs["mobile_number_rwb"];
              delete userInputs["application_branch"];
              delete userInputs["arm_code_rwb"]
              delete userInputs["segment_code"]
              delete userInputs["service_indicator"]
              delete userInputs["sub_segment"]
            }
            if (stageSelector[0].stageId === "bd-2") {
              delete userInputs["application_branch"];
              delete userInputs["application_sourcing"];
              delete userInputs["arm_code_rwb"];
              delete userInputs["declare_preferred_contacts"];
              delete userInputs["segment_code"];
              delete userInputs["service_indicator"];
              delete userInputs["sub_segment"];
              delete userInputs["ofc_postal_code"];
              delete userInputs["ofc_street_name"];
              delete userInputs["ofc_block"];
              delete userInputs["alt_address_rwb_1"];
              delete userInputs["alt_address_rwb_2"];
              delete userInputs["alt_address_rwb_3"];
              delete userInputs["alt_address_rwb_4"];
              delete userInputs["alt_address_rwb_5"];
              delete userInputs["permanent_address_rwb_1"];
              delete userInputs["signature_crop_from_existing_ac"];
              delete userInputs["work_type"];
              delete userInputs["application_sourcing"];
              delete userInputs["mobile_number"];
              delete userInputs["home_phone_number"];
            }
            if(stageSelector[0].stageId === "bd-3"){
              let additionalContacts = userInputSelector.applicants["select_alt_contacts_a_1"]?.split(",") || "";
              if (additionalContacts === "") {
                delete userInputs["per_email_2"];
                delete userInputs["office_email_1"];
                delete userInputs["office_email_2"];
                delete userInputs["home_phone2"];
                delete userInputs["mobile_1_add"];
                delete userInputs["mobile_2_add"];
                delete userInputs["ofc1"];
                delete userInputs["ofc2"];
                delete userInputs["office_phone1"];
                delete userInputs["office_phone2"];
                delete userInputs["ohph1"];
                delete userInputs["ohph2"];
                delete userInputs["overseas_mobile1"];
                delete userInputs["overseas_mobile2"];
              }
              delete userInputs["marital_status"];
              delete userInputs["per_block"];
              delete userInputs["per_country"];
              delete userInputs["per_postal_code"];
              delete userInputs["per_street_name"];
              delete userInputs["casa_fatca_declaration"];
              delete userInputs["casa_fatca_declaration_1"];
              delete userInputs["casa_fatca_declaration_2"];
              delete userInputs["casa_fatca_declaration_3"];
              delete userInputs["country_of_tax_residence"];
              delete userInputs["alt_block_1"];
              delete userInputs["alt_block_2"];
              delete userInputs["alt_block_3"];
              delete userInputs["alt_block_4"];
              delete userInputs["alt_block_5"];
              delete userInputs["alt_country_1"];
              delete userInputs["alt_country_2"];
              delete userInputs["alt_country_3"];
              delete userInputs["alt_country_4"];
              delete userInputs["alt_country_5"];
              delete userInputs["alt_postal_code_1"];
              delete userInputs["alt_postal_code_2"];
              delete userInputs["alt_postal_code_3"];
              delete userInputs["alt_postal_code_4"];
              delete userInputs["alt_postal_code_5"];
              delete userInputs["alt_street_name_1"];
              delete userInputs["alt_street_name_2"];
              delete userInputs["alt_street_name_3"];
              delete userInputs["alt_street_name_4"];
              delete userInputs["alt_street_name_5"];
              delete userInputs["crs_comments"];
              delete userInputs["crs_reason_code"];
              delete userInputs["home_phone_number"];
              delete userInputs["alt_address_rwb_1"];
              delete userInputs["alt_address_rwb_2"];
              delete userInputs["alt_address_rwb_3"];
              delete userInputs["alt_address_rwb_4"];
              delete userInputs["alt_address_rwb_5"];
              delete userInputs["permanent_address_rwb_1"];
              delete userInputs["Initial_deposit_rwb"];
              delete userInputs["reason_for_account_rwb"];
              delete userInputs["crs_reason_code"]
            }
          }
      });
    };
  };
    const handleSubmit = async (
    event: React.FormEvent<EventTarget>,
    fieldName?: string
  ): Promise<void> => {
    event.preventDefault();
    await removeUserInputData();
    let ageInValid = false;
    if (ageValidStageCheck()) {
      let age = validateService.calculateAge(
        userInputSelector.applicants[`date_of_birth_a_${applicantNo}`] ||
          stageSelector[0].stageInfo.applicants[`date_of_birth_a_${applicantNo}`]
      );
      ageInValid = validateService.validateAge(
        age,
        stageSelector[0].stageInfo.products[0].product_type,
        stageSelector[0].stageInfo.products[0].product_category
      );
    }
    if (ageInValid) {
      setAgeInvalidMessage(
        validateService.getValidationMsg(
          stageSelector[0].stageInfo.products[0].product_type,
          stageSelector[0].stageInfo.products[0].product_category
        )
      );
      setShowAgePopup(true);
      return;
    } 
      if (
        currentStageSelector === "ad-2" && userInputSelector.applicants["casa_fatca_declaration_1_a_1"] === "Y"
       ) {
        setShowUSPopup(true);
        return;
      }
      
  if (checkForDuplicateNationalities()) {
      setShowNationalityPopup(true);
    } else if (currentStageSelector === "rp") {
      dispatch(
        stagesAction.updateUserInputFields({
          terms_conditions_consent_a_1: "Y",
        })
      );
      navigateToNextStage();
    } else if (!(Object.keys(userInputs).length > 0)) {
       if (referralcodeSelector && referralcodeSelector.refer && referralcodeSelector.refer === "true"){
        validateReferFlag(fieldName, otherMyinfoSelector, stageSelector)
      }else{
        toProceedNextStage(fieldName, otherMyinfoSelector, stageSelector);
      }    
    } else {
      dispatch(
        fieldErrorAction.getFieldError({
          fieldName: userInputs,
          stageId:stageSelector[0].stageId
        })
      );
      smoothScroll();
    }
    event.preventDefault();
    };

  const toProceedNextStage = (
    fieldName: string | undefined,
    otherMyinfoSelector: any,
    stageSelector: any
  ) => {
    dispatch(stagesAction.setLastStageId(stageSelector[0].stageId));
    if (fieldName === "see_other_myInfo_details") {
      stateUrl("ssf-2");
      dispatch(stagesAction.resetCurrentStage("ssf-2"));
      dispatch(stagesAction.updateStageId("ssf-2"));
      dispatch(ValueUpdateAction.updateOtherMyinfo(true));
      if (!otherMyinfoSelector.otherMyInfo) {
        dispatch(dispatchLoader(true));
        dispatch(lovRequests(stageSelector[0].stageInfo, "ssf-2", null));
      }
      myinfoFieldDispatch();
    } else {    
        navigateToNextStage();
    }
  };

  const handleCallback = (
    fieldProps: KeyWithAnyModel,
    childData: string | number
  ) => {
    currentStageSection = fieldProps;
    if (
      madatoryFieldSelector &&
      madatoryFieldSelector.indexOf(fieldProps.logical_field_name) !== -1
    ) {
      setUserInputs((prevUser: KeyStringModel) => ({
        ...prevUser,
        [fieldProps.logical_field_name]: childData,
      }));
    }
  };

  const handleFieldDispatch = (
    fieldName: string,
    childData: string | number,
    event?: any
  ) => {
    if (fieldName !== "see_other_myInfo_details") {
      let fieldValue: string | null | undefined = null;
      if (fieldName === "residential_address") {
        const postal_code = myinfoResSelector["postal_code_a_1"];
        const block = myinfoResSelector["block_a_1"];
        const building_name = myinfoResSelector["building_name_a_1"];

        fieldValue =
          postal_code !== null && block !== null && building_name !== null
            ? ""
            : null;
      } else if (
        fieldName === "mobile_number_rwb" &&
        !childData.toString().includes("65-")
      ) {
        // childData = "65-" + childData;
        childData = childData
      } else if (
        fieldName === "home_phone_number_rwb" &&
        !childData.toString().includes("65-")
      ) {
        // childData = "65-" + childData;
        childData = childData
      } else {
        fieldValue = myinfoResSelector[fieldName + "_a_" + applicantNo];
      }
      /** rewrite condition to avoid unnecessary dispatch */

      /** ibanking prepopulating fields */
      let isIbanking = false;
      if (
        ibankingResSeletor &&
        Object.keys(ibankingResSeletor).length &&
        Object.keys(ibankingResSeletor).length > 0
      ) {
        fieldValue = ibankingResSeletor[fieldName + "_a_" + applicantNo];
        isIbanking = true;
      }
     let nonEditablecheck = DEFAULT_NONEDITABLE.NONEDITABLE.indexOf(fieldName) >= 0 ? false : true;
      if ( nonEditablecheck && (
        fieldValue === null ||
        fieldValue === undefined ||
        (CONSTANTS.DEFAULT_EDITABLE.indexOf(fieldName) > -1))
      ) {
        dispatch(
          stagesAction.modifyStage({
            isIbanking: isIbanking,
            fieldData: {
              fieldName: fieldName,
              value: childData,
            },
            currentStageSection: { data: currentStageSection },
          })
        );
      }
    } else {
      handleSubmit(event, fieldName);
    }
  };

  // Sonar findings
  const setFieldsForBackStage = (
    stageUpdate: string,
    formUpdateState: boolean | undefined | null
  ) => {
    dispatch(fieldErrorAction.getMandatoryFields(null));
    dispatch(isFormUpdate(true));
    setStageId(stageUpdate);
    dispatch(stagesAction.resetCurrentStage(stageUpdate));
    dispatch(stagesAction.updateStageId(stageUpdate));
    pageScrollTop();
  };
  const backHandler = async (formUpdateState: boolean | undefined | null) => {
    dispatch(stagesAction.setLastStageId(stageSelector[0].stageId));
    trackEvents.triggerAdobeEvent("ctaClick", "Back");
    dispatch(stagesAction.resetNewAndOldFields());
    if (valueSelector.backNavigation.formChange !== false) {
      dispatch(
        ValueUpdateAction.getChangeUpdate({
          id: stageSelector[0].stageId!,
          changes: true,
        })
      );
    }
    const stageUpdate = getStageName(
      stageSelector[0].stageId!,
      applicationJourney
    );
    //Adding lov call incase of resume for previous stages, back navigation
    if (resumeSelector) {
      dispatch(
        getLovMissing(
          stageUpdate,
          stageSelector[0].stageInfo.fieldmetadata.data.stages,
          lovSelector
        )
      );
    }
    setFieldsForBackStage(stageUpdate, formUpdateState);
    //setDocBack(formUpdateState !== false ? true : false);
    dispatch(stagesAction.updateLastStageInput(stageSelector[0].stageId));
    dispatch(fieldErrorAction.getFieldError(null));
  };

  const updateCheckboxStatus = (checkedStatus: boolean) => {
    if (checkedStatus === true) {
      setIsRequiredValid("form-valid");
      setCheckboxStatus(checkedStatus);
    } else {
      setIsRequiredValid("form-invalid");
    }
  };

  useEffect(() => {
    if (madatoryFieldSelector && stageSelector[0].stageId !== "rp") { 
      dispatch(removeUserInputData()).then(
        // deleting data from userInput
        () => {
          if (
            isFormValid && 
            !(Object.keys(userInputs).length > 0) 
            // && confirmBancaEtc()
          ) {
            setIsRequiredValid("form-valid");
          } else {
            setIsRequiredValid("form-invalid");
          }
        }
      );
    }else if(stageSelector[0].stageId === "rp"){
      setIsRequiredValid("form-valid");
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isFormValid, userInputs, madatoryFieldSelector]);
  const confirmBancaEtc = () => {
    const applicants = userInputSelector.applicants;
    if (
      (stageId === "ad-1") &&
      // applicants["credit_limit_consent_a_1"] === "N" &&
      bancaSelector &&
      bancaSelector.banca_product_applicable_a_1 === "Y"
    ) {
      if (bancaSelector.eligible_banca_insurances.every((eligibleBancaInsurance: any) => (
          applicants["insurance_consent_" + eligibleBancaInsurance + "_a_" + applicantNo] === "Y" ||
          applicants["insurance_consent_" + eligibleBancaInsurance + "_a_" + applicantNo] === "N" ||
          stageSelector[0].stageInfo.applicants["insurance_consent_" + eligibleBancaInsurance + "_a_" + applicantNo] === "Y" ||
          stageSelector[0].stageInfo.applicants["insurance_consent_" + eligibleBancaInsurance + "_a_" + applicantNo] === "N"
        ))
      ) {
        return true;
      } else {
        return false;
      }
    } else {
      return true;
    }
  };

  
  const validateForm = (e: FormEvent<HTMLFormElement> | null) => {
    if (e && e.currentTarget.checkValidity()) {
      setIsFormValid(true);
    } else {
      setIsFormValid(false);
    }
  };
 

  const handlePopupBackButton = () => {
    setShowUSPopup(false);
    setShowNationalityPopup(false);
    setShowPostalPopup(false);
  };

  const checkForDuplicateNationalities = () => {
    let isFound: boolean = false;
    if (
      currentStageSelector === "ad-2" &&
      stageSelector[0].stageInfo.applicants.nationality_a_1 &&
      userInputSelector.applicants.country_of_tax_residence_a_1
    ) {
      taxSelector.fields.forEach(field => {
        const fieldIndex = field.split("_").pop(); 
        const fieldValue = userInputSelector.applicants[`${field}_a_1`];
        const countryOfTaxField = `country_of_tax_residence_${fieldIndex}`;
          if (taxSelector.fields.includes(countryOfTaxField)) {
            if(fieldValue===userInputSelector.applicants.country_of_tax_residence_a_1){
              isFound = true;
            }
          }
      });
      // if (nationalityArray) {
      //   nationalityArray.forEach((national: string) => {
      //     if (
      //       national === stageSelector[0].stageInfo.applicants.nationality_a_1
      //     ) {
      //       isFound = true;
      //     }
      //   });
      // }
    }
    return isFound;
  };

  const validateInsurance = (logicalFieldName: string, value: string) => {
    dispatch(
      stagesAction.modifyStage({
        fieldData: {
          fieldName: logicalFieldName,
          value: value,
        },
        currentStageSection: { data: currentStageSection },
      })
    );
    let updateUserInputs = { ...userInputs };
    updateUserInputs[logicalFieldName] = value;
    setUserInputs(updateUserInputs);
  };
  const validateReferFlag = (fieldName : string | undefined, otherMyinfoSelector :any, stageSelector :any) =>{
    if (
      referralcodeSelector &&
      referralcodeSelector.referId !== null &&
        referralcodeSelector.referId !== "" &&
      referralcodeSelector.referId.length > 0 &&
      referralcodeSelector.referId.length <= 4
    ) {
      dispatch(
        referralcodeAction.setReferralErrorMsg(
           errorMsg.referralcodeerror
        )
      );
    } else if (
      referralcodeSelector.refer !== null &&
      fieldName === "see_other_myInfo_details" &&
      !continueWithoutReferralcode &&
      referralcodeSelector &&
      (referralcodeSelector.referId === null ||
        referralcodeSelector.referId === "")
    ) {
      setOtherMyinfo(true);
      setShowReferralcodePopup(true);
    } else if (
      referralcodeSelector.refer !== null &&
      referralcodeSelector.refer &&
      fieldName !== "see_other_myInfo_details"
    ) {
      setOtherMyinfo(false);
      validateReferralCode();
    } else if (
      referralcodeSelector.refer !== null &&
      fieldName === "see_other_myInfo_details" &&
      (continueWithoutReferralcode ||
        (referralcodeSelector && referralcodeSelector.referId && referralcodeSelector.referId.length >= 5))
    ) {
      toProceedNextStage(fieldName, otherMyinfoSelector, stageSelector);
    } else if (
      referralcodeSelector.refer === null &&
      (getUrl.getParameterByName("auth") === "resume" || resumeSelector)
    ) {
      validateReferralCode();
    }

  }
  const validateReferralCode = () => {
    if (referralcodeSelector && referralcodeSelector.refer && referralcodeSelector.refer === 'true') {
      if ((referralcodeSelector.referId === "" || referralcodeSelector.referId === null )&& !continueWithoutReferralcode) {
        setShowReferralcodePopup(true);
      }
      if (
        (referralcodeSelector.referId === "" ||
          referralcodeSelector.referId === null) &&
        continueWithoutReferralcode &&
        !otherMyinfo
      ) {
        setShowReferralcodePopup(false);
        navigateToNextStage();
      }
      if (
        referralcodeSelector.referId &&
        referralcodeSelector.referId.length >= 5 &&
        !otherMyinfo
      ) {
        setShowReferralcodePopup(false);
        navigateToNextStage();
      }
      if (
        otherMyinfo &&
        (referralcodeSelector.referId === "" ||
          referralcodeSelector.referId === null) &&
        continueWithoutReferralcode
      ) {
        setShowReferralcodePopup(false);
      }
    }
  };
  useEffect(() => {
    if (continueWithoutReferralcode && otherMyinfo) {
      toProceedNextStage(
        "see_other_myInfo_details",
        otherMyinfoSelector,
        stageSelector
      );
    }
    if (continueWithoutReferralcode && !otherMyinfo) {
      navigateToNextStage();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [otherMyinfo, continueWithoutReferralcode]);
  

  const fieldToCheck :any = {
    "Permanent Address": "PER",
    "Alternate Address 1": "AL1",
    "Alternate Address 2": "AL2",
    "Alternate Address 3": "AL3",
    "Alternate Address 4": "AL4",
    "Alternate Address 5": "AL5",
  };

  // splitted array
  const selectedValues = userInputSelector.applicants["select_alt_addresses_a_1"] ?.split(",") || [];

  return (
    <>
      {showAgePopup && (
        <Model name="ageHardStop" body_content={ageInvalidMessage} handlebuttonClick={handlePopupBackButton}/>
      )}

      {showUSPopup && (
        <Model name="usHardStop" handlebuttonClick={handlePopupBackButton} />
      )}

      {showPostalPopup && <Model name="postal_code" handlebuttonClick={handlePopupBackButton} />}

      {showNationalityPopup && (
        <Model
          name="nationalityHardStop"
          handlebuttonClick={handlePopupBackButton}
        />
      )}
      {((stageId === "doc" ) || (stageId === "doc-2" ))&& <DocumentUpload backHandler={backHandler} />}
      {((stageId !== "doc") && (stageId !== "doc-2")) && (
        <form className="form" onSubmit={handleSubmit} onChange={validateForm}>
          {stageId === "rp" && (
            <ReviewPage updateCheckboxStatus={updateCheckboxStatus} />
          )}
          {/* {(((stageSelector[0].stageInfo.products[0].product_category === 'CC'
           || stageSelector[0].stageInfo.products[0].product_type === '280') && applicationJourney === 'NTC' )
            && stageSelector[0].stageId === "bd-3" ) &&
            <Myinfobanner/>} */}
          {
            fields &&
            fields["fields"] &&
            fields["fields"].map(
              (currentSection: KeyWithAnyModel, i: number) => {             
                return (
                  <div key={`fields${i}`}>
                    {currentSection["field_set_name"] &&
                      currentSection["fields"].length > 0 && (
                        <>
                          {
                         ((stageId === 'ssf-1') || (stageId === "bd-3" && currentSection["field_set_name"] === "Additional Contact Details"))?
                         <div className={`${(currentSection["field_set_name"] === "Additional Contact Details" && stageId === "bd-3") ? 'additionalContact':'countryCodeWithPhone'}`}>
                           <div
                           className="field__group"
                           key={currentSection["field_set_name"]}
                         >
                           {currentSection["field_set_name"].trim() !== "" &&
                             currentSection["fields"][0].field_set !==
                               "No" && (
                               <div
                                 aria-details={
                                   currentSection["field_set_name"]
                                 }
                                 className="stage-header"
                               >
                                 {currentSection["field_set_name"]}
                               </div>
                             )}
                           {currentSection["fields"].map(
                             (
                               currentSectionDetails: KeyWithAnyModel,
                               index: number
                             ) => {
                               currentStageSection = currentSectionDetails;
                               return renderComponent(
                                 currentSectionDetails,
                                 index,
                                 handleCallback,
                                 handleFieldDispatch,
                                 userInputs
                               );
                             }
                           )}
                        </div>
                         </div>:
stageId ==='bd-2' && (authenticateType()==='myinfo' || authenticateType()==='manual')?
                         <div  
                         className={ (() => { 
                          
                        return currentSection["field_set_name"] in fieldToCheck &&
                          !selectedValues.includes(fieldToCheck[currentSection["field_set_name"]])
                          ? "disable"
                          : "otherAddressToBottom";
                        })() }
                        
                        >
                         <div
                         className="field__group"
                         key={currentSection["field_set_name"]}
                       >
                         {currentSection["field_set_name"].trim() !== "" &&
                           currentSection["fields"][0].field_set !==
                             "No" && (
                             <div
                               aria-details={
                                 currentSection["field_set_name"]
                               }
                               className="stage-header"
                             >
                               {currentSection["field_set_name"]}
                             </div>
                           )}
                         {currentSection["fields"].map(
                           (
                             currentSectionDetails: KeyWithAnyModel,
                             index: number
                           ) => {
                             currentStageSection = currentSectionDetails;
                             return renderComponent(
                               currentSectionDetails,
                               index,
                               handleCallback,
                               handleFieldDispatch,
                               userInputs
                             );
                           }
                         )}
                      </div>
                       </div>
                         :
                         stageId ==='bd-3'?
                         <div  className={`${(currentSection["field_set_name"] === 'Original Sighted' && (userInputSelector.applicants.application_sourcing_a_1 === undefined || userInputSelector.applicants.application_sourcing_a_1 === null || userInputSelector.applicants.application_sourcing_a_1 === '1')) || ((currentSection["field_set_name"] === 'Select Primary Contact under Mobile Phone' || currentSection["field_set_name"] === 'Select Primary Contact under email' || currentSection["field_set_name"] === 'Select Primary Contact under Residential Telephone No.' || currentSection["field_set_name"] === "Select Primary Contact under Office No.") && 
                        (userInputSelector.applicants.declare_preferred_contacts_a_1 === 'N' || userInputSelector.applicants.declare_preferred_contacts_a_1 === undefined || userInputSelector.applicants.declare_preferred_contacts_a_1 === "")) || ((currentSection["field_set_name"] === 'Select Primary Contact under Residential Telephone No.' && stageSelector[0].stageInfo.applicants["home_phone_number_rwb_a_1"] === undefined) || (currentSection["field_set_name"] === 'Select Primary Contact under Office No.' && stageSelector[0].stageInfo.applicants["existing_office_telephone_ot1_a_1"] === undefined)) || (currentSection["field_set_name"] === 'Office Address (Optional)' && (!userInputSelector.applicants.work_type_a_1 || userInputSelector.applicants.work_type_a_1 === 'O')) || 
                        (currentSection["field_set_name"] === 'Existing Contact Details' && userInputSelector.applicants.existing_personal_email_co1_a_1 === "" && userInputSelector.applicants.existing_office_email_em1_a_1 === "" && userInputSelector.applicants.existing_office_email_em2_a_1 === "" && userInputSelector.applicants.existing_mobile_mo1_a_1 === "" && userInputSelector.applicants.existing_mobile_mo2_a_1 === "" && userInputSelector.applicants.existing_overseas_mobile_mf1_a_1 === "" && userInputSelector.applicants.existing_overseas_mobile_mf2_a_1 === "" 
                        && userInputSelector.applicants.existing_office_telephone_ot1_a_1 === "" && userInputSelector.applicants.existing_office_telephone_ot2_a_1 === "" && userInputSelector.applicants.existing_residential_telephone_rt2_a_1 === "" && userInputSelector.applicants.existing_overseas_office_telno_of1_a_1 === "" && userInputSelector.applicants.existing_overseas_office_telno_of2_a_1 === "" && userInputSelector.applicants.existing_overseas_residential_telno_rf1_a_1 === "" && userInputSelector.applicants.existing_overseas_residential_telno_rf2_a_1 === "")? 'disable':'moveOfficeNumberToBottom'}`}>
                            <div
                            className="field__group"
                            key={currentSection["field_set_name"]}
                          >
                            {currentSection["field_set_name"].trim() !== "" &&
                              currentSection["fields"][0].field_set !==
                                "No" && (
                                <div
                                  aria-details={
                                    currentSection["field_set_name"]
                                  }
                                  className={`${(currentSection["field_set_name"] === 'Original Sighted' && (userInputSelector.applicants.application_sourcing_a_1 === undefined || userInputSelector.applicants.application_sourcing_a_1 === null || userInputSelector.applicants.application_sourcing_a_1 === '1')) || ((currentSection["field_set_name"] === 'Select Primary Contact under Mobile Phone' || currentSection["field_set_name"] === 'Select Primary Contact under email' || currentSection["field_set_name"] === 'Select Primary Contact under Residential Telephone No.' || currentSection["field_set_name"] === "Select Primary Contact under Office No.") && 
                                  (userInputSelector.applicants.declare_preferred_contacts_a_1 === 'N' || userInputSelector.applicants.declare_preferred_contacts_a_1 === undefined  || userInputSelector.applicants.declare_preferred_contacts_a_1 === "")) ? 'disable':'stage-header'}`}
                                >
                                  {(currentSection["field_set_name"] === 'Original Sighted' && (userInputSelector.applicants.application_sourcing_a_1 === undefined || userInputSelector.applicants.application_sourcing_a_1 === null || userInputSelector.applicants.application_sourcing_a_1 === '1')) || ((currentSection["field_set_name"] === 'Select Primary Contact under Mobile Phone' || currentSection["field_set_name"] === 'Select Primary Contact under email' || currentSection["field_set_name"] === 'Select Primary Contact under Residential Telephone No.' || currentSection["field_set_name"] === "Select Primary Contact under Office No.") && 
                                  (userInputSelector.applicants.declare_preferred_contacts_a_1 === 'N' || userInputSelector.applicants.declare_preferred_contacts_a_1 === undefined  || userInputSelector.applicants.declare_preferred_contacts_a_1 === "")) ? '':currentSection["field_set_name"]}
                                </div>
                              )}
                            {currentSection["fields"].map(
                              (
                                currentSectionDetails: KeyWithAnyModel,
                                index: number
                              ) => {
                                currentStageSection = currentSectionDetails;
                                return renderComponent(
                                  currentSectionDetails,
                                  index,
                                  handleCallback,
                                  handleFieldDispatch,
                                  userInputs
                                );
                              }
                            )}
                         </div>
                          </div>: 
                            <div
                            className={`field__group ${stageSelector[0].stageId ==="bd-1" ? "field_group_basic" : (stageSelector[0].stageId ==="ad-1" && (currentSection["field_set_name"] === "Banking Services"||currentSection["field_set_name"] === "Current Account - Bonus$aver Banking Services"||currentSection["field_set_name"] === "Current Account - FCY Cheque and Save Account Banking Services"||currentSection["field_set_name"] === "Current Account - SuperSalary Account Banking Services"||currentSection["field_set_name"] ==="Savings Account - JumpStart Banking Services"||currentSection["field_set_name"] ==="Savings Account - MyWay Savings Account Banking Services")) ? "field_group_banking": ""}`}
                            key={currentSection["field_set_name"]}
                          >
                            {currentSection["field_set_name"] !== "Insurance Protection" &&
                            currentSection["field_set_name"].trim() !== "" &&
                              currentSection["fields"][0].field_set !==
                                "No" && (
                                <div
                                  aria-details={
                                    currentSection["field_set_name"]
                                  }
                                  className="stage-header"
                                >
                                  {currentSection["field_set_name"]}
                                </div>
                              )
                              } 
                              {currentSection["field_set_name"] === "Insurance Protection" &&(stageId === "ad-1" ||
                              stageId === "bd-3" &&
                                userInputSelector.applicants["credit_limit_consent_a_1"] ===
                                  "N") &&
                              bancaSelector &&
                              bancaSelector.banca_product_applicable_a_1 === "Y" && 
                              bancaSelector.eligible_banca_insurance_informations.map(
                                  (insuranceInformation: KeyWithAnyModel, i: number) => {
                                    return (
                                      <div
                                      className="field__group">
                                      <div
                                        aria-details={currentSection["field_set_name"]}
                                        className="stage-header"
                                      >
                                        {currentSection["field_set_name"]}
                                      </div><BancaDetails
                                          insuranceInformation={insuranceInformation}
                                          validateInsurance={validateInsurance}
                                          handleFieldDispatch={handleFieldDispatch}
                                          handleCallback={handleCallback} />
                                      </div>
                                    );
                                  }
                            )}
                            {currentSection["fields"].map(
                              (
                                currentSectionDetails: KeyWithAnyModel,
                                index: number
                              ) => {
                                currentStageSection = currentSectionDetails;
                                return renderComponent(
                                  currentSectionDetails,
                                  index,
                                  handleCallback,
                                  handleFieldDispatch,
                                  userInputs
                                );
                              }
                            )}
                          </div>
              }
                        </>
                      )}
                  </div>
                );
              }
            )}
          
           {otherMyinfo && isCASAProduct === false && stageId !== "ld-1" 
           && stageId !== "bd-2" && stageId === "bd-3" &&  
          <div className="field__group">
                        { stageSelector[0].stageInfo.applicants.yearly_assessable_income_a_1 &&<div aria-details="Employment Details" className="stage-header">NOA Income Details</div>}
            {stageSelector[0].stageInfo.applicants.year_of_assessment_a_1 &&
          <div className="text"><label htmlFor="NRIC">Year of Assessment</label>
            <div className="text__count ">
                 <input type="Text" name="NRIC" aria-label="NRIC" id="NRIC_a_1" disabled={true} value={stageSelector[0].stageInfo.applicants.year_of_assessment_a_1} />
            </div>
          </div>}
          {stageSelector[0].stageInfo.applicants.yearly_assessable_income_a_1 &&
          <div className="text"><label htmlFor="NRIC">Yearly Assessment Income</label>
          <div className="text__count ">
               <input type="Text" name="NRIC" aria-label="NRIC" id="NRIC_a_1" disabled={true} value={stageSelector[0].stageInfo.applicants.yearly_assessable_income_a_1}/>
          </div>
          </div>
          }
          </div>
         }
          {otherMyinfo &&
            isCASAProduct === false && stageId !== "ld-1" && stageId !== "bd-2" && stageId !== "bd-1" && stageId !== "rp" && stageId !=="ad-2" && stageId !=="ACD" &&stageId !=="ad-1" &&
            cpfContributionData.length > 0 && 
            (
              <CPFContribution
                cpfContrubutionLogicalValue={cpfContributionData}
              />
            )}
            {referralcodeSelector &&
            referralcodeSelector.refer &&
            showReferralcodePopup &&
            continueWithoutReferralcode !== true && (
              <Model
                name="referral_code"
                setContinueWithoutReferralcode={setContinueWithoutReferralcode}
                setShowReferralcodePopup={setShowReferralcodePopup}
              />
            )}
          <div className="app__footer">
            <Footer
              otherMyinfo={otherMyinfo}
              backHandler={backHandler}
              validateNxt={isRequiredValid}
              journeyType={applicationJourney}
            />
          </div>
          
        </form>
      )}
    </>
  );
};

export default React.memo(Fields);
Please write an test cases using jest and RTL
