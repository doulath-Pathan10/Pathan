import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import Number from './Number';
import { StoreModel } from '../../../utils/model/common-model';
import { KeyWithAnyModel } from '../../../utils/model/common-model';

// Mock Redux store
const mockStore = configureStore({
  reducer: {
    stages: () => ({
      stages: [{
        stageId: 'ad-1',
        stageInfo: {
          applicants: {},
          products: [],
          application: { channel_reference: 'test123' }
        }
      }],
      userInput: { applicants: {} },
      updatedStageInputs: [],
      journeyType: 'standard'
    }),
    fielderror: () => ({ error: [] }),
    lastaccessed: () => ({})
  }
});

// Mock dependencies
jest.mock('../../../utils/common/change.utils', () => ({
  authenticateType: jest.fn(() => 'manual'),
  fieldError: jest.fn(() => false),
  getUrl: {
    getUpdatedStage: jest.fn(() => ({ updatedStageInputs: [] })),
    getJourneyType: jest.fn(() => 'standard')
  }
}));

jest.mock('../../../utils/store/store', () => ({
  store: {
    getState: jest.fn(() => ({
      stages: {
        stages: [{
          stageId: 'ad-1',
          stageInfo: {
            applicants: {},
            products: []
          }
        }]
      }
    }))
  }
}));

// Mock postal code validation
jest.mock('../../../utils/store/postal-code', () => ({
  postalCodeValidation: jest.fn(() => Promise.resolve({}))
}));

describe('Number Component', () => {
  const defaultProps: KeyWithAnyModel = {
    data: {
      logical_field_name: 'test_field',
      rwb_label_name: 'Test Field',
      type: 'text',
      mandatory: 'Yes',
      min_length: 3,
      length: 10,
      regex: '^[0-9]*$',
      editable: false
    },
    handleCallback: jest.fn(),
    handleFieldDispatch: jest.fn()
  };

  const renderComponent = (props = defaultProps) => {
    return render(
      <Provider store={mockStore}>
        <Number {...props} />
      </Provider>
    );
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  // Test 1: Basic rendering
  it('renders correctly with default props', () => {
    renderComponent();
    expect(screen.getByLabelText('Test Field')).toBeInTheDocument();
  });

  // Test 2: Input validation - valid input
  it('handles valid input correctly', () => {
    renderComponent();
    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: '123' } });
    expect(defaultProps.handleCallback).toHaveBeenCalled();
    expect(screen.queryByText(/error/i)).not.toBeInTheDocument();
  });

  // Test 3: Input validation - invalid input (regex)
  it('shows error for invalid input (regex)', () => {
    renderComponent();
    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'abc' } });
    expect(screen.getByText(/patterns Test Field/i)).toBeInTheDocument();
  });

  // Test 4: Input validation - invalid input (min length)
  it('shows error for invalid input (min length)', () => {
    renderComponent();
    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: '1' } });
    expect(screen.getByText(/patterns Test Field/i)).toBeInTheDocument();
  });

  // Test 5: Postal code handling
  it('triggers postal code validation for postal_code_rwb field', () => {
    const postalProps = {
      ...defaultProps,
      data: {
        ...defaultProps.data,
        logical_field_name: 'postal_code_rwb'
      }
    };
    renderComponent(postalProps);
    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: '123456' } });
    expect(mockStore.dispatch).toHaveBeenCalled();
  });

  // Test 6: Account number validation
  it('handles account number validation', () => {
    const accountProps = {
      ...defaultProps,
      data: {
        ...defaultProps.data,
        logical_field_name: 'scb_account_no'
      }
    };
    renderComponent(accountProps);
    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: '123' } });
    expect(defaultProps.handleCallback).toHaveBeenCalled();
  });

  // Test 7: Field error handling
  it('shows error when fieldError is true', () => {
    require('../../../utils/common/change.utils').fieldError.mockReturnValue(true);
    renderComponent();
    expect(screen.getByText(/emity Test Field/i)).toBeInTheDocument();
  });

  // Test 8: Disabled state
  it('renders disabled when editable is true', () => {
    const disabledProps = {
      ...defaultProps,
      data: {
        ...defaultProps.data,
        editable: true
      }
    };
    renderComponent(disabledProps);
    expect(screen.getByLabelText('Test Field')).toBeDisabled();
  });

  // Test 9: Term deposit days field visibility
  it('hides td_term_value_days when conditions met', () => {
    const tdProps = {
      ...defaultProps,
      data: {
        ...defaultProps.data,
        logical_field_name: 'td_term_value_days'
      }
    };
    const { container } = renderComponent(tdProps);
    expect(container.querySelector('.number')).not.toBeInTheDocument();
  });

  // Test 10: Existing account number field handling
  it('handles existing_account_no field visibility', () => {
    const accountProps = {
      ...defaultProps,
      data: {
        ...defaultProps.data,
        logical_field_name: 'existing_account_no'
      }
    };
    const { container } = renderComponent(accountProps);
    expect(container.querySelector('.number')).not.toBeInTheDocument();
  });

  // Test 11: Blur event handling
  it('handles blur event correctly', () => {
    renderComponent();
    const input = screen.getByLabelText('Test Field');
    fireEvent.blur(input, { target: { value: '123' } });
    expect(defaultProps.handleCallback).toHaveBeenCalled();
  });

  // Test 12: Focus event handling
  it('handles focus event correctly', () => {
    renderComponent();
    const input = screen.getByLabelText('Test Field');
    fireEvent.focus(input);
    expect(mockStore.dispatch).toHaveBeenCalled();
  });

  // Test 13: Office postal code handling
  it('handles ofc_postal_code field correctly', () => {
    const postalProps = {
      ...defaultProps,
      data: {
        ...defaultProps.data,
        logical_field_name: 'ofc_postal_code'
      }
    };
    renderComponent(postalProps);
    expect(mockStore.dispatch).toHaveBeenCalled();
  });

  // Test 14: Alternate address handling
  it('handles alternate address fields correctly', () => {
    const altProps = {
      ...defaultProps,
      data: {
        ...defaultProps.data,
        logical_field_name: 'alt_postal_code_1'
      }
    };
    renderComponent(altProps);
    expect(mockStore.dispatch).toHaveBeenCalled();
  });
});
