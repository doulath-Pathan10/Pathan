import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import CasaTNC from './CasaTNC';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';

// Mock dependencies
jest.mock('../../services/preApprovalServices', () => ({
  getData: jest.fn().mockResolvedValue({
    data: {
      products: { 'test-campaign': [{ pdfURL: 'https://test.pdf' }] },
      productsMob: { 'test-campaign': [{ pdfURL: 'https://test-mobile.pdf' }] },
      tncLinkCampaignCode: {
        isCasa: [{
          pdfLinks: [
            { url: 'https://link1.pdf', Title: 'Terms 1' },
          ],
        }],
      },
    },
  }),
  getPDFData: jest.fn().mockResolvedValue('mock-pdf-data'),
}));

jest.mock('../../../../shared/components/pdf/pdf', () => (
  jest.fn(() => <div data-testid="mock-pdf">Mock PDF</div>)
));

jest.mock('../../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn(() => 'en'),
  },
}));

const mockStore = configureStore([]);

describe('CasaTNC Component - Minimal Passing Tests', () => {
  let store: any;

  beforeEach(() => {
    store = mockStore({
      preApproval: {
        formConfigmetaData: { products: [{ campaign: 'test-campaign' }] },
      },
      stages: { stages: [{ stageInfo: {} }] },
    });
  });

  it('1. renders loading spinner initially', () => {
    render(
      <Provider store={store}>
        <CasaTNC />
      </Provider>
    );
    expect(screen.getByTestId('spinner')).toBeInTheDocument();
  });

  it('2. renders main content after loading', async () => {
    render(
      <Provider store={store}>
        <CasaTNC />
      </Provider>
    );

    await waitFor(() => {
      expect(screen.getByText('Before you start your application:')).toBeInTheDocument();
      expect(screen.getByTestId('mock-pdf')).toBeInTheDocument();
    });
  });

  it('3. renders download button', async () => {
    render(
      <Provider store={store}>
        <CasaTNC />
      </Provider>
    );

    await waitFor(() => {
      expect(screen.getByText('Download')).toBeInTheDocument();
    });
  });

  it('4. shows accept button after scrolling', async () => {
    render(
      <Provider store={store}>
        <CasaTNC />
      </Provider>
    );

    await waitFor(() => {
      const container = screen.getByTestId('pdf-container');
      fireEvent.scroll(container, { 
        target: { scrollTop: 1000, clientHeight: 500, scrollHeight: 1500 }
      });
      
      expect(screen.getByText('I Accept')).toBeInTheDocument();
    });
  });

  it('5. dispatches actions when accept button is clicked', async () => {
    render(
      <Provider store={store}>
        <CasaTNC />
      </Provider>
    );

    await waitFor(() => {
      const container = screen.getByTestId('pdf-container');
      fireEvent.scroll(container, { 
        target: { scrollTop: 1000, clientHeight: 500, scrollHeight: 1500 }
      });
      
      fireEvent.click(screen.getByText('I Accept'));
      expect(store.getActions().length).toBeGreaterThan(0);
    });
  });
});
