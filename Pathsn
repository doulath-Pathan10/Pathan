import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import OnboardingBeforeStart from './OnboardingBeforeStart';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';

// Mock all dependencies thoroughly
jest.mock('../../services/preApprovalServices', () => ({
  getData: jest.fn().mockResolvedValue({
    data: {
      products: { 'test-campaign': [{ pdfURL: 'https://test.pdf' }] },
      productsMob: { 'test-campaign': [{ pdfURL: 'https://test-mobile.pdf' }] },
      CampaignTnC: { 'test-campaign': [{ pdfURL: 'https://test-tnc.pdf' }] },
      CampaignTnCMob: { 'test-campaign': [{ pdfURL: 'https://test-tnc-mobile.pdf' }] },
      tncLinkCampaignCode: { 
        'test-campaign': [{
          pdfLinks: [{ url: 'https://link1.pdf', Title: 'Terms 1' }]
        }]
      }
    }
  }),
  getPDFData: jest.fn().mockResolvedValue('mock-pdf-data')
}));

jest.mock('../../../../shared/components/pdf/pdf', () => 
  jest.fn(() => <div data-testid="mock-pdf">PDF Viewer</div>)
);

jest.mock('../../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn(() => 'en'),
    getParameterByName: jest.fn(() => null)
  }
}));

// Mock window.location
delete window.location;
window.location = { 
  host: 'localhost:3000',
  replaceState: jest.fn()
} as any;

// Mock navigator properties
Object.defineProperty(navigator, 'userAgent', {
  value: 'Mozilla/5.0 (Windows NT 10.0)',
  writable: true
});

const mockStore = configureStore([]);

describe('OnboardingBeforeStart Component', () => {
  const mockNextPage = jest.fn();
  const mockOnScrollEnd = jest.fn();
  let store: any;

  beforeEach(() => {
    store = mockStore({
      preApproval: {
        formConfigmetaData: {
          products: [{ campaign: 'test-campaign' }]
        }
      },
      stages: {
        stages: [{
          stageInfo: {
            products: [{ 
              campaign: 'test-campaign', 
              product_type: '1313' 
            }]
          }
        }]
      }
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('1. renders loading spinner initially', () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart stageID={0} />
      </Provider>
    );
    expect(screen.getByRole('status')).toBeInTheDocument();
  });

  it('2. renders PDF viewer after loading', async () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart stageID={0} />
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByTestId('mock-pdf')).toBeInTheDocument();
    });
  });

  it('3. renders download button and handles click', async () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart stageID={0} />
      </Provider>
    );
    
    await waitFor(() => {
      const downloadBtn = screen.getByText('Download');
      fireEvent.click(downloadBtn);
      expect(downloadBtn).toBeInTheDocument();
    });
  });

  it('4. renders terms links table for stage 1', async () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart stageID={1} />
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByText('Terms 1')).toBeInTheDocument();
      expect(screen.getByText('Read')).toBeInTheDocument();
    });
  });

  it('5. shows scroll button when isVisible=true', async () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart 
          stageID={0} 
          isVisible={true} 
          onScrollEnd={mockOnScrollEnd}
        />
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByLabelText('scroll button')).toBeInTheDocument();
    });
  });

  it('6. shows accept button when isVisible=false', async () => {
    render(
      <Provider store={store}>
        <OnboardingBeforeStart 
          stageID={0} 
          isVisible={false} 
          nextPage={mockNextPage}
        />
      </Provider>
    );
    
    await waitFor(() => {
      const acceptBtn = screen.getByText('Accept');
      fireEvent.click(acceptBtn);
      expect(mockNextPage).toHaveBeenCalled();
    });
  });

  it('7. handles mobile PDF URL selection', async () => {
    Object.defineProperty(navigator, 'userAgent', {
      value: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)'
    });
    
    render(
      <Provider store={store}>
        <OnboardingBeforeStart stageID={0} />
      </Provider>
    );
    
    await waitFor(() => {
      expect(require('../../services/preApprovalServices').getData)
        .toHaveBeenCalled();
    });
  });

  it('8. handles Chinese language PDF selection', async () => {
    require('../../../../utils/common/change.utils').getUrl.getLanguageInfo
      .mockReturnValueOnce('zh');
    
    process.env.REACT_APP_KFS_DOC_URL_Chinees = 'https://chinese-doc.url';
    
    render(
      <Provider store={store}>
        <OnboardingBeforeStart stageID={0} />
      </Provider>
    );
    
    await waitFor(() => {
      expect(require('../../services/preApprovalServices').getData)
        .toHaveBeenCalledWith('https://chinese-doc.url');
    });
  });
});
