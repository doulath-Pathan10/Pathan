import { render, screen, waitFor, act } from '@testing-library/react';
import Dashboard from './Dashboard';
import { Provider } from 'react-redux';
import { MemoryRouter } from 'react-router-dom';
import configureStore from 'redux-mock-store';

// Simple mocks for child components
jest.mock('./header/header', () => () => <div data-testid="header">Header</div>);
jest.mock('./fields/fields', () => () => <div data-testid="fields">Fields</div>);
jest.mock('../../shared/components/popup-model/popup-model', () => ({ displayPopup, children }: any) => 
  displayPopup ? <div data-testid="popup">{children}</div> : null
);
jest.mock('../../shared/components/model/model', () => ({ name }: any) => 
  <div data-testid={`model-${name}`}>Model {name}</div>
);

// Mock hooks
const mockDispatch = jest.fn();
const mockNavigate = jest.fn();
const mockUseLocation = jest.fn();

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: () => mockDispatch,
  useSelector: jest.fn()
}));

jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: () => mockNavigate,
  useLocation: () => mockUseLocation()
}));

// Mock services
jest.mock('../../services/common-service', () => ({
  dispatchLoader: jest.fn(),
  getClientInfo: jest.fn().mockResolvedValue({})
}));

jest.mock('../../utils/common/change.utils', () => ({
  authenticateType: jest.fn().mockReturnValue('default'),
  getUrl: jest.fn().mockReturnValue({
    getLoader: () => ({ cta: { cta: false } })
  })
}));

describe('Dashboard Component', () => {
  const mockStore = configureStore([]);
  let store: any;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [],
        otpOpen: false,
        otpResume: false
      },
      urlParam: {
        myInfo: false,
        validUrl: true
      },
      referralcode: {}
    });

    mockUseLocation.mockReturnValue({ pathname: '/test' });
    mockDispatch.mockImplementation((action) => {
      if (typeof action === 'function') {
        return action(mockDispatch, store.getState);
      }
      return action;
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  const renderDashboard = () => {
    return render(
      <Provider store={store}>
        <MemoryRouter>
          <Dashboard />
        </MemoryRouter>
      </Provider>
    );
  };

  it('should render without crashing', () => {
    renderDashboard();
    expect(screen.queryByTestId('header')).not.toBeInTheDocument();
  });

  it('should show error popup when URL is invalid', async () => {
    store = mockStore({
      ...store.getState(),
      urlParam: { validUrl: false, myInfo: false }
    });

    renderDashboard();
    
    await waitFor(() => {
      expect(screen.getByTestId('popup')).toBeInTheDocument();
      expect(screen.getByTestId('model-globalError')).toBeInTheDocument();
    });
  });

  it('should show MyInfo popup when myInfo is true', async () => {
    store = mockStore({
      ...store.getState(),
      urlParam: { validUrl: true, myInfo: true }
    });

    renderDashboard();
    
    await waitFor(() => {
      expect(screen.getByTestId('popup')).toBeInTheDocument();
    });
  });

  it('should render header and fields when conditions are met', async () => {
    store = mockStore({
      ...store.getState(),
      stages: { 
        stages: [{ stageId: 'test-stage' }], 
        otpOpen: false 
      }
    });

    renderDashboard();
    
    await waitFor(() => {
      expect(screen.getByTestId('header')).toBeInTheDocument();
      expect(screen.getByTestId('fields')).toBeInTheDocument();
    });
  });

  it('should show confirmation popup when authenticateType is myinfo', async () => {
    require('../../utils/common/change.utils').authenticateType.mockReturnValue('myinfo');
    
    renderDashboard();
    
    await waitFor(() => {
      expect(screen.getByTestId('model-confirmationPopup')).toBeInTheDocument();
    });
  });

  it('should navigate to super-short-form when URL is valid', async () => {
    renderDashboard();
    
    await waitFor(() => {
      expect(mockNavigate).toHaveBeenCalledWith('sg/super-short-form');
    });
  });
});
