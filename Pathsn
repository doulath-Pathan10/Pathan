import React from 'react';
import { screen, fireEvent, waitFor } from '@testing-library/react';
import { render } from '../test-utils';
import DocumentUpload from './DocumentUpload';
import axios from 'axios';

// Mock axios with TypeScript support
jest.mock('axios');
const mockedAxios = axios as jest.Mocked<typeof axios>;

// Simple mock implementations for critical dependencies
jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getParameterByName: jest.fn(() => null),
    getDocumentStatus: jest.fn(() => false),
    getJourneyType: jest.fn(() => null),
  },
  authenticateType: jest.fn(() => 'manual'),
}));

// Mock only the functions we actually use
jest.mock('../../../services/common-service', () => ({
  documentSubmit: jest.fn(() => Promise.resolve({})),
  channelReference: jest.fn(() => Promise.resolve({ data: {} })),
  dispatchLoader: jest.fn(),
  dispatchCtaLoader: jest.fn(),
}));

// Minimal mock data that matches your actual store structure
const mockInitialState = {
  documentUploadList: {
    responseDocuments: [
      {
        document_list: [
          {
            document_category_code: 'ID',
            document_category: 'Identification',
            docCheck: 'N',
            isSlectedForUpload: 'N',
            min_options_req: 1,
            document_options: [
              {
                document_types: [
                  {
                    document_type_code: 'R0001',
                    document_type: 'NRIC',
                    uploaded_documents: [],
                    selectDocument: null,
                    document_requested_stage: 'BD',
                  },
                ],
              },
            ],
          },
        ],
        isSignatureDoc: false,
      },
    ],
    isDocumentUpdate: false,
  },
  stages: {
    stages: [
      {
        stageId: 'doc',
        stageInfo: {
          applicant_documents: [
            {
              document_list: [
                {
                  document_category_code: 'ID',
                  document_category: 'Identification',
                  docCheck: 'N',
                  isSlectedForUpload: 'N',
                  min_options_req: 1,
                  document_options: [
                    {
                      document_types: [
                        {
                          document_type_code: 'R0001',
                          document_type: 'NRIC',
                          uploaded_documents: [],
                          selectDocument: null,
                          document_requested_stage: 'BD',
                        },
                      ],
                    },
                  ],
                },
              ],
              isSignatureDoc: false,
            },
          ],
          application: {
            channel_reference: 'TEST123',
            application_reference: 'APP123',
          },
          applicants: {},
          products: [{ product_category: 'CC' }],
        },
      },
    ],
    journeyType: 'standard',
    isDocument: false,
    isDocumentUpload: false,
  },
  valueUpdate: {
    backNavigation: {
      nextStageId: null,
    },
  },
};

describe('DocumentUpload Component - Basic Tests', () => {
  const mockProps = {
    backHandler: jest.fn(),
  };

  beforeEach(() => {
    // Reset all mocks before each test
    jest.clearAllMocks();
    
    // Mock a successful axios response
    mockedAxios.post.mockResolvedValue({
      data: { 
        docId: 'DOC123', 
        documentStatus: 'Accepted',
        document_type_code: 'R0001'
      },
    });
  });

  test('1. Renders the document upload form', () => {
    render(<DocumentUpload {...mockProps} />, {
      initialState: mockInitialState,
    });

    expect(screen.getByText('Upload your identification')).toBeInTheDocument();
    expect(screen.getByLabelText('NRIC')).toBeInTheDocument();
    expect(screen.getByText('Upload')).toBeInTheDocument();
  });

  test('2. Allows document type selection', () => {
    render(<DocumentUpload {...mockProps} />, {
      initialState: mockInitialState,
    });

    const radioButton = screen.getByLabelText('NRIC');
    fireEvent.click(radioButton);
    
    expect(radioButton).toBeChecked();
  });

  test('3. Shows upload section when upload button is clicked', () => {
    render(<DocumentUpload {...mockProps} />, {
      initialState: mockInitialState,
    });

    // First select the document
    fireEvent.click(screen.getByLabelText('NRIC'));
    
    // Then click upload button
    fireEvent.click(screen.getByText('Upload'));

    expect(screen.getByText('Upload your nric')).toBeInTheDocument();
    expect(screen.getByTestId('file-input')).toBeInTheDocument();
  });

  test('4. Handles file upload successfully', async () => {
    const mockFile = new File(['test'], 'test.png', { type: 'image/png' });
    
    render(<DocumentUpload {...mockProps} />, {
      initialState: mockInitialState,
    });

    // Select document and go to upload view
    fireEvent.click(screen.getByLabelText('NRIC'));
    fireEvent.click(screen.getByText('Upload'));

    // Upload file
    const fileInput = screen.getByTestId('file-input');
    fireEvent.change(fileInput, { target: { files: [mockFile] } });

    await waitFor(() => {
      expect(mockedAxios.post).toHaveBeenCalled();
    });
  });

  test('5. Shows error when submitting without required documents', async () => {
    render(<DocumentUpload {...mockProps} />, {
      initialState: mockInitialState,
    });

    fireEvent.click(screen.getByText('Continue'));

    await waitFor(() => {
      expect(screen.getByText(/Please upload all mandatory documents/i)).toBeInTheDocument();
    });
  });

  test('6. Handles back button click', () => {
    render(<DocumentUpload {...mockProps} />, {
      initialState: mockInitialState,
    });

    fireEvent.click(screen.getByText('Back'));
    expect(mockProps.backHandler).toHaveBeenCalled();
  });
});
