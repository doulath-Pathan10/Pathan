import Rules_bd_1 from './Rules_bd_1';
import rulesUtils from './rules.utils';
import * as changeUtils from '../../utils/common/change.utils';

// Mock the dependencies
jest.mock('./rules.utils');
jest.mock('../../utils/common/change.utils', () => ({
  authenticateType: jest.fn(),
  getUrl: {
    getParameterByName: jest.fn(),
    getStageInfo: jest.fn()
  }
}));

describe('Rules_bd_1 Utility Function', () => {
  const mockBasicInfoFields = [
    { logical_field_name: "full_name" },
    { logical_field_name: "email" },
    { logical_field_name: "mobile_number" },
    { logical_field_name: "account_currency_9" },
    { logical_field_name: "account_currency" },
    { logical_field_name: "contact_preference_casa" },
    { logical_field_name: "dsa_code" },
    { logical_field_name: "nationality" }
  ];

  const mockAdditionalFields = [
    { logical_field_name: "see_other_myInfo_details" },
    { logical_field_name: "see_other_myInfo_details_consent" }
  ];

  const mockProps = [
    [
      {
        field_set_name: "Basic Information",
        fields: mockBasicInfoFields
      },
      {
        field_set_name: "Additional Information",
        fields: mockAdditionalFields
      }
    ]
  ];

  const mockApplication = {
    application: {
      source_system_name: "3",
      products: [
        { product_category: "CC" },
        { product_category: "CA" }
      ]
    }
  };

  const mockStageInfo = {
    stageInfo: {
      applicants: {
        auth_mode_a_1: 'IX',
        account_currency_9_a_1: '',
        account_currency_a_1: ''
      }
    },
    stageId: 'bd-1'
  };

  beforeEach(() => {
    jest.clearAllMocks();
    // Default mocks
    (changeUtils.authenticateType as jest.Mock).mockReturnValue('myinfo');
    (changeUtils.getUrl.getParameterByName as jest.Mock).mockReturnValue('true');
    (changeUtils.getUrl.getStageInfo as jest.Mock).mockReturnValue([mockStageInfo]);
  });

  it('should filter Basic Information fields', () => {
    const result = Rules_bd_1(mockProps, mockApplication);
    expect(rulesUtils).toHaveBeenCalledWith(
      expect.arrayContaining([
        expect.arrayContaining([
          expect.objectContaining({
            field_set_name: "Basic Information"
          })
        ])
      ]),
      expect.any(Object)
    );
  });

  describe('iBanking authentication (IX)', () => {
    beforeEach(() => {
      (changeUtils.getUrl.getStageInfo as jest.Mock).mockReturnValue([{
        stageInfo: {
          applicants: {
            auth_mode_a_1: 'IX'
          }
        },
        stageId: 'bd-1'
      }]);
    });

    it('should make iBanking fields non-editable', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.nonEditable[0]).toEqual(
        expect.arrayContaining([
          "full_name",
          "email",
          "mobile_number",
          "account_currency_9",
          "account_currency",
          "contact_preference_casa"
        ])
      );
    });

    it('should hide non-iBanking fields', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.hidden[0]).toEqual(
        expect.arrayContaining(["dsa_code", "nationality"])
      );
    });
  });

  describe('MyInfo/Resume authentication', () => {
    it('should hide personal info fields for MyInfo', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.hidden[0]).toEqual(
        expect.arrayContaining([
          "dsa_code",
          "nationality",
          "country_of_birth",
          "contact_preference",
          "gender",
          "marital_status"
        ])
      );
    });

    it('should make personal info fields non-editable for MyInfo', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.nonEditable[0]).toEqual(
        expect.arrayContaining([
          "full_name",
          "email",
          "date_of_birth",
          "mobile_number",
          "NRIC",
          "residential_address"
        ])
      );
    });

    it('should handle empty currency fields in stageInfo', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.hidden[0]).toEqual(
        expect.arrayContaining([
          "account_currency_9",
          "account_currency"
        ])
      );
    });
  });

  describe('Manual authentication', () => {
    beforeEach(() => {
      (changeUtils.authenticateType as jest.Mock).mockReturnValue('manual');
    });

    it('should hide sensitive fields for manual auth', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.hidden[0]).toEqual(
        expect.arrayContaining([
          "ownership_status",
          "education_level",
          "nationality",
          "residential_address"
        ])
      );
    });

    it('should make identity fields non-editable for manual auth', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [_, validationObj] = (rulesUtils as jest.Mock).mock.calls[0];
      
      expect(validationObj.nonEditable[0]).toEqual(
        expect.arrayContaining([
          "full_name",
          "email",
          "mobile_number",
          "NRIC",
          "passport_no"
        ])
      );
    });
  });

  describe('Product category handling', () => {
    it('should filter account_currency_9 when products are CC and CA', () => {
      Rules_bd_1(mockProps, mockApplication);
      const [fieldSet] = (rulesUtils as jest.Mock).mock.calls[0];
      
      const basicInfoFields = fieldSet[0][0].fields;
      expect(basicInfoFields.some((f: any) => f.logical_field_name === "account_currency_9")).toBe(false);
    });

    it('should keep account_currency_9 for other product combinations', () => {
      const modifiedApp = {
        ...mockApplication,
        application: {
          ...mockApplication.application,
          products: [
            { product_category: "CC" },
            { product_category: "CC" }
          ]
        }
      };
      Rules_bd_1(mockProps, modifiedApp);
      const [fieldSet] = (rulesUtils as jest.Mock).mock.calls[0];
      
      const basicInfoFields = fieldSet[0][0].fields;
      expect(basicInfoFields.some((f: any) => f.logical_field_name === "account_currency_9")).toBe(true);
    });
  });

  describe('Error handling', () => {
    it('should handle empty props', () => {
      const result = Rules_bd_1([[]], mockApplication);
      expect(rulesUtils).toHaveBeenCalledWith([[]], expect.any(Object));
    });

    it('should handle missing Basic Information field set', () => {
      const modifiedProps = [[
        { field_set_name: "Other Set", fields: [] }
      ]];
      const result = Rules_bd_1(modifiedProps, mockApplication);
      expect(rulesUtils).toHaveBeenCalled();
    });
  });
});
