import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import SelectionBox from './SelectionBox';
import { StoreModel } from '../../../utils/model/common-model';

// Mock the external utility functions
jest.mock('../../../utils/common/change.utils', () => ({
  fieldError: jest.fn(() => false),
  isFieldUpdate: jest.fn(),
  isMyinfoField: jest.fn(() => false),
  fieldIdAppend: jest.fn(() => 'test_field_a_1'),
  getUrl: {
    getProductInfo: jest.fn(() => [{}, { product_category: 'SA' }]),
    getJourneyType: jest.fn(() => ''),
    getUserInputs: jest.fn(() => ({})),
    getUpdatedStage: jest.fn(() => ({ updatedStageInputs: [] })),
  },
  authenticateType: jest.fn(() => 'manual'),
}));

jest.mock('../../../services/common-service', () => ({
  getLovData: jest.fn(),
  lovRequests: jest.fn(),
}));

const mockStore = configureStore([]);

describe('SelectionBox Component', () => {
  let store: any;
  let initialState: StoreModel;

  beforeEach(() => {
    initialState = {
      lov: {
        lov: [{
          label: 'test_field',
          value: [
            { CODE_VALUE: 'VAL1', CODE_DESC: 'Value 1' },
            { CODE_VALUE: 'VAL2', CODE_DESC: 'Value 2' }
          ]
        }]
      },
      fielderror: { error: [] },
      stages: {
        stages: [{
          stageId: 'test-stage',
          stageInfo: {
            applicants: {},
            products: [{ product_type: '123', product_category: 'SA' }]
          }
        }],
        userInput: { applicants: {} },
        myinfoResponse: {},
        dependencyFields: []
      },
      tax: {},
      last: {},
      valueupdate: {}
    };

    store = mockStore(initialState);
  });

  const defaultProps = {
    data: {
      logical_field_name: 'test_field',
      rwb_label_name: 'Test Field',
      editable: true,
      info_tooltips: 'No',
      details: 'Tooltip details'
    },
    handleCallback: jest.fn()
  };

  test('renders basic dropdown with label', () => {
    render(
      <Provider store={store}>
        <SelectionBox {...defaultProps} />
      </Provider>
    );

    expect(screen.getByText('Test Field')).toBeInTheDocument();
    expect(screen.getByRole('textbox')).toBeInTheDocument();
  });

  test('opens dropdown and shows options when clicked', () => {
    render(
      <Provider store={store}>
        <SelectionBox {...defaultProps} />
      </Provider>
    );

    fireEvent.click(screen.getByRole('textbox'));

    expect(screen.getByText('Value 1')).toBeInTheDocument();
    expect(screen.getByText('Value 2')).toBeInTheDocument();
  });

  test('selects an option and calls handleCallback', () => {
    render(
      <Provider store={store}>
        <SelectionBox {...defaultProps} />
      </Provider>
    );

    fireEvent.click(screen.getByRole('textbox'));
    fireEvent.click(screen.getByText('Value 1'));

    expect(defaultProps.handleCallback).toHaveBeenCalledWith(
      defaultProps.data,
      'VAL1'
    );
  });

  test('displays error message when field is required', () => {
    // Mock fieldError to return true
    jest.spyOn(require('../../../utils/common/change.utils'), 'fieldError').mockReturnValue(true);

    render(
      <Provider store={store}>
        <SelectionBox {...defaultProps} />
      </Provider>
    );

    expect(screen.getByText('Please select your Test Field')).toBeInTheDocument();
  });

  test('displays selected value when provided in store', () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        userInput: {
          applicants: {
            test_field_a_1: 'VAL1'
          }
        }
      }
    };

    store = mockStore(customState);

    render(
      <Provider store={store}>
        <SelectionBox {...defaultProps} />
      </Provider>
    );

    expect(screen.getByText('Value 1')).toBeInTheDocument();
  });

  test('handles myinfo fields correctly', () => {
    jest.spyOn(require('../../../utils/common/change.utils'), 'isMyinfoField').mockReturnValue(true);

    render(
      <Provider store={store}>
        <SelectionBox {...defaultProps} />
      </Provider>
    );

    expect(screen.getByRole('textbox')).toHaveClass('disabled');
  });

  test('handles tooltip display when configured', () => {
    const propsWithTooltip = {
      ...defaultProps,
      data: {
        ...defaultProps.data,
        info_tooltips: 'Yes'
      }
    };

    render(
      <Provider store={store}>
        <SelectionBox {...propsWithTooltip} />
      </Provider>
    );

    expect(screen.getByRole('button', { name: /info/i })).toBeInTheDocument();
  });
});
test('handles empty options list', () => {
  const emptyState = {
    ...initialState,
    lov: { lov: [] }
  };
  store = mockStore(emptyState);

  render(
    <Provider store={store}>
      <SelectionBox {...defaultProps} />
    </Provider>
  );

  fireEvent.click(screen.getByRole('textbox'));
  expect(screen.queryByText('Value 1')).not.toBeInTheDocument();
});

test('filters options based on search input', () => {
  render(
    <Provider store={store}>
      <SelectionBox {...defaultProps} />
    </Provider>
  );

  fireEvent.click(screen.getByRole('textbox'));
  fireEvent.change(screen.getByPlaceholderText('Search'), { 
    target: { value: 'Value 1' } 
  });

  expect(screen.getByText('Value 1')).toBeInTheDocument();
  expect(screen.queryByText('Value 2')).not.toBeInTheDocument();
});

test('handles country of tax residence fields', () => {
  const taxProps = {
    ...defaultProps,
    data: {
      ...defaultProps.data,
      logical_field_name: 'country_of_tax_residence_1'
    }
  };

  render(
    <Provider store={store}>
      <SelectionBox {...taxProps} />
    </Provider>
  );

  // Add specific assertions for tax residence behavior
  expect(screen.getByText('Test Field')).toBeInTheDocument();
});
