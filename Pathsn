import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Date from './Date'; // Adjust the import path as needed

const mockStore = configureStore([]);

describe('Date Component', () => {
  const mockProps = {
    data: {
      logical_field_name: 'date_of_birth',
      rwb_label_name: 'Date of Birth',
      mandatory: 'Yes',
      editable: false
    },
    handleCallback: jest.fn()
  };

  let store: any;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'bd-1',
          stageInfo: {
            products: [{
              product_type: 'loan',
              product_category: 'personal'
            }],
            applicants: {
              'date_of_birth_a_1': '1990-05-15',
              nationality_a_1: 'SGP',
              application_sourcing_a_1: '1'
            }
          }
        }],
        userInput: {
          applicants: {
            application_sourcing_a_1: '1'
          }
        }
      },
      fielderror: {
        error: []
      },
      agevalidation: {
        isValid: true
      }
    });

    // Mock sessionStorage
    Storage.prototype.getItem = jest.fn(() => '1');
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('renders without crashing', () => {
    render(
      <Provider store={store}>
        <Date {...mockProps} />
      </Provider>
    );
    
    expect(screen.getByText('Date of Birth')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('DD')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('MM')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('YYYY')).toBeInTheDocument();
  });

  test('pre-fills date from store', () => {
    render(
      <Provider store={store}>
        <Date {...mockProps} />
      </Provider>
    );
    
    expect(screen.getByPlaceholderText('DD')).toHaveValue('15');
    expect(screen.getByPlaceholderText('MM')).toHaveValue('05');
    expect(screen.getByPlaceholderText('YYYY')).toHaveValue('1990');
  });

  test('handles day input change', () => {
    render(
      <Provider store={store}>
        <Date {...mockProps} />
      </Provider>
    );
    
    const dayInput = screen.getByPlaceholderText('DD');
    fireEvent.change(dayInput, { target: { value: '20' } });
    
    expect(dayInput).toHaveValue('20');
    expect(mockProps.handleCallback).toHaveBeenCalled();
  });

  test('auto focuses month after entering 2 digit day', () => {
    render(
      <Provider store={store}>
        <Date {...mockProps} />
      </Provider>
    );
    
    const dayInput = screen.getByPlaceholderText('DD');
    const monthInput = screen.getByPlaceholderText('MM');
    
    fireEvent.change(dayInput, { target: { value: '20' } });
    
    // Since we can't actually test focus in JSDOM, we can verify the interaction
    expect(monthInput).toBeInTheDocument();
  });

  test('shows error for invalid date', () => {
    render(
      <Provider store={store}>
        <Date {...mockProps} />
      </Provider>
    );
    
    const dayInput = screen.getByPlaceholderText('DD');
    const monthInput = screen.getByPlaceholderText('MM');
    const yearInput = screen.getByPlaceholderText('YYYY');
    
    fireEvent.change(dayInput, { target: { value: '35' } });
    fireEvent.change(monthInput, { target: { value: '13' } });
    fireEvent.change(yearInput, { target: { value: '2023' } });
    
    expect(screen.getByText(/Date of Birth is invalid/)).toBeInTheDocument();
  });

  test('shows age validation error when applicable', () => {
    // Update store with product type that has age restrictions
    const ageRestrictedStore = mockStore({
      stages: {
        stages: [{
          stageId: 'bd-1',
          stageInfo: {
            products: [{
              product_type: 'credit_card',
              product_category: 'premium'
            }],
            applicants: {}
          }
        }],
        userInput: {
          applicants: {}
        }
      },
      fielderror: {
        error: []
      },
      agevalidation: {
        isValid: true
      }
    });

    render(
      <Provider store={ageRestrictedStore}>
        <Date {...mockProps} />
      </Provider>
    );
    
    const dayInput = screen.getByPlaceholderText('DD');
    const monthInput = screen.getByPlaceholderText('MM');
    const yearInput = screen.getByPlaceholderText('YYYY');
    
    // Enter a date that would make the user too young
    fireEvent.change(dayInput, { target: { value: '15' } });
    fireEvent.change(monthInput, { target: { value: '05' } });
    fireEvent.change(yearInput, { target: { value: '2020' } });
    
    expect(screen.getByText(/Date of Birth age must be/)).toBeInTheDocument();
  });

  test('disables fields when stage is bd-1', () => {
    render(
      <Provider store={store}>
        <Date {...mockProps} />
      </Provider>
    );
    
    expect(screen.getByPlaceholderText('DD')).toBeDisabled();
    expect(screen.getByPlaceholderText('MM')).toBeDisabled();
    expect(screen.getByPlaceholderText('YYYY')).toBeDisabled();
  });

  test('enables fields when not in bd-1 stage', () => {
    // Update store with different stage
    const enabledStore = mockStore({
      stages: {
        stages: [{
          stageId: 'other-stage',
          stageInfo: {
            products: [{
              product_type: 'loan',
              product_category: 'personal'
            }],
            applicants: {}
          }
        }],
        userInput: {
          applicants: {}
        }
      },
      fielderror: {
        error: []
      },
      agevalidation: {
        isValid: true
      }
    });

    render(
      <Provider store={enabledStore}>
        <Date {...mockProps} />
      </Provider>
    );
    
    expect(screen.getByPlaceholderText('DD')).toBeEnabled();
    expect(screen.getByPlaceholderText('MM')).toBeEnabled();
    expect(screen.getByPlaceholderText('YYYY')).toBeEnabled();
  });

  test('shows error when field is mandatory and empty', () => {
    const errorStore = mockStore({
      stages: {
        stages: [{
          stageId: 'other-stage',
          stageInfo: {
            products: [{
              product_type: 'loan',
              product_category: 'personal'
            }],
            applicants: {}
          }
        }],
        userInput: {
          applicants: {}
        }
      },
      fielderror: {
        error: ['date_of_birth']
      },
      agevalidation: {
        isValid: true
      }
    });

    render(
      <Provider store={errorStore}>
        <Date {...mockProps} />
      </Provider>
    );
    
    expect(screen.getByText(/Date of Birth is required/)).toBeInTheDocument();
  });

  test('handles passport expiry date validation', () => {
    const passportProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'pass_exp_dt'
      }
    };

    render(
      <Provider store={store}>
        <Date {...passportProps} />
      </Provider>
    );
    
    const dayInput = screen.getByPlaceholderText('DD');
    const monthInput = screen.getByPlaceholderText('MM');
    const yearInput = screen.getByPlaceholderText('YYYY');
    
    // Enter a past date
    fireEvent.change(dayInput, { target: { value: '15' } });
    fireEvent.change(monthInput, { target: { value: '05' } });
    fireEvent.change(yearInput, { target: { value: '2000' } });
    
    expect(screen.getByText(/Passport expiry date cannot be in the past/)).toBeInTheDocument();
  });

  test('pads single digit day/month with leading zero', () => {
    render(
      <Provider store={store}>
        <Date {...mockProps} />
      </Provider>
    );
    
    const dayInput = screen.getByPlaceholderText('DD');
    fireEvent.change(dayInput, { target: { value: '5' } });
    fireEvent.blur(dayInput);
    
    expect(dayInput).toHaveValue('05');
  });
});
