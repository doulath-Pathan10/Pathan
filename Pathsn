import RulesSSF from './RulesSSF';
import rulesUtils from './rules.utils';
import { authenticateType, filterDisableFields, getUrl } from '../../utils/common/change.utils';

// Mock all dependencies with proper implementations
jest.mock('./rules.utils', () => jest.fn(() => ({})));

jest.mock('../../utils/common/change.utils', () => ({
  authenticateType: jest.fn(),
  filterDisableFields: jest.fn((fields, missing, editable) => missing),
  getUrl: {
    getParameterByName: jest.fn((param) => {
      if (param === 'auth') return 'myinfo';
      if (param === 'isMyInfoVirtual') return 'true';
      return null;
    })
  }
}));

describe('RulesSSF', () => {
  const baseProps = [[
    {
      field_set_name: '   ',
      fields: [
        { logical_field_name: 'email' },
        { logical_field_name: 'mobile_number' },
        { logical_field_name: 'account_currency_9' },
        { logical_field_name: 'full_name' },
        { logical_field_name: 'other_field' },
        { logical_field_name: 'no_of_accounts_rwb' },
        { logical_field_name: 'mode_of_operation' },
        { logical_field_name: 'pass_exp_dt' },
        { logical_field_name: 'contact_preference_casa_etc' },
        { logical_field_name: 'dsa_code' },
        { logical_field_name: 'ownership_status' },
        { logical_field_name: 'residential_address' },
        { logical_field_name: 'see_other_myInfo_details' },
        { logical_field_name: 'date_of_birth' },
        { logical_field_name: 'residency_status' }
      ]
    }
  ]];

  const createStageInfo = (overrides = {}) => ({
    application: {
      source_system_name: '2'
    },
    products: [
      { product_category: 'TD', product_type: '337', product_category_name: 'Term Deposit', name: 'TD Account' },
      { product_category: 'CA', product_type: '456', product_category_name: 'Current Account', name: 'CA Account' }
    ],
    applicants: {
      auth_mode_a_1: 'IX',
      mobile_number_a_1: '12345678',
      email_a_1: 'test@example.com',
      account_currency_9_a_1: 'USD',
      account_currency_a_1: 'USD'
    },
    ...overrides
  });

  beforeEach(() => {
    jest.clearAllMocks();
    localStorage.clear();
    localStorage.setItem('products', JSON.stringify([
      { product_type: '337', product_category_name: 'Term Deposit', name: 'TD Account' },
      { product_type: '456', product_category_name: 'Current Account', name: 'CA Account' }
    ]));
  });

  describe('MyInfo Authentication', () => {
    beforeEach(() => {
      (authenticateType as jest.Mock).mockReturnValue('myinfo');
    });

    it('should set correct validation for MyInfo auth with source system 2', () => {
      const result = RulesSSF(baseProps, createStageInfo());
      
      expect(rulesUtils).toHaveBeenCalledWith(
        expect.any(Array),
        expect.objectContaining({
          nonEditable: expect.any(Array),
          hidden: expect.any(Array),
          modifyVisibility: expect.any(Array)
        })
      );
    });

    it('should handle missing mobile_number and email', () => {
      const stageInfo = createStageInfo({
        applicants: {
          mobile_number_a_1: undefined,
          email_a_1: undefined
        }
      });

      RulesSSF(baseProps, stageInfo);
      
      expect(filterDisableFields).toHaveBeenCalledWith(
        expect.any(Array),
        expect.arrayContaining(['mobile_number', 'email', 'ownership_status']),
        expect.any(Array)
      );
    });

    it('should handle multiple applicants', () => {
      localStorage.setItem('applicantNo', '2');
      const result = RulesSSF(baseProps, createStageInfo());
      
      expect(rulesUtils).toHaveBeenCalledWith(
        expect.any(Array),
        expect.objectContaining({
          hidden: [expect.arrayContaining([
            "contact_preference_casa_etc",
            "dsa_code",
            "pass_exp_dt"
          ])]
        })
      );
    });

    it('should handle TD products specifically', () => {
      const stageInfo = createStageInfo({
        products: [
          { product_category: 'TD', product_type: '337' },
          { product_category: 'TD', product_type: '338' }
        ]
      });

      const result = RulesSSF(baseProps, stageInfo);
      
      expect(rulesUtils).toHaveBeenCalledWith(
        expect.any(Array),
        expect.objectContaining({
          hidden: [expect.arrayContaining([
            "no_of_accounts_rwb",
            "mode_of_operation",
            "pass_exp_dt"
          ])]
        })
      );
    });

    it('should show default editable fields for non-CA/SA products', () => {
      const stageInfo = createStageInfo({
        products: [
          { product_category: 'TD', product_type: '123' }
        ]
      });

      RulesSSF(baseProps, stageInfo);
      
      expect(filterDisableFields).toHaveBeenCalledWith(
        expect.any(Array),
        expect.any(Array),
        ['email', 'mobile_number', 'account_currency_9']
      );
    });
  });

  describe('iBanking Authentication', () => {
    it('should set correct validation for iBanking auth', () => {
      const stageInfo = createStageInfo({
        applicants: {
          auth_mode_a_1: 'IX'
        }
      });

      const result = RulesSSF(baseProps, stageInfo);
      
      expect(rulesUtils).toHaveBeenCalledWith(
        expect.any(Array),
        expect.objectContaining({
          nonEditable: expect.arrayContaining([
            'full_name', 'mobile_number', 'email', 'account_currency_9', 'account_currency'
          ]),
          hidden: expect.arrayContaining(['other_field'])
        })
      );
    });

    it('should only show ibanking fields when auth is IX', () => {
      const stageInfo = createStageInfo({
        applicants: {
          auth_mode_a_1: 'IX'
        }
      });

      const result = RulesSSF(baseProps, stageInfo);
      
      const ibankingFields = ["full_name", "email", "mobile_number", "account_currency_9", "account_currency", "contact_preference_casa_etc"];
      expect(rulesUtils).toHaveBeenCalledWith(
        expect.any(Array),
        expect.objectContaining({
          hidden: [expect.not.arrayContaining(ibankingFields)]
        })
      );
    });
  });

  describe('Manual Authentication', () => {
    beforeEach(() => {
      (authenticateType as jest.Mock).mockReturnValue('manual');
    });

    it('should set correct validation for manual auth', () => {
      const result = RulesSSF(baseProps, createStageInfo());
      
      expect(rulesUtils).toHaveBeenCalledWith(
        expect.any(Array),
        expect.objectContaining({
          modifyVisibility: [expect.arrayContaining(['date_of_birth', 'residency_status'])],
          hidden: [expect.arrayContaining([
            "ownership_status",
            "residential_address",
            "see_other_myInfo_details"
          ])]
        })
      );
    });
  });

  describe('Default Authentication', () => {
    beforeEach(() => {
      (authenticateType as jest.Mock).mockReturnValue('other');
    });

    it('should set default hidden fields', () => {
      const result = RulesSSF(baseProps, createStageInfo());
      
      expect(rulesUtils).toHaveBeenCalledWith(
        expect.any(Array),
        expect.objectContaining({
          hidden: [expect.arrayContaining([
            "see_other_myInfo_details",
            "contact_preference_casa_etc",
            "dsa_code"
          ])]
        })
      );
    });
  });

  describe('Field Grouping Logic', () => {
    it('should group fields by product category and name', () => {
      (authenticateType as jest.Mock).mockReturnValue('manual');
      
      const propsWithSubProducts = [[
        {
          field_set_name: '   ',
          fields: [
            { 
              logical_field_name: 'email',
              sub_product_code: ['337', '456']
            }
          ]
        }
      ]];

      const result = RulesSSF(propsWithSubProducts, createStageInfo());
      
      // Verify the field grouping logic by checking the props passed to rulesUtils
      const [updatedProps] = (rulesUtils as jest.Mock).mock.calls[0];
      expect(updatedProps[0].length).toBeGreaterThan(1);
    });
  });

  describe('Edge Cases', () => {
    it('should handle empty products array', () => {
      localStorage.setItem('products', '[]');
      const result = RulesSSF(baseProps, createStageInfo());
      expect(result).toBeDefined();
    });

    it('should handle missing field_set_name', () => {
      const modifiedProps = [[{ fields: [] }]];
      const result = RulesSSF(modifiedProps, createStageInfo());
      expect(result).toBeDefined();
    });

    it('should handle empty stageInfo', () => {
      const result = RulesSSF(baseProps, {} as any);
      expect(result).toBeDefined();
    });

    it('should handle missing applicants', () => {
      const stageInfo = createStageInfo();
      delete stageInfo.applicants;
      const result = RulesSSF(baseProps, stageInfo);
      expect(result).toBeDefined();
    });
  });
});
