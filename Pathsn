// Additional test cases to improve coverage

test('handles different campaign IDs for PIL products', async () => {
  const storeWithBDC = mockStore({
    ...store.getState(),
    stages: {
      stages: [{
        stageInfo: {
          products: [{
            campaign: 'HKBDC23PESTP10',
            product_type: '1313'
          }]
        }
      }]
    }
  });

  render(
    <Provider store={storeWithBDC}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={0}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    expect(screen.getByText('Mock PDF Component')).toBeInTheDocument();
  });
});

test('handles credit card campaign IDs', async () => {
  const storeWithCC = mockStore({
    ...store.getState(),
    stages: {
      stages: [{
        stageInfo: {
          products: [{
            campaign: 'HKSOG20VAWV000',
            product_type: '1313'
          }]
        }
      }]
    },
    preApproval: {
      formConfigmetaData: {
        products: [{
          campaign: 'HKSOG20VAWV000'
        }]
      }
    }
  });

  render(
    <Provider store={storeWithCC}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={1}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    expect(screen.getByText('Mock PDF Component')).toBeInTheDocument();
  });
});

test('handles premium code for HKSOG20VAWV000 campaign', async () => {
  const { getUrl } = require('../../../../utils/common/change.utils');
  getUrl.getParameterByName.mockReturnValue('001');

  const storeWithPremium = mockStore({
    ...store.getState(),
    stages: {
      stages: [{
        stageInfo: {
          products: [{
            campaign: 'HKSOG20VAWV000',
            product_type: '1313'
          }]
        }
      }]
    },
    preApproval: {
      formConfigmetaData: {
        products: [{
          campaign: 'HKSOG20VAWV000'
        }]
      }
    }
  });

  render(
    <Provider store={storeWithPremium}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={1}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    expect(screen.getByText('Mock PDF Component')).toBeInTheDocument();
  });
});

test('handles Chinese language for KFS document', async () => {
  const { getUrl } = require('../../../../utils/common/change.utils');
  getUrl.getLanguageInfo.mockReturnValue('zh');

  process.env.REACT_APP_KFS_DOC_URL_Chinees = 'https://example.com/chinese-kfs';

  render(
    <Provider store={store}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={0}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    expect(screen.getByText('Mock PDF Component')).toBeInTheDocument();
  });
});

test('handles localhost environment for PDF URLs', async () => {
  Object.defineProperty(window, 'location', {
    value: {
      host: 'localhost:3001'
    },
    writable: true
  });

  render(
    <Provider store={store}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={0}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    expect(screen.getByText('Mock PDF Component')).toBeInTheDocument();
  });
});

test('handles Android user agent detection', async () => {
  Object.defineProperty(navigator, 'userAgent', {
    value: 'Mozilla/5.0 (Linux; Android 10; SM-G975F)',
    writable: true
  });

  render(
    <Provider store={store}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={0}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    expect(screen.getByText('Mock PDF Component')).toBeInTheDocument();
  });
});

test('handles Safari browser detection for PDF download', async () => {
  Object.defineProperty(navigator, 'userAgent', {
    value: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15',
    writable: true
  });

  const mockLink = {
    href: '',
    download: '',
    click: jest.fn()
  };
  
  document.createElement = jest.fn().mockReturnValue(mockLink);
  document.body.appendChild = jest.fn();
  document.body.removeChild = jest.fn();

  render(
    <Provider store={store}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={0}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    const downloadBtn = screen.getByRole('button', { name: /download/i });
    fireEvent.click(downloadBtn);
    expect(mockLink.click).toHaveBeenCalled();
  });
});

test('handles different PIL PDF titles for download', async () => {
  const mockLink = {
    href: '',
    download: '',
    click: jest.fn()
  };
  
  document.createElement = jest.fn().mockReturnValue(mockLink);
  document.body.appendChild = jest.fn();
  document.body.removeChild = jest.fn();

  render(
    <Provider store={store}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={1}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    // Test for "II. Personal Loan Terms" download
    const downloadSpan = screen.getByText(/Download/);
    fireEvent.click(downloadSpan);
    expect(mockLink.click).toHaveBeenCalled();
  });
});

test('handles different CC PDF titles for download', async () => {
  const storeWithCC = mockStore({
    ...store.getState(),
    stages: {
      stages: [{
        stageInfo: {
          products: [{
            campaign: 'HKSOG20VAWV000',
            product_type: '1313'
          }]
        }
      }]
    },
    preApproval: {
      formConfigmetaData: {
        products: [{
          campaign: 'HKSOG20VAWV000'
        }]
      }
    }
  });

  const { getData } = require('../../services/preApprovalServices');
  getData.mockResolvedValue({
    data: {
      ...getData().data,
      tncLinkCampaignCode: {
        HKSOG20VAWV000: [{
          pdfLinks: [
            { Title: 'III. Client Terms', url: 'https://example.com/client-terms.pdf' },
            { Title: 'III. Credit Card Terms', url: 'https://example.com/cc-terms.pdf' },
            { Title: 'VI. Welcome Offers', url: 'https://example.com/welcome.pdf' },
            { Title: 'IX. E-Statement Service', url: 'https://example.com/estate.pdf' },
            { Title: 'X. Points Redemption', url: 'https://example.com/points.pdf' },
            { Title: 'XI. Credit Card Instalment Plan', url: 'https://example.com/instalment.pdf' }
          ]
        }]
      }
    }
  });

  const mockLink = {
    href: '',
    download: '',
    click: jest.fn()
  };
  
  document.createElement = jest.fn().mockReturnValue(mockLink);
  document.body.appendChild = jest.fn();
  document.body.removeChild = jest.fn();

  render(
    <Provider store={storeWithCC}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={1}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    const downloadElements = screen.getAllByText(/Download/);
    if (downloadElements.length > 1) {
      fireEvent.click(downloadElements[1]); // Click on table download
      expect(mockLink.click).toHaveBeenCalled();
    }
  });
});

test('handles scroll behavior with btnClickScroll', async () => {
  const mockScrollBy = jest.fn();
  
  render(
    <Provider store={store}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={0}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    const pdfContainer = screen.getByText('Mock PDF Component').parentElement;
    if (pdfContainer) {
      pdfContainer.scrollBy = mockScrollBy;
      
      const nextButton = screen.getByRole('contentinfo');
      fireEvent.click(nextButton);
      expect(mockScrollBy).toHaveBeenCalledWith({ top: expect.any(Number), behavior: "smooth" });
    }
  });
});

test('handles scroll to bottom detection', async () => {
  render(
    <Provider store={store}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={0}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    const pdfContainer = screen.getByText('Mock PDF Component').parentElement;
    if (pdfContainer) {
      // Mock scroll properties
      Object.defineProperty(pdfContainer, 'scrollTop', { value: 450, configurable: true });
      Object.defineProperty(pdfContainer, 'scrollHeight', { value: 500, configurable: true });
      Object.defineProperty(pdfContainer, 'clientHeight', { value: 100, configurable: true });
      
      fireEvent.scroll(pdfContainer);
      expect(mockOnScrollEnd).toHaveBeenCalledWith(false);
    }
  });
});

test('handles productType 1313 with HKSOZ00MCWB000 campaign', async () => {
  const { getUrl } = require('../../../../utils/common/change.utils');
  getUrl.getParameterByName.mockReturnValue('001');

  const storeWithSpecialCampaign = mockStore({
    ...store.getState(),
    stages: {
      stages: [{
        stageInfo: {
          products: [{
            campaign: 'HKSOZ00MCWB000',
            product_type: '1313'
          }]
        }
      }]
    },
    preApproval: {
      formConfigmetaData: {
        products: [{
          campaign: 'HKSOZ00MCWB000'
        }]
      }
    }
  });

  render(
    <Provider store={storeWithSpecialCampaign}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={1}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    expect(screen.getByText('Mock PDF Component')).toBeInTheDocument();
  });
});

test('handles iPad user agent detection', async () => {
  Object.defineProperty(navigator, 'userAgent', {
    value: 'Mozilla/5.0 (iPad; CPU OS 14_0 like Mac OS X) AppleWebKit/605.1.15',
    writable: true
  });

  render(
    <Provider store={store}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={0}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    expect(screen.getByText('Mock PDF Component')).toBeInTheDocument();
  });
});

test('handles iPhone with non-Safari browser', async () => {
  Object.defineProperty(navigator, 'userAgent', {
    value: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/91.0.4472.80 Mobile/15E148',
    writable: true
  });

  render(
    <Provider store={store}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={0}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    expect(screen.getByText('Mock PDF Component')).toBeInTheDocument();
  });
});

test('handles accept button click', async () => {
  render(
    <Provider store={store}>
      <OnboardingBeforeStart 
        isVisible={false}
        onScrollEnd={mockOnScrollEnd}
        stageID={0}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    const acceptButton = screen.getByRole('button', { name: /accept/i });
    fireEvent.click(acceptButton);
    expect(mockNextPage).toHaveBeenCalled();
  });
});

test('handles PDF height calculation for stageID 1', async () => {
  render(
    <Provider store={store}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={1}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    expect(screen.getByText('Mock PDF Component')).toBeInTheDocument();
    // PDF height calculation should be applied
    const pdfView = screen.getByText('Mock PDF Component').closest('.pdf-view div');
    expect(pdfView).toHaveStyle('max-height: calc(100vh - 0px)');
  });
});

test('handles window history replaceState', async () => {
  const mockReplaceState = jest.fn();
  Object.defineProperty(window, 'history', {
    value: { replaceState: mockReplaceState },
    writable: true
  });

  render(
    <Provider store={store}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={0}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    expect(mockReplaceState).toHaveBeenCalledWith("", "", "/hk/before-start");
  });
});

test('handles API error gracefully', async () => {
  const { getData } = require('../../services/preApprovalServices');
  getData.mockRejectedValue(new Error('API Error'));

  render(
    <Provider store={store}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={0}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  // Component should still render spinner when API fails
  expect(screen.getByText('Loading...')).toBeInTheDocument();
});

test('handles PDF data API error', async () => {
  const { getPDFData } = require('../../services/preApprovalServices');
  getPDFData.mockRejectedValue(new Error('PDF API Error'));

  render(
    <Provider store={store}>
      <OnboardingBeforeStart 
        isVisible={true}
        onScrollEnd={mockOnScrollEnd}
        stageID={0}
        nextPage={mockNextPage}
      />
    </Provider>
  );

  await waitFor(() => {
    // Should show spinner until PDF loads or fails
    expect(screen.getByText('Loading...')).toBeInTheDocument();
  });
});
