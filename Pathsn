import Rules_ad_1 from './Rules_ad_1';
import rulesUtils from './rules.utils';
import { store } from '../../utils/store/store';

// Mock localStorage
const localStorageMock = (() => {
  let store: Record<string, string> = {};
  return {
    getItem: (key: string) => store[key] || null,
    setItem: (key: string, value: string) => {
      store[key] = value.toString();
    },
    clear: () => {
      store = {};
    }
  };
})();

Object.defineProperty(window, 'localStorage', {
  value: localStorageMock
});

// Mock rulesUtils
jest.mock('./rules.utils', () => jest.fn());

describe('Rules_ad_1 Utility Function', () => {
  beforeEach(() => {
    localStorage.clear();
    jest.clearAllMocks();
  });

  const mockProps = [
    [
      {
        field_set_name: "Additional Details",
        fields: [
          { logical_field_name: "reason_for_account_rwb", component_type: "Text" },
          { logical_field_name: "Initial_deposit_rwb", component_type: "Number" },
          { logical_field_name: "source_of_fund_rwb", component_type: "Text" }
        ]
      },
      {
        field_set_name: "Banking Services",
        fields: [
          { logical_field_name: "debit_card_request_rwb", component_type: "Checkbox" },
          { logical_field_name: "issuance_type", component_type: "Radio" },
          { logical_field_name: "embossed_dc_name_rwb", component_type: "Text" },
          { logical_field_name: "existing_account_no_dc", component_type: "Text" },
          { logical_field_name: "cheque_book_request_rwb", component_type: "Checkbox" }
        ]
      },
      {
        field_set_name: "Time Deposit Details",
        fields: [
          { logical_field_name: "td_product_currency_value", component_type: "Text" },
          { logical_field_name: "td_depoist_amount", component_type: "Number" }
        ]
      }
    ]
  ];

  const mockStageInfo = {
    applicants: {
      no_of_accounts_rwb_a_1: 2
    },
    products: [
      { product_category: 'CA', product_type: '307', product_category_name: 'Current Account', name: 'Premium Account' }
    ]
  };

  describe('Basic functionality', () => {
    it('should return filtered fields with validation object', () => {
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'Current Account', name: 'Premium Account' }]));
      
      Rules_ad_1(mockProps, mockStageInfo);
      
      expect(rulesUtils).toHaveBeenCalled();
      expect(rulesUtils.mock.calls[0][0]).toBeDefined();
      expect(rulesUtils.mock.calls[0][1]).toEqual({
        nonEditable: [],
        hidden: expect.any(Array),
        modifyVisibility: expect.any(Array)
      });
    });
  });

  describe('Single product scenarios', () => {
    it('should handle single product with Additional Details', () => {
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'Current Account', name: 'Premium Account' }]));
      
      Rules_ad_1(mockProps, mockStageInfo);
      
      const filteredFields = rulesUtils.mock.calls[0][0];
      expect(filteredFields[0][0].field_set_name).toContain('Additional Details');
    });

    it('should hide specific fields for CA product type 307', () => {
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'Current Account', name: 'Premium Account' }]));
      
      Rules_ad_1(mockProps, mockStageInfo);
      
      const validationObj = rulesUtils.mock.calls[0][1];
      expect(validationObj.hidden[0]).toContain('reason_for_account_rwb');
      expect(validationObj.hidden[0]).toContain('source_of_fund_rwb');
    });
  });

  describe('Multiple products scenarios', () => {
    it('should handle multiple products with prefixed field names', () => {
      localStorage.setItem('products', JSON.stringify([
        { product_category_name: 'Current Account', name: 'Premium Account' },
        { product_category_name: 'Savings Account', name: 'Basic Savings' }
      ]));
      
      const modifiedStageInfo = {
        ...mockStageInfo,
        products: [
          { product_category: 'CA', product_type: '307' },
          { product_category: 'SA', product_type: '310' }
        ]
      };
      
      Rules_ad_1(mockProps, modifiedStageInfo);
      
      const filteredFields = rulesUtils.mock.calls[0][0];
      expect(filteredFields[0][0].field_set_name).toContain('Current Account - Premium Account');
      expect(filteredFields[0][1].field_set_name).toContain('Current Account - Premium Account');
    });

    it('should filter banking services fields for specific product combinations', () => {
      localStorage.setItem('products', JSON.stringify([
        { product_category_name: 'Current Account', name: 'Premium Account' },
        { product_category_name: 'Savings Account', name: 'Basic Savings' }
      ]));
      
      const modifiedStageInfo = {
        ...mockStageInfo,
        products: [
          { product_category: 'CA', product_type: '307' },
          { product_category: 'SA', product_type: '318' }
        ]
      };
      
      Rules_ad_1(mockProps, modifiedStageInfo);
      
      const filteredFields = rulesUtils.mock.calls[0][0];
      const bankingServicesFields = filteredFields[0][1].fields;
      expect(bankingServicesFields.some((f: any) => f.logical_field_name === 'cheque_book_request_rwb')).toBe(false);
    });
  });

  describe('Time Deposit product scenarios', () => {
    it('should handle TD products and modify field types', () => {
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'Time Deposit', name: 'Fixed Deposit' }]));
      
      const modifiedStageInfo = {
        ...mockStageInfo,
        products: [
          { product_category: 'TD', product_type: '500' }
        ]
      };
      
      Rules_ad_1(mockProps, modifiedStageInfo);
      
      const filteredFields = rulesUtils.mock.calls[0][0];
      const tdFields = filteredFields[0].find((fs: any) => fs.field_set_name === 'Time Deposit Details').fields;
      const currencyField = tdFields.find((f: any) => f.logical_field_name === 'td_product_currency_value');
      expect(currencyField.component_type).toBe('SelectionBox');
    });

    it('should hide debit card fields for TD products', () => {
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'Time Deposit', name: 'Fixed Deposit' }]));
      
      const modifiedStageInfo = {
        ...mockStageInfo,
        products: [
          { product_category: 'TD', product_type: '500' }
        ]
      };
      
      Rules_ad_1(mockProps, modifiedStageInfo);
      
      const validationObj = rulesUtils.mock.calls[0][1];
      expect(validationObj.hidden[0]).toContain('debit_card_request_rwb');
      expect(validationObj.hidden[0]).toContain('existing_account_no_dc');
    });
  });

  describe('Repeat count functionality', () => {
    it('should create additional field sets based on repeat count', () => {
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'Current Account', name: 'Premium Account' }]));
      
      const modifiedStageInfo = {
        ...mockStageInfo,
        applicants: {
          no_of_accounts_rwb_a_1: 3
        },
        products: [
          { product_category: 'CA', product_type: '310' }
        ]
      };
      
      Rules_ad_1(mockProps, modifiedStageInfo);
      
      const filteredFields = rulesUtils.mock.calls[0][0];
      expect(filteredFields[0].length).toBeGreaterThan(2); // Original + 2 repeats
      expect(filteredFields[0][2].field_set_name).toBe('Additional Details');
      expect(filteredFields[0][2].fields[0].logical_field_name).toContain('_2');
    });

    it('should hide fields for repeated accounts with specific product types', () => {
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'Current Account', name: 'Premium Account' }]));
      
      const modifiedStageInfo = {
        ...mockStageInfo,
        applicants: {
          no_of_accounts_rwb_a_1: 3
        },
        products: [
          { product_category: 'CA', product_type: '310' }
        ]
      };
      
      Rules_ad_1(mockProps, modifiedStageInfo);
      
      const validationObj = rulesUtils.mock.calls[0][1];
      expect(validationObj.hidden[0]).toContain('cheque_book_request_rwb_2');
      expect(validationObj.hidden[0]).toContain('reason_for_account_rwb_2');
    });
  });

  describe('Edge cases', () => {
    it('should handle empty products array in localStorage', () => {
      localStorage.setItem('products', JSON.stringify([]));
      
      Rules_ad_1(mockProps, mockStageInfo);
      
      expect(rulesUtils).toHaveBeenCalled();
    });

    it('should handle missing no_of_accounts_rwb_a_1 in stageInfo', () => {
      localStorage.setItem('products', JSON.stringify([{ product_category_name: 'Current Account', name: 'Premium Account' }]));
      
      const modifiedStageInfo = {
        ...mockStageInfo,
        applicants: {}
      };
      
      Rules_ad_1(mockProps, modifiedStageInfo);
      
      expect(rulesUtils).toHaveBeenCalled();
    });
  });
});
