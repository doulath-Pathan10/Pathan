import { AppDispatch } from "../../services/common-service";
import { FindIndex } from "../../utils/common/change.utils";
import { KeyWithAnyModel,StageDetails,StoreModel,taxStoreModel } from "../../utils/model/common-model";
import { fieldErrorAction } from "../../utils/store/field-error-slice";
import { stagesAction } from "../../utils/store/stages-slice";
import { taxAction } from "../../utils/store/tax-slice";
import { getUrl } from "../../utils/common/change.utils";
import { useSelector } from "react-redux";

export const getFields = (
  getStages: Array<StageDetails>,
  taxSelector: taxStoreModel,
  action: string,
  applicantsSelectors:KeyWithAnyModel

): any => {
  return (dispatch: AppDispatch) => {
    let fields: Array<KeyWithAnyModel> | undefined = getStages[0].stageInfo.fieldmetadata.data.stages[1].fields;
    let newFileds: Array<KeyWithAnyModel> = [];
    let newFieldsArray: Array<string> = [];
    const journeyType = getUrl.getJourneyType();
    const applicantsSelector = applicantsSelectors

    let getClonedField = (logical_field_name: string) => {
      if (fields) {
        let field = fields.find(
          fieldData => fieldData.logical_field_name === logical_field_name
        );
        if (field && field.logical_field_name) {
          return { ...field };
        } else {
          return null;
        }
      } else {
        return null;
      }
    };

    taxSelector.fields.forEach((field: string) => {
        
      let no_of_tax_residency_country = getClonedField("no_of_tax_residency_country");
      let country_of_tax_residence = getClonedField("country_of_tax_residence");
      let tax_id_no =getClonedField("tax_id_no");
      let crs_reason_code= getClonedField("crs_reason_code");
      let crs_comments = getClonedField("crs_comments");
      if (field ==="no_of_tax_residency_country"&& no_of_tax_residency_country) {
        no_of_tax_residency_country.logical_field_name = field;
        no_of_tax_residency_country.component_type = "Selection Box";
        no_of_tax_residency_country.rwb_label_name = no_of_tax_residency_country.rwb_label_name;
        if (journeyType) {
            no_of_tax_residency_country.hide_remove_btn = true;
        }
        newFileds.push(no_of_tax_residency_country);
        newFieldsArray.push(no_of_tax_residency_country.logical_field_name);
      }
      else if((field ==="country_of_tax_residence_1"||field ==="country_of_tax_residence_2"||field ==="country_of_tax_residence_3"||field ==="country_of_tax_residence_4")&& country_of_tax_residence){
        country_of_tax_residence.logical_field_name=field;
        country_of_tax_residence.component_type = "Selection Box";
        country_of_tax_residence.rwb_label_name = country_of_tax_residence.rwb_label_name;
      newFileds.push(country_of_tax_residence);
      newFieldsArray.push(country_of_tax_residence.logical_field_name);

      }
      else if((field ==="tax_id_no_1"||field==="tax_id_no_2"||field==="tax_id_no_3"||field==="tax_id_no_4")&& tax_id_no){
        tax_id_no.logical_field_name=field;
        tax_id_no.component_type = "Text";
        tax_id_no.rwb_label_name = tax_id_no.rwb_label_name;
        if (journeyType) {
          tax_id_no.hide_remove_btn = true;
      }
      newFileds.push(tax_id_no);
      newFieldsArray.push(tax_id_no.logical_field_name);
    }
    else if((field ==="crs_reason_code_1"||field ==="crs_reason_code_2"||field ==="crs_reason_code_3"||field ==="crs_reason_code_4")&& crs_reason_code){
      crs_reason_code.logical_field_name=field;
      crs_reason_code.component_type = "Selection Box";
      crs_reason_code.rwb_label_name = crs_reason_code.rwb_label_name;
      if (journeyType) {
        crs_reason_code.hide_remove_btn = true;
    }
    newFileds.push(crs_reason_code);
    newFieldsArray.push(crs_reason_code.logical_field_name);
  }
  else if((field ==="crs_comments_1"||field ==="crs_comments_2"||field ==="crs_comments_3"||field ==="crs_comments_4")&& crs_comments){
    crs_comments.logical_field_name=field;
    crs_comments.component_type = "Text";
    crs_comments.rwb_label_name = crs_comments.rwb_label_name;
  if (journeyType) {
      crs_comments.hide_remove_btn = true;
  }
   newFileds.push(crs_comments);
  newFieldsArray.push(crs_comments.logical_field_name);
  
}
    });
if (newFieldsArray.length > 0) {
      dispatch(fieldErrorAction.getMandatoryFields(newFieldsArray));
      const valObj:any={
        "no_of_tax_residency_country_a_1": "",
        "country_of_tax_residence_1_a_1": "",
        "country_of_tax_residence_2_a_1": "",
        "country_of_tax_residence_3_a_1": "",
        "country_of_tax_residence_4_a_1": "",
        "tax_id_no_1_a_1":"",
        "tax_id_no_2_a_1":"",
        "tax_id_no_3_a_1":"",
        "tax_id_no_4_a_1":"",
        "crs_reason_code_1_a_1":"",
        "crs_reason_code_2_a_1":"",
        "crs_reason_code_3_a_1":"",
        "crs_reason_code_4_a_1":"",
        "crs_comments_1_a_1":"",
        "crs_comments_2_a_1":"",
        "crs_comments_3_a_1":"",
        "crs_comments_4_a_1":"",
      }
      for(let key in valObj) {
        if(applicantsSelector[key]!==""&&applicantsSelector[key]!==undefined){
             valObj[key] = applicantsSelector[key];
        }else{
          delete valObj[key]
        }
    }
     dispatch(
        stagesAction.removeAddToggleField({
          removeFields: [],
          newFields: newFieldsArray,
          value: valObj
        })
      );
    }
  return newFileds;
  };
};
