import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import OnboardingBeforeStart from './OnboardingBeforeStart';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Pdf from '../../../../shared/components/pdf/pdf';

// Mock dependencies
jest.mock('../../services/preApprovalServices', () => ({
  getData: jest.fn(),
  getPDFData: jest.fn(),
}));

jest.mock('../../../../shared/components/pdf/pdf', () => {
  return jest.fn(() => <div>Mock PDF Component</div>);
});

jest.mock('../../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn(() => 'en'),
    getParameterByName: jest.fn(() => null),
  },
}));

// Mock Redux store
const mockStore = configureStore([]);

describe('OnboardingBeforeStart Component', () => {
  const mockGetData = require('../../services/preApprovalServices').getData;
  const mockGetPDFData = require('../../services/preApprovalServices').getPDFData;

  beforeEach(() => {
    mockGetData.mockResolvedValue({
      data: {
        products: {
          'test-campaign': [{ pdfURL: 'https://test.pdf' }],
        },
        productsMob: {
          'test-campaign': [{ pdfURL: 'https://test-mobile.pdf' }],
        },
        CampaignTnC: {
          'test-campaign': [{ pdfURL: 'https://test-tnc.pdf' }],
        },
        CampaignTnCMob: {
          'test-campaign': [{ pdfURL: 'https://test-tnc-mobile.pdf' }],
        },
        tncLinkCampaignCode: {
          'test-campaign': [{
            pdfLinks: [
              { url: 'https://link1.pdf', Title: 'Terms 1' },
            ],
          }],
        },
      },
    });
    
    mockGetPDFData.mockResolvedValue('mock-pdf-data');
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('1. renders spinner initially', () => {
    const store = mockStore({
      preApproval: {
        formConfigmetaData: {
          products: [{ campaign: 'test-campaign' }],
        },
      },
      stages: {
        stages: [{
          stageInfo: {
            products: [{ campaign: 'test-campaign', product_type: '1313' }]
          }
        }],
      },
    });

    render(
      <Provider store={store}>
        <OnboardingBeforeStart stageID={0} />
      </Provider>
    );
    
    expect(screen.getByTestId('spinner')).toBeInTheDocument();
  });

  it('2. renders main content after loading for stage 0', async () => {
    const store = mockStore({
      preApproval: {
        formConfigmetaData: {
          products: [{ campaign: 'test-campaign' }],
        },
      },
      stages: {
        stages: [{
          stageInfo: {
            products: [{ campaign: 'test-campaign', product_type: '1313' }]
          }
        }],
      },
    });

    render(
      <Provider store={store}>
        <OnboardingBeforeStart stageID={0} />
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByText('Download')).toBeInTheDocument();
      expect(Pdf).toHaveBeenCalled();
    });
  });

  it('3. renders main content after loading for stage 1', async () => {
    const store = mockStore({
      preApproval: {
        formConfigmetaData: {
          products: [{ campaign: 'test-campaign' }],
        },
      },
      stages: {
        stages: [{
          stageInfo: {
            products: [{ campaign: 'test-campaign', product_type: '1313' }]
          }
        }],
      },
    });

    render(
      <Provider store={store}>
        <OnboardingBeforeStart stageID={1} />
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByText('Download')).toBeInTheDocument();
      expect(Pdf).toHaveBeenCalled();
    });
  });

  it('4. handles download button click', async () => {
    const store = mockStore({
      preApproval: {
        formConfigmetaData: {
          products: [{ campaign: 'test-campaign' }],
        },
      },
      stages: {
        stages: [{
          stageInfo: {
            products: [{ campaign: 'test-campaign', product_type: '1313' }]
          }
        }],
      },
    });

    render(
      <Provider store={store}>
        <OnboardingBeforeStart stageID={0} />
      </Provider>
    );
    
    await waitFor(() => {
      const downloadButton = screen.getByText('Download');
      fireEvent.click(downloadButton);
      // Verify download behavior
    });
  });

  it('5. renders terms links for stage 1', async () => {
    const store = mockStore({
      preApproval: {
        formConfigmetaData: {
          products: [{ campaign: 'test-campaign' }],
        },
      },
      stages: {
        stages: [{
          stageInfo: {
            products: [{ campaign: 'test-campaign', product_type: '1313' }]
          }
        }],
      },
    });

    render(
      <Provider store={store}>
        <OnboardingBeforeStart stageID={1} />
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByText('Terms 1')).toBeInTheDocument();
    });
  });

  it('6. shows scroll button when isVisible is true', async () => {
    const store = mockStore({
      preApproval: {
        formConfigmetaData: {
          products: [{ campaign: 'test-campaign' }],
        },
      },
      stages: {
        stages: [{
          stageInfo: {
            products: [{ campaign: 'test-campaign', product_type: '1313' }]
          }
        }],
      },
    });

    render(
      <Provider store={store}>
        <OnboardingBeforeStart stageID={0} isVisible={true} />
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByTestId('scroll-button')).toBeInTheDocument();
    });
  });

  it('7. shows accept button when isVisible is false', async () => {
    const store = mockStore({
      preApproval: {
        formConfigmetaData: {
          products: [{ campaign: 'test-campaign' }],
        },
      },
      stages: {
        stages: [{
          stageInfo: {
            products: [{ campaign: 'test-campaign', product_type: '1313' }]
          }
        }],
      },
    });

    render(
      <Provider store={store}>
        <OnboardingBeforeStart stageID={0} isVisible={false} />
      </Provider>
    );
    
    await waitFor(() => {
      expect(screen.getByText('Accept')).toBeInTheDocument();
    });
  });

  it('8. handles mobile detection for PDF URL', async () => {
    Object.defineProperty(navigator, 'userAgent', {
      value: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)',
      writable: true,
    });

    const store = mockStore({
      preApproval: {
        formConfigmetaData: {
          products: [{ campaign: 'test-campaign' }],
        },
      },
      stages: {
        stages: [{
          stageInfo: {
            products: [{ campaign: 'test-campaign', product_type: '1313' }]
          }
        }],
      },
    });

    render(
      <Provider store={store}>
        <OnboardingBeforeStart stageID={0} />
      </Provider>
    );
    
    await waitFor(() => {
      expect(mockGetData).toHaveBeenCalled();
      expect(mockGetPDFData).toHaveBeenCalledWith(expect.stringContaining('test-mobile.pdf'));
    });
  });
});
