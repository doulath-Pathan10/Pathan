import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import Text from './Text';
import { StoreModel } from '../../../utils/model/common-model';
import { CONSTANTS } from '../../../utils/common/constants';

// Mock Redux store
const mockStore = configureStore({
  reducer: {
    stages: () => ({
      stages: [{ stageId: 'bd-1', stageInfo: { applicants: [{}] } }],
      userInput: { applicants: [{}] },
      pinyinToggle: false
    }),
    fielderror: () => ({ error: [] }),
    preApproval: () => ({ resumeAllowed: "N" }),
    lastAccessed: () => ({}),
    continueValidation: () => ({}),
    model: () => ({}),
    error: () => ({}),
    ibnk: () => ({})
  }
});

// Mock props
const mockProps = {
  data: {
    logical_field_name: 'test_field',
    rwb_label_name: 'Test Field',
    component_type: 'text',
    type: 'text',
    min_length: 2,
    length: 10,
    mandatory: 'Yes',
    ui_defaulted_value: '',
    regex: '',
    editable: false,
    info_tooltips: '',
    details: ''
  },
  handleCallback: jest.fn(),
  handleFieldDispatch: jest.fn()
};

describe('Text Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('renders without crashing', () => {
    render(
      <Provider store={mockStore}>
        <Text {...mockProps} />
      </Provider>
    );
    expect(screen.getByLabelText('Test Field')).toBeInTheDocument();
  });

  test('displays label correctly', () => {
    render(
      <Provider store={mockStore}>
        <Text {...mockProps} />
      </Provider>
    );
    expect(screen.getByText('Test Field')).toBeInTheDocument();
  });

  test('handles input change', () => {
    render(
      <Provider store={mockStore}>
        <Text {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'test value' } });
    
    expect(input).toHaveValue('test value');
    expect(mockProps.handleCallback).toHaveBeenCalled();
  });

  test('shows error for required field when empty', () => {
    render(
      <Provider store={mockStore}>
        <Text {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Test Field');
    fireEvent.blur(input);
    
    expect(screen.getByText('Test Field required')).toBeInTheDocument();
  });

  test('shows error for min length validation', () => {
    const minLengthProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        min_length: 5
      }
    };
    
    render(
      <Provider store={mockStore}>
        <Text {...minLengthProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'abc' } });
    fireEvent.blur(input);
    
    expect(screen.getByText(/minimum length is 5 characters/i)).toBeInTheDocument();
  });

  test('shows error for pattern validation', () => {
    const regexProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        regex: '^[A-Za-z]+$'
      }
    };
    
    render(
      <Provider store={mockStore}>
        <Text {...regexProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: '123' } });
    fireEvent.blur(input);
    
    expect(screen.getByText(/invalid pattern for Test Field/i)).toBeInTheDocument();
  });

  test('disables input when textDisabled is true', () => {
    const disabledProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'tin_hkid',
        editable: true
      }
    };
    
    render(
      <Provider store={mockStore}>
        <Text {...disabledProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Test Field');
    expect(input).toBeDisabled();
  });

  test('shows tick mark when valid input is provided', () => {
    render(
      <Provider store={mockStore}>
        <Text {...mockProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Test Field');
    fireEvent.change(input, { target: { value: 'valid' } });
    
    expect(document.querySelector('.tick-class')).toBeInTheDocument();
  });

  test('handles email validation correctly', () => {
    const emailProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'email',
        type: 'email'
      }
    };
    
    render(
      <Provider store={mockStore}>
        <Text {...emailProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Test Field');
    
    // Test invalid email
    fireEvent.change(input, { target: { value: 'invalid' } });
    fireEvent.blur(input);
    expect(screen.getByText(/invalid pattern for Test Field/i)).toBeInTheDocument();
    
    // Test valid email
    fireEvent.change(input, { target: { value: 'valid@example.com' } });
    fireEvent.blur(input);
    expect(screen.queryByText(/invalid pattern/i)).not.toBeInTheDocument();
  });

  test('handles China ID number validation', () => {
    const chinaIdProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'china_id_number',
        regex: '^[0-9]{17}[0-9a-zA-Z]{1}$'
      }
    };
    
    render(
      <Provider store={mockStore}>
        <Text {...chinaIdProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Test Field');
    
    // Test invalid China ID
    fireEvent.change(input, { target: { value: '123' } });
    fireEvent.blur(input);
    expect(screen.getByText(/invalid pattern for Test Field/i)).toBeInTheDocument();
    
    // Test valid China ID (mock)
    fireEvent.change(input, { target: { value: '12345678901234567X' } });
    fireEvent.blur(input);
    expect(screen.queryByText(/invalid pattern/i)).not.toBeInTheDocument();
  });

  test('handles address field validation', () => {
    const addressProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'address_res_1'
      }
    };
    
    render(
      <Provider store={mockStore}>
        <Text {...addressProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Test Field');
    
    // Test invalid address characters
    fireEvent.change(input, { target: { value: 'Invalid@Address' } });
    fireEvent.blur(input);
    expect(screen.getByText(/invalid pattern for Test Field/i)).toBeInTheDocument();
    
    // Test valid address
    fireEvent.change(input, { target: { value: '123 Main St' } });
    fireEvent.blur(input);
    expect(screen.queryByText(/invalid pattern/i)).not.toBeInTheDocument();
  });

  test('handles tax ID validation for Hong Kong', () => {
    const taxIdProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'tax_id_no'
      }
    };
    
    // Mock store with Hong Kong tax residence
    const hkStore = configureStore({
      reducer: {
        stages: () => ({
          stages: [{ stageId: 'ad-1', stageInfo: { applicants: [{}] }],
          userInput: { applicants: [{ country_of_tax_residence: 'HK' }] },
          pinyinToggle: false
        }),
        // ...other reducers
      }
    });
    
    render(
      <Provider store={hkStore}>
        <Text {...taxIdProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Test Field');
    
    // Test invalid HK tax ID
    fireEvent.change(input, { target: { value: '123' } });
    fireEvent.blur(input);
    expect(screen.getByText(/invalid pattern for Test Field/i)).toBeInTheDocument();
    
    // Test valid HK tax ID (mock format)
    fireEvent.change(input, { target: { value: 'A1234567' } });
    fireEvent.blur(input);
    expect(screen.queryByText(/invalid pattern/i)).not.toBeInTheDocument();
  });

  test('handles promo code validation', () => {
    const promoProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'mgm_referral_code'
      }
    };
    
    render(
      <Provider store={mockStore}>
        <Text {...promoProps} />
      </Provider>
    );
    
    const input = screen.getByLabelText('Test Field');
    
    // Test invalid promo code
    fireEvent.change(input, { target: { value: 'INVALID' } });
    fireEvent.blur(input);
    expect(screen.getByText(/invalid promo code/i)).toBeInTheDocument();
    
    // Test valid promo code (mock format)
    fireEvent.change(input, { target: { value: 'SCB12345' } });
    fireEvent.blur(input);
    expect(screen.queryByText(/invalid promo code/i)).not.toBeInTheDocument();
  });
});
