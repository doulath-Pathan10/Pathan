describe('DocumentUpload Component Tests', () => {
  let store: any;
  let props: any;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'doc',
          stageInfo: {
            application: { channel_reference: "sf2323232" },
            applicant_documents: [{
              document_list: [
                {
                  document_category: "ID Document",
                  document_category_code: "R0001",
                  document_options: [{
                    document_types: [{
                      document_type: "National Identity Card",
                      document_type_code: "T0205",
                      uploaded_documents: []
                    }]
                  }]
                }
              ]
            }],
            applicants: { annual_income_a_1: "100" }
          }
        }],
        userInput: {
          applicants: [{
            alt_address_rwb_1_a_1: null,
            res_existing_line1_a_1: null
          }]
        }
      },
      documentUploadList: {
        responseDocuments: [{
          document_list: [{
            document_category: "ID Document",
            document_category_code: "R0001",
            document_options: [{
              document_types: [{
                document_type: "National Identity Card",
                document_type_code: "T0205",
                uploaded_documents: []
              }]
            }]
          }]
        }]
      }
    });

    props = { backHandler: jest.fn() };
  });

  test('1. Renders document categories from store', () => {
    render(
      <Provider store={store}>
        <DocumentUpload {...props} />
      </Provider>
    );
    
    expect(screen.getByText('Upload your id document')).toBeInTheDocument();
  });

  test('2. Shows document options from store', () => {
    render(
      <Provider store={store}>
        <DocumentUpload {...props} />
      </Provider>
    );
    
    expect(screen.getByText('National Identity Card')).toBeInTheDocument();
  });

  test('3. Enables upload when document is selected', () => {
    // Modify store to have a selected document
    const modifiedStore = mockStore({
      ...store.getState(),
      documentUploadList: {
        responseDocuments: [{
          document_list: [{
            document_category_code: "R0001",
            docCheck: "Y",
            document_options: [{
              document_types: [{
                document_type_code: "T0205",
                selectDocument: "National Identity Card"
              }]
            }]
          }]
        }]
      }
    });

    render(
      <Provider store={modifiedStore}>
        <DocumentUpload {...props} />
      </Provider>
    );
    
    expect(screen.getByText('Upload')).not.toBeDisabled();
  });

  test('4. Shows uploaded documents from store', () => {
    // Modify store to have uploaded documents
    const modifiedStore = mockStore({
      ...store.getState(),
      documentUploadList: {
        responseDocuments: [{
          document_list: [{
            document_category_code: "R0001",
            isSlectedForUpload: "Y",
            document_options: [{
              document_types: [{
                document_type_code: "T0205",
                uploaded_documents: [{
                  document_name: "test.png",
                  document_status: "Accepted"
                }]
              }]
            }]
          }]
        }]
      }
    });

    render(
      <Provider store={modifiedStore}>
        <DocumentUpload {...props} />
      </Provider>
    );
    
    expect(screen.getByText('test.png')).toBeInTheDocument();
  });

  test('5. Shows error when no document selected', () => {
    render(
      <Provider store={store}>
        <DocumentUpload {...props} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('Upload'));
    expect(screen.getByText(/select a document/i)).toBeInTheDocument();
  });

  test('6. Renders footer notes from store data', () => {
    render(
      <Provider store={store}>
        <DocumentUpload {...props} />
      </Provider>
    );
    
    expect(screen.getByText(/JPG, PNG, TIFF, and PDF formats/i)).toBeInTheDocument();
  });

  test('7. Handles back button click', () => {
    render(
      <Provider store={store}>
        <DocumentUpload {...props} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText('Back'));
    expect(props.backHandler).toHaveBeenCalled();
  });
});
