import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import LoanDetailsInfo from './LoanDetailsInfo';
import loanDetailsConst from '../../../assets/_json/loan-details.json';

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

describe('LoanDetailsInfo', () => {
  const mockState = {
    stages: {
      stages: [
        {
          stageInfo: {
            products: [
              {
                product_type: '280',
                product_category: 'PL',
                campaign: 'TEST_CAMPAIGN'
              }
            ],
            applicants: {
              staff_category_a_1: 'N',
              rbp_applied_rate_a_1: '5.5'
            }
          }
        }
      ],
      userInput: {
        applicants: {
          loan_tenor_a_1: '12',
          required_loan_amount_a_1: '20000',
          Transfer_amount_a_1: '0'
        }
      },
      updatedStageInputs: [],
      journeyType: 'NEW'
    },
    rate: {
      ar: '5.5',
      eir: '10.5',
      updatedInterestRates: [
        {
          tenure: '12',
          ProcessingFee: '1',
          EIR: '10.5'
        }
      ],
      ipEirRate: []
    },
    loanTopUp: {
      existingLoanTopUp: false,
      interestRate: '',
      topupAmount: ''
    }
  };

  const store = mockStore(mockState);

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(
      <Provider store={store}>
        <LoanDetailsInfo />
      </Provider>
    );
    expect(screen.getByTestId('repayment-detail')).toBeInTheDocument();
  });

  it('displays monthly repayment amount', () => {
    render(
      <Provider store={store}>
        <LoanDetailsInfo />
      </Provider>
    );
    expect(screen.getByText(/SGD/)).toBeInTheDocument();
  });

  it('shows loan info popup when info icon is clicked', () => {
    render(
      <Provider store={store}>
        <LoanDetailsInfo />
      </Provider>
    );
    fireEvent.click(screen.getByTestId('info-icon'));
    expect(screen.getByTestId('loan-info-model')).toBeInTheDocument();
  });

  it('displays annual fee for product type 280', () => {
    render(
      <Provider store={store}>
        <LoanDetailsInfo />
      </Provider>
    );
    expect(screen.getByText(loanDetailsConst.annualFee)).toBeInTheDocument();
    expect(screen.getByText('-SGD 199')).toBeInTheDocument();
  });

  it('displays annual percentage rate', () => {
    render(
      <Provider store={store}>
        <LoanDetailsInfo />
      </Provider>
    );
    expect(screen.getByText(loanDetailsConst.annulPercentageRate)).toBeInTheDocument();
    expect(screen.getByText('5.5%')).toBeInTheDocument();
  });

  it('displays EIR with info icon', () => {
    render(
      <Provider store={store}>
        <LoanDetailsInfo />
      </Provider>
    );
    expect(screen.getByText(loanDetailsConst.EIR)).toBeInTheDocument();
    expect(screen.getByText('10.5% p.a.')).toBeInTheDocument();
    expect(screen.getAllByTestId('info-icon').length).toBe(2);
  });

  it('displays estimated cashback when conditions are met', () => {
    render(
      <Provider store={store}>
        <LoanDetailsInfo />
      </Provider>
    );
    expect(screen.getByText(loanDetailsConst.estimatedCashback)).toBeInTheDocument();
    expect(screen.getByText(/SGD/)).toBeInTheDocument();
  });

  it('does not display cashback when loan amount is too small', () => {
    const customState = {
      ...mockState,
      stages: {
        ...mockState.stages,
        userInput: {
          applicants: {
            loan_tenor_a_1: '12',
            required_loan_amount_a_1: '10000',
            Transfer_amount_a_1: '0'
          }
        }
      }
    };
    const customStore = mockStore(customState);
    
    render(
      <Provider store={customStore}>
        <LoanDetailsInfo />
      </Provider>
    );
    expect(screen.getByText('No Cashback')).toBeInTheDocument();
  });

  it('displays different content for product type 210', () => {
    const customState = {
      ...mockState,
      stages: {
        ...mockState.stages,
        stages: [
          {
            stageInfo: {
              products: [
                {
                  product_type: '210',
                  product_category: 'BT',
                  campaign: 'TEST_CAMPAIGN'
                }
              ],
              applicants: {
                staff_category_a_1: 'N',
                rbp_applied_rate_a_1: '5.5'
              }
            }
          }
        ],
        userInput: {
          applicants: {
            loan_tenor_a_1: '12',
            required_loan_amount_a_1: '0',
            Transfer_amount_a_1: '20000'
          }
        }
      }
    };
    const customStore = mockStore(customState);
    
    render(
      <Provider store={customStore}>
        <LoanDetailsInfo />
      </Provider>
    );
    expect(screen.getByText(loanDetailsConst.requestedLoanAmount)).toBeInTheDocument();
    expect(screen.getByText(loanDetailsConst.OneTimeProcessingFee)).toBeInTheDocument();
  });

  it('handles loan top-up scenario', () => {
    const customState = {
      ...mockState,
      loanTopUp: {
        existingLoanTopUp: true,
        interestRate: '6.5',
        topupAmount: '25000'
      },
      stages: {
        ...mockState.stages,
        journeyType: 'ETC'
      }
    };
    const customStore = mockStore(customState);
    
    render(
      <Provider store={customStore}>
        <LoanDetailsInfo />
      </Provider>
    );
    expect(screen.getByText('6.5%')).toBeInTheDocument();
  });

  it('closes the model when back button is clicked', () => {
    render(
      <Provider store={store}>
        <LoanDetailsInfo />
      </Provider>
    );
    fireEvent.click(screen.getByTestId('info-icon'));
    fireEvent.click(screen.getByTestId('close-button'));
    expect(screen.queryByTestId('loan-info-model')).not.toBeInTheDocument();
  });
});
