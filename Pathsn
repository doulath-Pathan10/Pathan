import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import Close from './Close';
import { CONSTANTS } from '../../../utils/common/constants';

// Mock Redux store
const mockStore = configureStore({
  reducer: {
    stages: () => ({
      stages: [
        {
          stageId: 'pd-1',
          stageInfo: {},
        },
      ],
      userInput: {
        applicants: [{}],
      },
      journeyType: 'test',
    }),
    lov: () => ({}),
    valueUpdate: () => ({}),
    error: () => ({}),
  },
});

// Mock modules and utilities
jest.mock('react-router-dom', () => ({
  useNavigate: jest.fn(),
}));

jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getLanguageInfo: jest.fn().mockReturnValue('en'),
  },
  homePage: jest.fn(),
}));

jest.mock('../../../services/track-events', () => ({
  triggerAdobeEvent: jest.fn(),
}));

jest.mock('../../../modules/preApproval/services/preApprovalPostServices', () => ({
  postPeserveData: jest.fn(),
}));

describe('Close Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(
      <Provider store={mockStore}>
        <Close />
      </Provider>
    );
  });

  it('displays the close button when stage is not ad-9', () => {
    render(
      <Provider store={mockStore}>
        <Close />
      </Provider>
    );
    
    expect(screen.getByTestId('logout-button')).toBeInTheDocument();
  });

  it('does not display the close button when stage is ad-9', () => {
    const customStore = configureStore({
      reducer: {
        stages: () => ({
          stages: [
            {
              stageId: 'ad-9',
              stageInfo: {},
            },
          ],
          userInput: {
            applicants: [{}],
          },
        }),
        lov: () => ({}),
        valueUpdate: () => ({}),
        error: () => ({}),
      },
    });

    render(
      <Provider store={customStore}>
        <Close />
      </Provider>
    );
    
    expect(screen.queryByTestId('logout-button')).not.toBeInTheDocument();
  });

  it('opens popup when close button is clicked', () => {
    render(
      <Provider store={mockStore}>
        <Close />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    expect(screen.getByText('Back to Home')).toBeInTheDocument();
  });

  it('displays correct text in English', () => {
    render(
      <Provider store={mockStore}>
        <Close />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    expect(screen.getByText('Back to Home')).toBeInTheDocument();
    expect(screen.getByText('Do you want to exit the application ?')).toBeInTheDocument();
  });

  it('displays correct text in Chinese (CN)', () => {
    jest.spyOn(require('../../../utils/common/change.utils').getUrl, 'getLanguageInfo')
      .mockReturnValueOnce(CONSTANTS.LANG_CN);

    render(
      <Provider store={mockStore}>
        <Close />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    expect(screen.getByText('返回主页')).toBeInTheDocument();
    expect(screen.getByText('确认停止申请？')).toBeInTheDocument();
  });

  it('displays correct text in Chinese (HK)', () => {
    jest.spyOn(require('../../../utils/common/change.utils').getUrl, 'getLanguageInfo')
      .mockReturnValueOnce(CONSTANTS.LANG_HK);

    render(
      <Provider store={mockStore}>
        <Close />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    expect(screen.getByText('返回主頁')).toBeInTheDocument();
    expect(screen.getByText('確認停止申請？')).toBeInTheDocument();
  });

  it('closes popup when cancel button is clicked', () => {
    render(
      <Provider store={mockStore}>
        <Close />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    fireEvent.click(screen.getByText('Cancel'));
    expect(screen.queryByText('Back to Home')).not.toBeInTheDocument();
  });

  it('calls homePage when Exit button is clicked on pd-1 stage', () => {
    const { homePage } = require('../../../utils/common/change.utils');
    render(
      <Provider store={mockStore}>
        <Close />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    fireEvent.click(screen.getByText('Yes, Exit'));
    expect(homePage).toHaveBeenCalled();
  });

  it('calls withSaveAndExit when Save & Exit button is clicked on non-pd-1 stage', () => {
    const customStore = configureStore({
      reducer: {
        stages: () => ({
          stages: [
            {
              stageId: 'pd-2',
              stageInfo: {},
            },
          ],
          userInput: {
            applicants: [{}],
          },
        }),
        lov: () => ({}),
        valueUpdate: () => ({}),
        error: () => ({}),
      },
    });

    const { postPeserveData } = require('../../../modules/preApproval/services/preApprovalPostServices');
    postPeserveData.mockResolvedValue({
      status: 200,
      data: {
        application: {
          response_type: 'INFO',
          response_action: 'CONTINUE',
        },
        applicants: {},
      },
    });

    render(
      <Provider store={customStore}>
        <Close />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    fireEvent.click(screen.getByText('Save & Exit'));
    expect(postPeserveData).toHaveBeenCalled();
  });

  it('handles error in withSaveAndExit', async () => {
    const customStore = configureStore({
      reducer: {
        stages: () => ({
          stages: [
            {
              stageId: 'pd-2',
              stageInfo: {},
            },
          ],
          userInput: {
            applicants: [{}],
          },
        }),
        lov: () => ({}),
        valueUpdate: () => ({}),
        error: () => ({}),
      },
    });

    const { postPeserveData } = require('../../../modules/preApproval/services/preApprovalPostServices');
    postPeserveData.mockRejectedValue(new Error('API Error'));

    render(
      <Provider store={customStore}>
        <Close />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    fireEvent.click(screen.getByText('Save & Exit'));
    
    // You might want to add assertions for error handling here
  });

  it('triggers Adobe event when buttons are clicked', () => {
    const { triggerAdobeEvent } = require('../../../services/track-events');
    
    render(
      <Provider store={mockStore}>
        <Close />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    fireEvent.click(screen.getByText('Cancel'));
    
    expect(triggerAdobeEvent).toHaveBeenCalledWith('ctaClick', 'Cancel: Back to Home');
  });

  it('displays OTP exit text when props are passed', () => {
    render(
      <Provider store={mockStore}>
        <Close someProp={true} />
      </Provider>
    );
    
    fireEvent.click(screen.getByTestId('logout-button'));
    expect(screen.getByText(/Your current progress will be lost/)).toBeInTheDocument();
  });
});
