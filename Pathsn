import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import ThankYou from './thank-you';
import { useNavigate } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';

// Mock the dependencies
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: jest.fn(),
}));

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getChannelRefNo: jest.fn(() => ({ applicationRefNo: 'TEST123' })),
    getParameterByName: jest.fn(() => null),
    getUpdatedStage: jest.fn(() => ({ ccplChannel: '' })),
  },
}));

jest.mock('../../../services/track-events', () => ({
  triggerAdobeEvent: jest.fn(),
}));

jest.mock('../../../services/ga-track-events', () => ({
  pageView: jest.fn(),
}));

jest.mock('../../../services/common-service', () => ({
  redirectingToIbanking: jest.fn(),
  activateDigitalCard: jest.fn(() => Promise.resolve({ status: 'SUCCESS' })),
}));

jest.mock('../../../utils/store/store', () => ({
  getState: jest.fn(() => ({
    stages: {
      isDocumentUpload: false,
    },
  })),
}));

describe('ThankYou Component', () => {
  const mockNavigate = jest.fn();
  const mockDispatch = jest.fn();

  beforeEach(() => {
    (useNavigate as jest.Mock).mockReturnValue(mockNavigate);
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    
    (useSelector as jest.Mock).mockImplementation((callback) => {
      return callback({
        stages: {
          stages: [{
            stageId: 'thankyou',
            stageInfo: {
              application: { application_reference: 'TEST123' },
              products: [{
                product_category: 'CA',
                name: 'Current Account',
                acct_details: [{ account_number: '1234567890' }]
              }],
              applicants: {
                auth_mode_a_1: 'OTP',
                embossed_name_a_1: 'John Doe'
              }
            }
          }],
          journeyType: 'new',
          otpSuccess: false,
        },
        isDocumentUpload: false,
      });
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders the basic thank you page', () => {
    render(<ThankYou />);
    expect(screen.getByTestId('form')).toBeInTheDocument();
    expect(screen.getByText(/Current Account/i)).toBeInTheDocument();
  });

  it('handles submission with OTP auth mode', () => {
    delete window.location;
    window.location = { href: '' } as any;
    
    render(<ThankYou />);
    const submitButton = screen.getByRole('button', { name: /continue/i });
    fireEvent.click(submitButton);
    
    expect(window.location.href).toBe(process.env.REACT_APP_HOME_PAGE_URL);
  });

  it('handles submission with IX auth mode', () => {
    (useSelector as jest.Mock).mockImplementation((callback) => {
      return callback({
        stages: {
          stages: [{
            stageInfo: {
              application: { application_reference: 'TEST123' },
              products: [{
                product_category: 'CA',
                name: 'Current Account',
                acct_details: [{ account_number: '1234567890' }]
              }],
              applicants: {
                auth_mode_a_1: 'IX',
              }
            }
          }],
        },
      });
    });
    
    const { redirectingToIbanking } = require('../../../services/common-service');
    render(<ThankYou />);
    const submitButton = screen.getByRole('button', { name: /continue/i });
    fireEvent.click(submitButton);
    
    expect(redirectingToIbanking).toHaveBeenCalled();
  });

  it('shows upload component when auth=upload', () => {
    const { getUrl } = require('../../../utils/common/change.utils');
    getUrl.getParameterByName.mockReturnValue('upload');
    
    render(<ThankYou />);
    expect(screen.getByTestId('form')).toBeInTheDocument();
    // Add more specific assertions for upload UI if needed
  });

  it('triggers tracking events on mount', () => {
    const { pageView } = require('../../../services/ga-track-events');
    const { triggerAdobeEvent } = require('../../../services/track-events');
    
    render(<ThankYou />);
    expect(pageView).toHaveBeenCalledWith('thankyou');
    expect(triggerAdobeEvent).toHaveBeenCalledWith('formSubmit');
  });

  it('does not trigger tracking when auth=upload', () => {
    const { getUrl } = require('../../../utils/common/change.utils');
    const { pageView } = require('../../../services/ga-track-events');
    const { triggerAdobeEvent } = require('../../../services/track-events');
    
    getUrl.getParameterByName.mockReturnValue('upload');
    render(<ThankYou />);
    
    expect(pageView).not.toHaveBeenCalled();
    expect(triggerAdobeEvent).not.toHaveBeenCalled();
  });
});

describe('ThankYou Component with Credit Card', () => {
  const mockDispatch = jest.fn();

  beforeEach(() => {
    (useNavigate as jest.Mock).mockReturnValue(jest.fn());
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    
    (useSelector as jest.Mock).mockImplementation((callback) => {
      return callback({
        stages: {
          stages: [{
            stageInfo: {
              application: { application_reference: 'TEST123' },
              products: [{
                product_category: 'CC',
                name: 'Credit Card',
                acct_details: [{ card_no: '1111222233334444' }]
              }],
              applicants: {
                auth_mode_a_1: 'OTP',
                embossed_name_a_1: 'John Doe'
              }
            }
          }],
          otpSuccess: false,
        },
      });
    });
  });

  it('renders credit card thank you page', () => {
    render(<ThankYou />);
    expect(screen.getByTestId('form')).toBeInTheDocument();
    // Add more specific assertions for CC UI
  });
});
