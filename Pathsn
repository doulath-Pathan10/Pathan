import Rules_ad_1 from '../Rules_ad_1';
import rulesUtils from '../rules.utils';

// Mock dependencies
jest.mock('../rules.utils', () => jest.fn());

// Mock localStorage
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn()
};
Object.defineProperty(window, 'localStorage', {
  value: localStorageMock
});

describe('Rules_ad_1', () => {
  // Mock data setup
  const mockProps = [[
    {
      field_set_name: 'General Information',
      fields: [
        { logical_field_name: 'full_name', component_type: 'Text' }
      ]
    },
    {
      field_set_name: 'Contact Information',
      fields: [
        { logical_field_name: 'email', component_type: 'Text' }
      ]
    },
    {
      field_set_name: 'Other Details',
      fields: [
        { logical_field_name: 'other_field', component_type: 'Text' }
      ]
    },
    {
      field_set_name: 'Additional Details',
      fields: [
        { logical_field_name: 'reason_for_account_rwb', component_type: 'Text' },
        { logical_field_name: 'Initial_deposit_rwb', component_type: 'Text' },
        { logical_field_name: 'source_of_fund_rwb', component_type: 'Text' }
      ]
    },
    {
      field_set_name: 'Banking Services',
      fields: [
        { logical_field_name: 'debit_card_request_rwb', component_type: 'Checkbox' },
        { logical_field_name: 'issuance_type', component_type: 'SelectionBox' },
        { logical_field_name: 'embossed_dc_name_rwb', component_type: 'Text' },
        { logical_field_name: 'existing_account_no_dc', component_type: 'Text' },
        { logical_field_name: 'cheque_book_request_rwb', component_type: 'Checkbox' }
      ]
    },
    {
      field_set_name: 'Time Deposit Details',
      fields: [
        { logical_field_name: 'td_product_currency_value', component_type: 'Text' },
        { logical_field_name: 'td_depoist_amount', component_type: 'Text' },
        { logical_field_name: 'td_term_type', component_type: 'SelectionBox' }
      ]
    }
  ]];

  const mockStageInfo = {
    products: [
      { product_category: 'CA', product_type: '310' },
      { product_category: 'TD', product_type: '337' }
    ],
    applicants: {
      no_of_accounts_rwb_a_1: 2
    }
  };

  const mockProducts = [
    {
      product_category_name: 'Current Account',
      name: 'Premium Account'
    },
    {
      product_category_name: 'Time Deposit',
      name: 'Fixed Deposit'
    }
  ];

  beforeEach(() => {
    jest.clearAllMocks();
    localStorageMock.getItem.mockImplementation((key) => {
      if (key === 'products') return JSON.stringify(mockProducts);
      return null;
    });
    
    rulesUtils.mockReturnValue({ result: 'mocked' });
  });

  describe('Basic Functionality', () => {
    test('should initialize validation object correctly', () => {
      Rules_ad_1(mockProps, mockStageInfo);

      expect(rulesUtils).toHaveBeenCalledWith(
        expect.any(Array),
        expect.objectContaining({
          nonEditable: [],
          hidden: expect.any(Array),
          modifyVisibility: expect.any(Array)
        })
      );
    });

    test('should handle single product scenario', () => {
      const singleProductMock = [mockProducts[0]];
      localStorageMock.getItem.mockReturnValue(JSON.stringify(singleProductMock));

      const singleProductStageInfo = {
        ...mockStageInfo,
        products: [{ product_category: 'CA', product_type: '310' }]
      };

      Rules_ad_1(mockProps, singleProductStageInfo);

      expect(rulesUtils).toHaveBeenCalled();
    });

    test('should handle missing no_of_accounts_rwb_a_1', () => {
      const stageInfoWithoutAccounts = {
        ...mockStageInfo,
        applicants: {}
      };

      Rules_ad_1(mockProps, stageInfoWithoutAccounts);

      expect(rulesUtils).toHaveBeenCalled();
    });
  });

  describe('Multiple Products Scenarios', () => {
    test('should handle multiple products with product types 307 and 318', () => {
      const multiProductStageInfo = {
        ...mockStageInfo,
        products: [
          { product_category: 'CA', product_type: '307' },
          { product_category: 'SA', product_type: '318' }
        ]
      };

      Rules_ad_1(mockProps, multiProductStageInfo);

      expect(rulesUtils).toHaveBeenCalledWith(
        expect.arrayContaining([
          expect.arrayContaining([
            expect.objectContaining({
              field_set_name: expect.stringContaining('Banking Services')
            })
          ])
        ]),
        expect.any(Object)
      );
    });

    test('should handle multiple products with product types 339 and 318', () => {
      const multiProductStageInfo = {
        ...mockStageInfo,
        products: [
          { product_category: 'CA', product_type: '339' },
          { product_category: 'SA', product_type: '318' }
        ]
      };

      Rules_ad_1(mockProps, multiProductStageInfo);

      expect(rulesUtils).toHaveBeenCalled();
    });

    test('should handle multiple products with product types 504 and 516', () => {
      const multiProductStageInfo = {
        ...mockStageInfo,
        products: [
          { product_category: 'SA', product_type: '504' },
          { product_category: 'CA', product_type: '516' }
        ]
      };

      Rules_ad_1(mockProps, multiProductStageInfo);

      expect(rulesUtils).toHaveBeenCalled();
    });

    test('should handle multiple products with product types 504 and 507', () => {
      const multiProductStageInfo = {
        ...mockStageInfo,
        products: [
          { product_category: 'SA', product_type: '504' },
          { product_category: 'CA', product_type: '507' }
        ]
      };

      Rules_ad_1(mockProps, multiProductStageInfo);

      expect(rulesUtils).toHaveBeenCalled();
    });

    test('should handle TD products in multiple product scenario', () => {
      const multiProductStageInfo = {
        ...mockStageInfo,
        products: [
          { product_category: 'TD', product_type: '337' },
          { product_category: 'CA', product_type: '310' }
        ]
      };

      Rules_ad_1(mockProps, multiProductStageInfo);

      expect(rulesUtils).toHaveBeenCalled();
    });
  });

  describe('Repeat Count Scenarios', () => {
    test('should handle repeat count with product type 310', () => {
      const stageInfoWithRepeat = {
        ...mockStageInfo,
        products: [{ product_category: 'CA', product_type: '310' }],
        applicants: { no_of_accounts_rwb_a_1: 3 }
      };

      Rules_ad_1(mockProps, stageInfoWithRepeat);

      expect(rulesUtils).toHaveBeenCalledWith(
        expect.arrayContaining([
          expect.arrayContaining([
            expect.objectContaining({
              field_set_name: expect.stringContaining('Additional Details')
            })
          ])
        ]),
        expect.any(Object)
      );
    });

    test('should handle repeat count with product type 307', () => {
      const stageInfoWithRepeat = {
        ...mockStageInfo,
        products: [{ product_category: 'CA', product_type: '307' }],
        applicants: { no_of_accounts_rwb_a_1: 2 }
      };

      Rules_ad_1(mockProps, stageInfoWithRepeat);

      expect(rulesUtils).toHaveBeenCalled();
    });

    test('should handle repeat count with product type 324', () => {
      const stageInfoWithRepeat = {
        ...mockStageInfo,
        products: [{ product_category: 'CA', product_type: '324' }],
        applicants: { no_of_accounts_rwb_a_1: 2 }
      };

      Rules_ad_1(mockProps, stageInfoWithRepeat);

      expect(rulesUtils).toHaveBeenCalled();
    });
  });

  describe('Hidden Fields Logic', () => {
    test('should hide cheque book fields for product types 310 or 307', () => {
      const stageInfoWith310 = {
        ...mockStageInfo,
        products: [{ product_category: 'CA', product_type: '310' }],
        applicants: { no_of_accounts_rwb_a_1: 2 }
      };

      Rules_ad_1(mockProps, stageInfoWith310);

      expect(rulesUtils).toHaveBeenCalledWith(
        expect.any(Array),
        expect.objectContaining({
          hidden: expect.arrayContaining([
            expect.arrayContaining([
              expect.stringMatching(/cheque_book_request_rwb/)
            ])
          ])
        })
      );
    });

    test('should hide specific fields for product type 307', () => {
      const stageInfoWith307 = {
        ...mockStageInfo,
        products: [{ product_category: 'CA', product_type: '307' }],
        applicants: { no_of_accounts_rwb_a_1: 2 }
      };

      Rules_ad_1(mockProps, stageInfoWith307);

      expect(rulesUtils).toHaveBeenCalledWith(
        expect.any(Array),
        expect.objectContaining({
          hidden: expect.arrayContaining([
            expect.arrayContaining([
              'reason_for_account_rwb',
              'source_of_fund_rwb'
            ])
          ])
        })
      );
    });

    test('should hide reason_for_account_rwb for CA products with types 317 or 314', () => {
      const stageInfoWithCA317 = {
        ...mockStageInfo,
        products: [{ product_category: 'CA', product_type: '317' }]
      };

      Rules_ad_1(mockProps, stageInfoWithCA317);

      expect(rulesUtils).toHaveBeenCalledWith(
        expect.any(Array),
        expect.objectContaining({
          hidden: expect.arrayContaining([
            expect.arrayContaining(['reason_for_account_rwb'])
          ])
        })
      );
    });
  });

  describe('Time Deposit (TD) Scenarios', () => {
    test('should handle single TD product', () => {
      const tdStageInfo = {
        ...mockStageInfo,
        products: [{ product_category: 'TD', product_type: '337' }]
      };

      Rules_ad_1(mockProps, tdStageInfo);

      expect(rulesUtils).toHaveBeenCalledWith(
        expect.arrayContaining([
          expect.arrayContaining([
            expect.objectContaining({
              field_set_name: 'Time Deposit Details'
            })
          ])
        ]),
        expect.objectContaining({
          modifyVisibility: expect.arrayContaining([
            expect.arrayContaining([
              'td_product_currency_value',
              'td_depoist_amount',
              'td_term_type'
            ])
          ])
        })
      );
    });

    test('should handle multiple products with TD', () => {
      const multiTDStageInfo = {
        ...mockStageInfo,
        products: [
          { product_category: 'TD', product_type: '337' },
          { product_category: 'CA', product_type: '310' }
        ]
      };

      Rules_ad_1(mockProps, multiTDStageInfo);

      expect(rulesUtils).toHaveBeenCalledWith(
        expect.arrayContaining([
          expect.arrayContaining([
            expect.objectContaining({
              field_set_name: 'Time Deposit Details'
            })
          ])
        ]),
        expect.any(Object)
      );
    });

    test('should convert td_product_currency_value from Text to SelectionBox', () => {
      const tdStageInfo = {
        ...mockStageInfo,
        products: [{ product_category: 'TD', product_type: '337' }]
      };

      const result = Rules_ad_1(mockProps, tdStageInfo);

      // Verify that rulesUtils was called and the component_type conversion logic was executed
      expect(rulesUtils).toHaveBeenCalled();
    });

    test('should hide embossed_dc_name_rwb for TD with product type 337', () => {
      const tdStageInfo = {
        ...mockStageInfo,
        products: [
          { product_category: 'TD', product_type: '337' },
          { product_category: 'CA', product_type: '310' }
        ]
      };

      Rules_ad_1(mockProps, tdStageInfo);

      expect(rulesUtils).toHaveBeenCalledWith(
        expect.any(Array),
        expect.objectContaining({
          hidden: expect.arrayContaining([
            expect.arrayContaining(['embossed_dc_name_rwb'])
          ])
        })
      );
    });
  });

  describe('Field Filtering Logic', () => {
    test('should filter out specific banking service fields for certain product combinations', () => {
      const stageInfoWithFiltering = {
        ...mockStageInfo,
        products: [
          { product_category: 'CA', product_type: '307' },
          { product_category: 'SA', product_type: '318' }
        ]
      };

      Rules_ad_1(mockProps, stageInfoWithFiltering);

      expect(rulesUtils).toHaveBeenCalled();
    });

    test('should not filter banking service fields for other product combinations', () => {
      const stageInfoWithoutFiltering = {
        ...mockStageInfo,
        products: [
          { product_category: 'CA', product_type: '100' },
          { product_category: 'SA', product_type: '200' }
        ]
      };

      Rules_ad_1(mockProps, stageInfoWithoutFiltering);

      expect(rulesUtils).toHaveBeenCalled();
    });
  });

  describe('Complex Product Combinations', () => {
    test('should handle 337 and 310 product combination', () => {
      const complexStageInfo = {
        ...mockStageInfo,
        products: [
          { product_category: 'TD', product_type: '337' },
          { product_category: 'CA', product_type: '310' }
        ]
      };

      Rules_ad_1(mockProps, complexStageInfo);

      expect(rulesUtils).toHaveBeenCalled();
    });

    test('should handle 337 and 329 product combination', () => {
      const complexStageInfo = {
        ...mockStageInfo,
        products: [
          { product_category: 'TD', product_type: '337' },
          { product_category: 'SA', product_type: '329' }
        ]
      };

      Rules_ad_1(mockProps, complexStageInfo);

      expect(rulesUtils).toHaveBeenCalled();
    });

    test('should handle 514 and 504 product combination', () => {
      const complexStageInfo = {
        ...mockStageInfo,
        products: [
          { product_category: 'SA', product_type: '514' },
          { product_category: 'CA', product_type: '504' }
        ]
      };

      Rules_ad_1(mockProps, complexStageInfo);

      expect(rulesUtils).toHaveBeenCalled();
    });
  });

  describe('Edge Cases', () => {
    test('should handle empty products array in localStorage', () => {
      localStorageMock.getItem.mockReturnValue('[]');

      expect(() => {
        Rules_ad_1(mockProps, mockStageInfo);
      }).not.toThrow();
    });

    test('should handle null products in localStorage', () => {
      localStorageMock.getItem.mockReturnValue(null);

      expect(() => {
        Rules_ad_1(mockProps, mockStageInfo);
      }).not.toThrow();
    });

    test('should handle invalid JSON in localStorage', () => {
      localStorageMock.getItem.mockReturnValue('invalid json');

      expect(() => {
        Rules_ad_1(mockProps, mockStageInfo);
      }).toThrow();
    });

    test('should handle missing Additional Details field set', () => {
      const propsWithoutAdditionalDetails = [[
        {
          field_set_name: 'General Information',
          fields: [{ logical_field_name: 'full_name' }]
        }
      ]];

      expect(() => {
        Rules_ad_1(propsWithoutAdditionalDetails, mockStageInfo);
      }).not.toThrow();
    });

    test('should handle missing Banking Services field set', () => {
      const propsWithoutBankingServices = [[
        {
          field_set_name: 'Additional Details',
          fields: [{ logical_field_name: 'reason_for_account_rwb' }]
        }
      ]];

      expect(() => {
        Rules_ad_1(propsWithoutBankingServices, mockStageInfo);
      }).not.toThrow();
    });

    test('should handle empty stage info products', () => {
      const emptyProductsStageInfo = {
        ...mockStageInfo,
        products: []
      };

      expect(() => {
        Rules_ad_1(mockProps, emptyProductsStageInfo);
      }).not.toThrow();
    });

    test('should handle missing applicants in stage info', () => {
      const stageInfoWithoutApplicants = {
        ...mockStageInfo,
        applicants: undefined
      };

      expect(() => {
        Rules_ad_1(mockProps, stageInfoWithoutApplicants);
      }).not.toThrow();
    });
  });

  describe('Return Value', () => {
    test('should return the result from rulesUtils', () => {
      const mockResult = { processed: true, fields: [] };
      rulesUtils.mockReturnValue(mockResult);

      const result = Rules_ad_1(mockProps, mockStageInfo);

      expect(result).toEqual(mockResult);
    });

    test('should always push Initial_deposit_rwb to hidden fields', () => {
      Rules_ad_1(mockProps, mockStageInfo);

      expect(rulesUtils).toHaveBeenCalledWith(
        expect.any(Array),
        expect.objectContaining({
          hidden: expect.arrayContaining([
            expect.arrayContaining(['Initial_deposit_rwb'])
          ])
        })
      );
    });
  });

  describe('Field Modification Logic', () => {
    test('should add rwb_index and mandatory flags to additional details fields', () => {
      const stageInfoWithMultipleProducts = {
        ...mockStageInfo,
        products: [
          { product_category: 'TD', product_type: '337' },
          { product_category: 'CA', product_type: '310' }
        ]
      };

      Rules_ad_1(mockProps, stageInfoWithMultipleProducts);

      expect(rulesUtils).toHaveBeenCalled();
    });

    test('should add rwb_index to banking services fields', () => {
      const stageInfoWithMultipleProducts = {
        ...mockStageInfo,
        products: [
          { product_category: 'CA', product_type: '307' },
          { product_category: 'SA', product_type: '318' }
        ]
      };

      Rules_ad_1(mockProps, stageInfoWithMultipleProducts);

      expect(rulesUtils).toHaveBeenCalled();
    });
  });
});
