import React from 'react';
import { render, screen, act } from '@testing-library/react';
import { Provider } from 'react-redux';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import store from './utils/store/store';

// Mock child components and modules
jest.mock('./router/main', () => () => <div>Main Component</div>);
jest.mock('./shared/components/model/model', () => () => <div>Model Component</div>);
jest.mock('./shared/components/spinner/spinner', () => () => <div>Spinner Component</div>);
jest.mock('./shared/components/model/dynamic-model', () => () => <div>DynamicModel Component</div>);
jest.mock('./shared/components/model/idle-time-out', () => ({ handlePopUpClick }: any) => (
  <div>
    IdleTimeOutModel Component
    <button onClick={handlePopUpClick}>Close</button>
  </div>
));
jest.mock('react-activity-detector', () => ({
  __esModule: true,
  default: ({ onIdle, onActive }: any) => {
    // Simulate activity detector behavior
    React.useEffect(() => {
      const timer = setTimeout(() => onIdle(), 100);
      return () => clearTimeout(timer);
    }, [onIdle]);
    return null;
  },
}));
jest.mock('./services/track-events', () => ({
  triggerAdobeEvent: jest.fn(),
}));

describe('App Component', () => {
  const renderApp = (state = {}) => {
    const mockStore = {
      ...store,
      getState: () => ({
        loader: { isFetching: { isFetching: false } },
        error: { errors: [], exceptionList: [] },
        ...state,
      }),
      dispatch: jest.fn(),
      subscribe: jest.fn(),
    };

    return render(
      <Provider store={mockStore}>
        <BrowserRouter>
          <App />
        </BrowserRouter>
      </Provider>
    );
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    renderApp();
    expect(screen.getByText('Main Component')).toBeInTheDocument();
  });

  it('displays spinner when loader is active', () => {
    renderApp({
      loader: { isFetching: { isFetching: true } },
    });
    expect(screen.getByText('Spinner Component')).toBeInTheDocument();
  });

  it('displays error model when errors exist', () => {
    renderApp({
      error: { errors: ['Test error'], exceptionList: [] },
    });
    expect(screen.getByText('Model Component')).toBeInTheDocument();
  });

  it('displays dynamic model when exceptionList exists', () => {
    renderApp({
      error: { errors: [], exceptionList: [{ error_header: 'Test header' }] },
    });
    expect(screen.getByText('DynamicModel Component')).toBeInTheDocument();
  });

  it('displays idle timeout modal when user is idle', async () => {
    renderApp();
    await act(async () => {
      await new Promise((resolve) => setTimeout(resolve, 150));
    });
    expect(screen.getByText('IdleTimeOutModel Component')).toBeInTheDocument();
  });

  it('closes idle timeout modal when handlePopUpClick is called', async () => {
    renderApp();
    await act(async () => {
      await new Promise((resolve) => setTimeout(resolve, 150));
    });
    
    const closeButton = screen.getByText('Close');
    act(() => {
      closeButton.click();
    });
    
    expect(screen.queryByText('IdleTimeOutModel Component')).not.toBeInTheDocument();
  });

  it('does not show idle modal when loader is active', async () => {
    renderApp({
      loader: { isFetching: { isFetching: true } },
    });
    
    await act(async () => {
      await new Promise((resolve) => setTimeout(resolve, 150));
    });
    
    expect(screen.queryByText('IdleTimeOutModel Component')).not.toBeInTheDocument();
  });

  it('prevents right click context menu', () => {
    const addEventListenerSpy = jest.spyOn(window, 'addEventListener');
    const preventDefaultSpy = jest.fn();
    
    renderApp();
    
    // Simulate contextmenu event
    const event = new Event('contextmenu');
    Object.assign(event, { preventDefault: preventDefaultSpy });
    window.dispatchEvent(event);
    
    expect(addEventListenerSpy).toHaveBeenCalledWith(
      'contextmenu',
      expect.any(Function)
    );
    expect(preventDefaultSpy).toHaveBeenCalled();
    
    addEventListenerSpy.mockRestore();
  });

  it('triggers adobe events for errors', () => {
    const { triggerAdobeEvent } = require('./services/track-events');
    
    renderApp({
      error: { 
        errors: ['Test error'], 
        exceptionList: [{ error_header: 'Test header' }] 
      },
    });
    
    expect(triggerAdobeEvent).toHaveBeenCalledWith('formError');
  });

  it('triggers formAbandonment event on unload', () => {
    const { triggerAdobeEvent } = require('./services/track-events');
    const addEventListenerSpy = jest.spyOn(window, 'addEventListener');
    
    renderApp();
    
    // Simulate unload event
    const event = new Event('unload');
    window.dispatchEvent(event);
    
    expect(addEventListenerSpy).toHaveBeenCalledWith(
      'unload',
      expect.any(Function)
    );
    expect(triggerAdobeEvent).toHaveBeenCalledWith('formAbandonment', 'BrowserClose');
    
    addEventListenerSpy.mockRestore();
  });
});
