import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Model from './Model';
import * as trackEvents from '../../../services/track-events';
import * as commonService from '../../../services/common-service';
import * as changeUtils from '../../../utils/common/change.utils';

// Mock external dependencies
jest.mock('../../../services/track-events');
jest.mock('../../../services/common-service');
jest.mock('../../../utils/common/change.utils');
jest.mock('@lottiefiles/react-lottie-player', () => ({
  Player: () => <div>Lottie Player</div>
}));

// Mock Redux store
const mockStore = configureStore([]);

describe('Model Component', () => {
  const mockModelData = {
    name: 'test_model',
    header_content: 'Test Header',
    body_content: ['Test content line 1', 'Test content line 2'],
    buttons: ['Button 1', 'Button 2'],
    postal_code_lable: 'Enter Postal Code',
    errorDesc: 'Invalid postal code',
    header_content_second: 'Second Header',
    popupDescription: 'Popup description text',
    PostalCodebuttons: ['Postal Button 1', 'Postal Button 2']
  };

  const mockProps = {
    name: 'test_model',
    handlebuttonClick: jest.fn(),
    handleContinueWithoutActivation: jest.fn(),
    handleOTPSuccessClick: jest.fn(),
    setContinueWithoutReferralcode: jest.fn(),
    setShowReferralcodePopup: jest.fn(),
    isTooltip: false,
    body_content: 'Additional body content'
  };

  beforeEach(() => {
    jest.clearAllMocks();
    // Mock the modelInfo import
    jest.mock('../../../assets/_json/model.json', () => [mockModelData], { virtual: true });
  });

  const renderComponent = (props = {}, storeState = {}) => {
    const initialState = {
      stages: {
        stages: [{
          stageId: 'test-stage',
          stageInfo: {
            fieldmetaData: {
              data: {
                stages: [{
                  fields: [{
                    logical_field_name: 'postal_code',
                    min_length: 6
                  }]
                }]
              }
            },
            products: [{ product_category: 'CC' }, { product_category: 'PL' }],
            applicants: {
              full_name_a_1: 'Test User',
              auth_mode_a_1: 'IX'
            }
          }
        }]
      },
      referralcode: {
        refer: null,
        referralErrorMsg: ''
      },
      urlParam: {
        resume: false
      },
      rate: {
        ar: '',
        eir: ''
      },
      ...storeState
    };

    const store = mockStore(initialState);
    
    return render(
      <Provider store={store}>
        <Model {...mockProps} {...props} />
      </Provider>
    );
  };

  test('renders the component with basic props', () => {
    renderComponent();
    
    expect(screen.getByText('Test Header')).toBeInTheDocument();
    expect(screen.getByText('Test content line 1')).toBeInTheDocument();
    expect(screen.getByText('Test content line 2')).toBeInTheDocument();
    expect(screen.getByText('Button 1')).toBeInTheDocument();
    expect(screen.getByText('Button 2')).toBeInTheDocument();
  });

  test('triggers track event on render', () => {
    renderComponent();
    
    expect(trackEvents.triggerAdobeEvent).toHaveBeenCalledWith(
      'popupViewed',
      'Test Header'
    );
  });

  test('handles button click for non-special cases', () => {
    renderComponent();
    
    fireEvent.click(screen.getByText('Button 1'));
    expect(trackEvents.triggerAdobeEvent).toHaveBeenCalledWith(
      'ctaClick',
      'Button 1:Test Header',
      {},
      'Test Header'
    );
    expect(mockProps.handlebuttonClick).toHaveBeenCalled();
  });

  test('renders postal code popup correctly', () => {
    renderComponent({ name: 'postal_code' });
    
    expect(screen.getByText('Enter Postal Code')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('Enter postal code')).toBeInTheDocument();
    expect(screen.getByText('Postal Button 1')).toBeInTheDocument();
    expect(screen.getByText('Postal Button 2')).toBeInTheDocument();
  });

  test('handles postal code input change', () => {
    renderComponent({ name: 'postal_code' });
    
    const input = screen.getByPlaceholderText('Enter postal code');
    fireEvent.change(input, { target: { value: '123456' } });
    
    expect(input).toHaveValue('123456');
  });

  test('shows error for invalid postal code length', () => {
    renderComponent({ name: 'postal_code' });
    
    const input = screen.getByPlaceholderText('Enter postal code');
    fireEvent.change(input, { target: { value: '123' } });
    fireEvent.click(screen.getByText('Postal Button 1'));
    
    expect(screen.getByText('Invalid postal code')).toBeInTheDocument();
  });

  test('displays rate information when available', () => {
    renderComponent(
      { name: 'postal_code' },
      { rate: { ar: '5.5', eir: '6.0' } }
    );
    
    expect(screen.getByText('Second Header')).toBeInTheDocument();
    expect(screen.getByText('5.5% p.a.')).toBeInTheDocument();
    expect(screen.getByText('(EIR 6.0% p.a.)')).toBeInTheDocument();
    expect(screen.getByText('Popup description text')).toBeInTheDocument();
  });

  test('handles referral code popup case', () => {
    renderComponent(
      { name: 'referral_code' },
      { referralcode: { refer: 'test', referralErrorMsg: 'Error' } }
    );
    
    expect(screen.queryByText('Lottie Player')).not.toBeInTheDocument();
  });

  test('renders age hard stop with additional content', () => {
    renderComponent({ 
      name: 'ageHardStop',
      body_content: '18 years' 
    });
    
    expect(screen.getByText(/18 years/)).toBeInTheDocument();
  });

  test('renders tooltip variant', () => {
    renderComponent({ isTooltip: true });
    
    expect(screen.queryByText('Lottie Player')).not.toBeInTheDocument();
    expect(screen.getByTestId('popup-question')).toBeInTheDocument();
  });

  test('handles CCThankYou case with continue without activation', () => {
    renderComponent({ name: 'CCThankYou' });
    
    fireEvent.click(screen.getByText('Button 1'));
    expect(mockProps.handleContinueWithoutActivation).toHaveBeenCalled();
  });

  test('handles CCCardActivation case with OTP success', () => {
    renderComponent({ name: 'CCCardActivation' });
    
    fireEvent.click(screen.getByText('Button 1'));
    expect(mockProps.handleOTPSuccessClick).toHaveBeenCalled();
  });

  test('redirects to home page when no special cases match', () => {
    delete window.location;
    window.location = { href: '' } as any;
    
    renderComponent({ callBackMethod: false }, { 
      referralcode: { refer: false },
      urlParam: { resume: false }
    });
    
    fireEvent.click(screen.getByText('Button 1'));
    expect(window.location.href).toBe('http://localhost/');
  });

  test('dispatches rate request for postal code with valid input', async () => {
    const mockDispatch = jest.fn();
    jest.spyOn(commonService, 'rateRequest').mockResolvedValue({});
    
    renderComponent({ name: 'postal_code' });
    
    const input = screen.getByPlaceholderText('Enter postal code');
    fireEvent.change(input, { target: { value: '123456' } });
    fireEvent.click(screen.getByText('Postal Button 1'));
    
    await waitFor(() => {
      expect(commonService.rateRequest).toHaveBeenCalled();
    });
  });

  test('handles preferred limit case with FAQ link', () => {
    renderComponent({ name: 'preferred_limit' });
    
    expect(screen.getByText('FAQs')).toBeInTheDocument();
    expect(screen.getByText('FAQs').closest('a')).toHaveAttribute('target', '_blank');
  });
});
