import Rules_ad_1 from './Rules_ad_1';
import rulesUtils from './rules.utils';

// Mock the rulesUtils function
jest.mock('./rules.utils', () => jest.fn());

describe('Rules_ad_1 Utility Function - Alternative Tests', () => {
  beforeEach(() => {
    // Clear localStorage and mocks before each test
    localStorage.clear();
    jest.clearAllMocks();
    
    // Setup mock localStorage products
    localStorage.setItem('products', JSON.stringify([
      { 
        product_category_name: 'Current Account', 
        name: 'Premium Account',
        product_category: 'CA'
      }
    ]));
  });

  const baseProps = [
    [
      {
        field_set_name: "Additional Details",
        fields: [
          { 
            logical_field_name: "reason_for_account_rwb", 
            component_type: "Text",
            mandatory: "false"
          },
          { 
            logical_field_name: "Initial_deposit_rwb", 
            component_type: "Number",
            mandatory: "false"
          },
          { 
            logical_field_name: "source_of_fund_rwb", 
            component_type: "Text",
            mandatory: "false"
          }
        ]
      },
      {
        field_set_name: "Banking Services",
        fields: [
          { 
            logical_field_name: "debit_card_request_rwb", 
            component_type: "Checkbox",
            mandatory: "false"
          },
          { 
            logical_field_name: "issuance_type", 
            component_type: "Radio",
            mandatory: "false"
          },
          { 
            logical_field_name: "embossed_dc_name_rwb", 
            component_type: "Text",
            mandatory: "false"
          },
          { 
            logical_field_name: "existing_account_no_dc", 
            component_type: "Text",
            mandatory: "false"
          },
          { 
            logical_field_name: "cheque_book_request_rwb", 
            component_type: "Checkbox",
            mandatory: "false"
          }
        ]
      },
      {
        field_set_name: "Time Deposit Details",
        fields: [
          { 
            logical_field_name: "td_product_currency_value", 
            component_type: "Text",
            mandatory: "false"
          },
          { 
            logical_field_name: "td_depoist_amount", 
            component_type: "Number",
            mandatory: "false"
          }
        ]
      }
    ]
  ];

  const baseStageInfo = {
    applicants: {
      no_of_accounts_rwb_a_1: 1
    },
    products: [
      { 
        product_category: 'CA', 
        product_type: '307',
        product_category_name: 'Current Account',
        name: 'Premium Account'
      }
    ]
  };

  describe('Field Transformations', () => {
    it('should make Additional Details fields mandatory when multiple products exist', () => {
      // Set multiple products in localStorage
      localStorage.setItem('products', JSON.stringify([
        { product_category_name: 'Current Account', name: 'Account 1' },
        { product_category_name: 'Savings Account', name: 'Account 2' }
      ]));

      Rules_ad_1(baseProps, baseStageInfo);

      const filteredFields = rulesUtils.mock.calls[0][0][0];
      const additionalDetailsFields = filteredFields[0].fields;
      
      expect(additionalDetailsFields.every((f: any) => f.mandatory === "true")).toBe(true);
    });

    it('should modify field_set_name when multiple products exist', () => {
      // Set multiple products in localStorage
      localStorage.setItem('products', JSON.stringify([
        { product_category_name: 'Current Account', name: 'Account 1' },
        { product_category_name: 'Savings Account', name: 'Account 2' }
      ]));

      Rules_ad_1(baseProps, baseStageInfo);

      const filteredFields = rulesUtils.mock.calls[0][0][0];
      expect(filteredFields[0].field_set_name).toMatch(/Current Account - Account 1 Additional Details/);
    });

    it('should transform td_product_currency_value from Text to SelectionBox for TD products', () => {
      // Set TD product
      localStorage.setItem('products', JSON.stringify([
        { product_category_name: 'Time Deposit', name: 'Fixed Deposit', product_category: 'TD' }
      ]));

      const tdStageInfo = {
        ...baseStageInfo,
        products: [
          { product_category: 'TD', product_type: '500' }
        ]
      };

      Rules_ad_1(baseProps, tdStageInfo);

      const filteredFields = rulesUtils.mock.calls[0][0][0];
      const tdFields = filteredFields.find((fs: any) => fs.field_set_name === 'Time Deposit Details').fields;
      const currencyField = tdFields.find((f: any) => f.logical_field_name === 'td_product_currency_value');
      
      expect(currencyField.component_type).toBe('SelectionBox');
    });
  });

  describe('Field Filtering', () => {
    it('should filter out specific banking services fields for product type 307', () => {
      const stageInfo = {
        ...baseStageInfo,
        products: [
          { product_category: 'CA', product_type: '307' }
        ]
      };

      Rules_ad_1(baseProps, stageInfo);

      const filteredFields = rulesUtils.mock.calls[0][0][0];
      const bankingServicesFields = filteredFields.find((fs: any) => 
        fs.field_set_name.includes('Banking Services')
      ).fields;
      
      expect(bankingServicesFields.some((f: any) => f.logical_field_name === 'cheque_book_request_rwb')).toBe(false);
      expect(bankingServicesFields.some((f: any) => f.logical_field_name === 'existing_account_no_dc')).toBe(false);
    });

    it('should include all banking services fields for product type 310', () => {
      const stageInfo = {
        ...baseStageInfo,
        products: [
          { product_category: 'CA', product_type: '310' }
        ]
      };

      Rules_ad_1(baseProps, stageInfo);

      const filteredFields = rulesUtils.mock.calls[0][0][0];
      const bankingServicesFields = filteredFields.find((fs: any) => 
        fs.field_set_name === 'Banking Services'
      ).fields;
      
      expect(bankingServicesFields.some((f: any) => f.logical_field_name === 'cheque_book_request_rwb')).toBe(true);
      expect(bankingServicesFields.some((f: any) => f.logical_field_name === 'existing_account_no_dc')).toBe(true);
    });
  });

  describe('Validation Object', () => {
    it('should hide Initial_deposit_rwb for all scenarios', () => {
      Rules_ad_1(baseProps, baseStageInfo);

      const validationObj = rulesUtils.mock.calls[0][1];
      expect(validationObj.hidden[0]).toContain('Initial_deposit_rwb');
    });

    it('should hide specific fields for product type 307', () => {
      const stageInfo = {
        ...baseStageInfo,
        products: [
          { product_category: 'CA', product_type: '307' }
        ]
      };

      Rules_ad_1(baseProps, stageInfo);

      const validationObj = rulesUtils.mock.calls[0][1];
      expect(validationObj.hidden[0]).toContain('reason_for_account_rwb');
      expect(validationObj.hidden[0]).toContain('source_of_fund_rwb');
    });

    it('should modify visibility for TD product fields', () => {
      // Set TD product
      localStorage.setItem('products', JSON.stringify([
        { product_category_name: 'Time Deposit', name: 'Fixed Deposit', product_category: 'TD' }
      ]));

      const tdStageInfo = {
        ...baseStageInfo,
        products: [
          { product_category: 'TD', product_type: '500' }
        ]
      };

      Rules_ad_1(baseProps, tdStageInfo);

      const validationObj = rulesUtils.mock.calls[0][1];
      expect(validationObj.modifyVisibility[0]).toContain('td_product_currency_value');
      expect(validationObj.modifyVisibility[0]).toContain('td_depoist_amount');
    });
  });

  describe('Repeat Account Handling', () => {
    it('should create additional field sets with incremented rwb_index', () => {
      const stageInfo = {
        ...baseStageInfo,
        applicants: {
          no_of_accounts_rwb_a_1: 3
        },
        products: [
          { product_category: 'CA', product_type: '310' }
        ]
      };

      Rules_ad_1(baseProps, stageInfo);

      const filteredFields = rulesUtils.mock.calls[0][0][0];
      
      // Find the additional details for the second account
      const additionalDetails2 = filteredFields.find((fs: any) => 
        fs.field_set_name === 'Additional Details' && 
        fs.fields[0].logical_field_name.endsWith('_2')
      );
      
      expect(additionalDetails2).toBeDefined();
      expect(additionalDetails2.fields[0].rwb_index).toBe(2);
    });

    it('should hide fields for repeated accounts with product type 310', () => {
      const stageInfo = {
        ...baseStageInfo,
        applicants: {
          no_of_accounts_rwb_a_1: 3
        },
        products: [
          { product_category: 'CA', product_type: '310' }
        ]
      };

      Rules_ad_1(baseProps, stageInfo);

      const validationObj = rulesUtils.mock.calls[0][1];
      expect(validationObj.hidden[0]).toContain('cheque_book_request_rwb_2');
      expect(validationObj.hidden[0]).toContain('reason_for_account_rwb_2');
      expect(validationObj.hidden[0]).toContain('Initial_deposit_rwb_2');
      expect(validationObj.hidden[0]).toContain('source_of_fund_rwb_2');
    });
  });
});
