import { getFields } from './your-file-path';
import { fieldErrorAction, stagesAction } from '../../../utils/store';

// Mock all external dependencies
jest.mock('../../../utils/common/change.utils', () => ({
  FindIndex: jest.fn().mockImplementation(() => 0),
  getUrl: {
    getUserInputs: jest.fn().mockReturnValue({}),
    getJourneyType: jest.fn().mockReturnValue(''),
  },
  authenticateType: jest.fn().mockReturnValue('manual'),
}));

jest.mock('../../../services/common-service', () => ({
  getProductCategory: jest.fn().mockReturnValue(''),
}));

describe('getFields function', () => {
  const mockDispatch = jest.fn();
  const mockGetState = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  const baseStage = {
    stageId: 'ad-1',
    stageInfo: {
      fieldmetadata: {
        data: {
          stages: [
            { 
              stageId: 'ad', 
              fields: [
                { logical_field_name: 'NRIC' }, 
                { logical_field_name: 'passport_no' },
                { logical_field_name: 'pass_exp_dt' }
              ] 
            },
            { 
              stageId: 'bd', 
              fields: [
                { logical_field_name: 'work_type' },
                { logical_field_name: 'name_of_employer' },
                { logical_field_name: 'name_of_business' }
              ] 
            }
          ]
        }
      },
      applicants: {
        NRIC_a_1: 'S1234567A'
      },
      products: []
    }
  };

  // Test helper function
  const executeGetFields = (params: any) => {
    const result = getFields(
      params.getStages || [baseStage],
      params.radioResidency,
      params.employerOther,
      params.userInputs,
      params.bancaSelector
    );
    return result(mockDispatch, mockGetState);
  };

  describe('Residency status handling', () => {
    it('should handle Singaporean/PR residency status', () => {
      executeGetFields({
        radioResidency: {
          logical_field_name: 'residency_status',
          value: 'CT'
        }
      });

      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields(['passport_no', 'pass_exp_dt'])
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: ['passport_no', 'pass_exp_dt'],
          newFields: ['NRIC'],
          value: 'S1234567A'
        })
      );
    });

    it('should handle Foreigner residency status', () => {
      require('../../../utils/common/change.utils').getUrl.getUserInputs.mockReturnValue({
        passport_no_a_1: 'E12345678',
        pass_exp_dt_a_1: '2025-12-31'
      });

      executeGetFields({
        radioResidency: {
          logical_field_name: 'residency_status',
          value: 'FR'
        }
      });

      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields(['NRIC'])
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: ['NRIC'],
          newFields: ['passport_no', 'pass_exp_dt'],
          value: {
            passport_no_a_1: 'E12345678',
            pass_exp_dt_a_1: '2025-12-31'
          }
        })
      );
    });
  });

  describe('Work type handling', () => {
    it('should handle Earner work type', () => {
      require('../../../utils/common/change.utils').getUrl.getUserInputs.mockReturnValue({
        name_of_employer_a_1: 'Test Company',
        nature_of_employer_a_1: 'IT',
        job_title_a_1: 'Developer',
        office_phone_number_a_1: '12345678'
      });

      executeGetFields({
        radioResidency: {
          logical_field_name: 'work_type',
          value: 'S'
        }
      });

      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: ['name_of_business', 'nature_of_employer', 'job_title', 'office_phone_number'],
          newFields: ['name_of_employer', 'nature_of_employer', 'job_title', 'office_phone_number'],
          value: {
            name_of_employer_a_1: 'Test Company',
            nature_of_employer_a_1: 'IT',
            job_title_a_1: 'Developer',
            office_phone_number_a_1: '12345678'
          }
        })
      );
    });
  });

  describe('Credit limit consent handling', () => {
    it('should handle credit_limit_consent = Y', () => {
      executeGetFields({
        radioResidency: {
          logical_field_name: 'credit_limit_consent',
          value: 'Y'
        },
        bancaSelector: {
          eligible_banca_insurances: ['life', 'health']
        }
      });

      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields([
          'embossed_name', 'myinfo_data_cli', 'insurance_consent_life', 'insurance_consent_health'
        ])
      );
    });
  });

  describe('Stage ID handling', () => {
    it('should handle ad-2 stage with manual authentication', () => {
      const modifiedStage = JSON.parse(JSON.stringify(baseStage));
      modifiedStage.stageId = 'ad-2';
      
      require('../../../utils/common/change.utils').authenticateType.mockReturnValue('manual');

      executeGetFields({
        getStages: [modifiedStage]
      });

      expect(require('../../../utils/common/change.utils').FindIndex).toHaveBeenCalled();
    });

    it('should handle bd-1 stage', () => {
      const modifiedStage = JSON.parse(JSON.stringify(baseStage));
      modifiedStage.stageId = 'bd-1';
      
      executeGetFields({
        getStages: [modifiedStage]
      });

      expect(require('../../../utils/common/change.utils').FindIndex).toHaveBeenCalledWith(
        modifiedStage.stageInfo,
        'bd'
      );
    });
  });

  describe('Edge cases', () => {
    it('should return null when no radioResidency or employerOther is provided', () => {
      const result = executeGetFields({});
      expect(result).toBeNull();
    });

    it('should handle employerOther parameter', () => {
      executeGetFields({
        employerOther: 'name_of_employer_other'
      });

      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: [],
          newFields: ['name_of_employer_other'],
          value: ''
        })
      );
    });
  });
});
