import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { createStore, combineReducers } from 'redux';
import '@testing-library/jest-dom';
import Model from './Model';

// Mock external dependencies
jest.mock('../../../assets/_json/model.json', () => [
  {
    name: 'postal_code',
    header_content: 'Enter Postal Code',
    header_content_second: 'Rate Information',
    body_content: ['Please enter your postal code'],
    buttons: ['Check Rate'],
    PostalCodebuttons: ['Continue'],
    postal_code_lable: 'Postal Code',
    errorDesc: 'Please enter a valid postal code',
    popupDescription: 'Your rate information'
  },
  {
    name: 'ageHardStop',
    header_content: 'ageHardStop',
    body_content: ['You must be at least 18 years old'],
    buttons: ['OK']
  },
  {
    name: 'usHardStop',
    header_content: 'usHardStop',
    body_content: ['US residents cannot open accounts'],
    buttons: ['OK']
  },
  {
    name: 'referral_code',
    header_content: 'Referral Code',
    body_content: ['Do you have a referral code?'],
    buttons: ['Yes', 'No']
  },
  {
    name: 'CCThankYou',
    header_content: 'Thank You',
    body_content: ['Thank you for your application'],
    buttons: ['Continue Without Activation', 'Continue']
  },
  {
    name: 'CCCardActivation',
    header_content: 'Card Activation',
    body_content: ['Please activate your card'],
    buttons: ['Activate']
  },
  {
    name: 'nationalityHardStop',
    header_content: 'Nationality Issue',
    body_content: ['Nationality restriction'],
    buttons: ['OK']
  },
  {
    name: 'preferred_limit',
    header_content: 'Preferred Limit',
    body_content: ['Select your preferred limit', 'More information available in'],
    buttons: ['Continue']
  }
]);

jest.mock('../../../assets/_json/lottie/oops.json', () => ({}));
jest.mock('../../../assets/_json/error.json', () => ({
  referralcodeerror: 'Invalid referral code'
}));

const mockTrackEvents = {
  triggerAdobeEvent: jest.fn()
};
jest.mock('../../../services/track-events', () => mockTrackEvents);

const mockUtils = {
  getUrl: {
    getParameterByName: jest.fn(() => null),
    getUpdatedStage: jest.fn(() => ({ ccplChannel: '' }))
  },
  FindIndex: jest.fn(() => 0),
  getTokenChno: jest.fn(() => ({ channelRefNo: 'test123' }))
};
jest.mock('../../../utils/common/change.utils', () => mockUtils);

const mockServices = {
  redirectingToIbanking: jest.fn(),
  rateRequest: jest.fn(() => ({ type: 'RATE_REQUEST' })),
  formConfig: jest.fn(() => ({ type: 'FORM_CONFIG' })),
  submitBasicDataMyInfo: jest.fn(),
  channelReference: jest.fn(() => Promise.resolve({ data: { success: true } }))
};
jest.mock('../../../services/common-service', () => mockServices);

const mockValidationService = {
  allowOnlyCharacter: jest.fn()
};
jest.mock('../../../services/validation-service', () => mockValidationService);

jest.mock('@lottiefiles/react-lottie-player', () => ({
  Player: ({ className }) => <div className={className} data-testid="lottie-player" />
}));

const mockFieldsUtils = {
  stageFields: jest.fn(() => ({}))
};
jest.mock('../../../modules/dashboard/fields/fields.utils', () => mockFieldsUtils);

const mockStageUtils = {
  stateUrl: jest.fn()
};
jest.mock('../../../modules/dashboard/fields/stage.utils', () => mockStageUtils);

// Mock environment variables
process.env.REACT_APP_IBANKING_SC_MOBILE = 'https://mobile.bank.com';
process.env.REACT_APP_HOME_PAGE_URL = 'https://bank.com';
process.env.REACT_APP_PREFERRED_LIMIT_FAQS = 'https://bank.com/faqs';

// Redux reducers
const referralcodeReducer = (state = { refer: null, referralErrorMsg: '' }, action) => {
  switch (action.type) {
    case 'referralcode/setReferralErrorMsg':
      return { ...state, referralErrorMsg: action.payload };
    default:
      return state;
  }
};

const stagesReducer = (state = {
  stages: [{
    stageId: 'bd',
    stageInfo: {
      fieldmetaData: {
        data: {
          stages: [{
            fields: [{
              logical_field_name: 'postal_code',
              min_length: 6
            }]
          }]
        }
      },
      applicants: {
        full_name_a_1: 'John Doe',
        auth_mode_a_1: 'IX'
      },
      products: [{
        product_category: 'PL'
      }, {
        product_category: 'CC'
      }]
    }
  }]
}, action) => {
  switch (action.type) {
    case 'stages/updateLastStageInput':
    case 'stages/resetCurrentStage':
    case 'stages/updateStageId':
      return state;
    default:
      return state;
  }
};

const rateReducer = (state = { ar: '', eir: '' }, action) => {
  switch (action.type) {
    case 'RATE_REQUEST':
      return { ...state, ar: '5.5', eir: '6.0' };
    default:
      return state;
  }
};

const urlParamReducer = (state = { resume: false }, action) => state;

const rootReducer = combineReducers({
  referralcode: referralcodeReducer,
  stages: stagesReducer,
  rate: rateReducer,
  urlParam: urlParamReducer
});

const createMockStore = (initialState = {}) => {
  return createStore(rootReducer, initialState);
};

// Mock window.location
delete window.location;
window.location = { href: '' };

describe('Model Component', () => {
  let mockStore;
  let mockProps;

  beforeEach(() => {
    mockStore = createMockStore();
    mockProps = {
      name: 'postal_code',
      handlebuttonClick: jest.fn(),
      body_content: '',
      isTooltip: false
    };
    jest.clearAllMocks();
    window.location.href = '';
  });

  describe('Component Rendering', () => {
    test('renders postal code popup with all elements', () => {
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(screen.getByText('Enter Postal Code')).toBeInTheDocument();
      expect(screen.getByText('Please enter your postal code')).toBeInTheDocument();
      expect(screen.getByText('Postal Code')).toBeInTheDocument();
      expect(screen.getByPlaceholderText('Enter postal code')).toBeInTheDocument();
      expect(screen.getByText('Check Rate')).toBeInTheDocument();
    });

    test('renders age hard stop popup correctly', () => {
      mockProps.name = 'ageHardStop';
      mockProps.body_content = 'to apply for this service';

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(screen.getByText('Age Hard Stop')).toBeInTheDocument();
      expect(screen.getByText('You must be at least 18 years old to apply for this service')).toBeInTheDocument();
      expect(screen.getByTestId('lottie-player')).toBeInTheDocument();
    });

    test('renders us hard stop popup correctly', () => {
      mockProps.name = 'usHardStop';

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(screen.getByText('We are unable to open accounts for US residents')).toBeInTheDocument();
      expect(screen.getByText('US residents cannot open accounts')).toBeInTheDocument();
    });

    test('renders preferred limit popup with FAQ link', () => {
      mockProps.name = 'preferred_limit';

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(screen.getByText('Preferred Limit')).toBeInTheDocument();
      expect(screen.getByRole('link', { name: 'FAQs' })).toBeInTheDocument();
      expect(screen.getByRole('link', { name: 'FAQs' })).toHaveAttribute('href', 'https://bank.com/faqs');
    });

    test('renders tooltip when isTooltip is true', () => {
      mockProps.name = 'ageHardStop';
      mockProps.isTooltip = true;

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(screen.getByRole('generic')).toHaveClass('popup__question');
      expect(screen.queryByTestId('lottie-player')).not.toBeInTheDocument();
    });

    test('does not render when model data is not found', () => {
      mockProps.name = 'nonexistent_popup';

      const { container } = render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(container.firstChild).toBeNull();
    });
  });

  describe('Postal Code Input Functionality', () => {
    test('handles postal code input change', () => {
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const input = screen.getByPlaceholderText('Enter postal code');
      fireEvent.change(input, { target: { value: '123456' } });

      expect(input.value).toBe('123456');
    });

    test('shows error when postal code is too short', () => {
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const input = screen.getByPlaceholderText('Enter postal code');
      fireEvent.change(input, { target: { value: '12345' } });

      const button = screen.getByText('Check Rate');
      fireEvent.click(button);

      expect(screen.getByText('Please enter a valid postal code')).toBeInTheDocument();
    });

    test('does not show error when postal code is valid length', () => {
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const input = screen.getByPlaceholderText('Enter postal code');
      fireEvent.change(input, { target: { value: '123456' } });

      const button = screen.getByText('Check Rate');
      fireEvent.click(button);

      expect(screen.queryByText('Please enter a valid postal code')).not.toBeInTheDocument();
    });

    test('handles key press validation', () => {
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const input = screen.getByPlaceholderText('Enter postal code');
      fireEvent.keyPress(input, { key: 'a', code: 'KeyA' });

      expect(mockValidationService.allowOnlyCharacter).toHaveBeenCalled();
    });

    test('respects maxLength attribute', () => {
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const input = screen.getByPlaceholderText('Enter postal code');
      expect(input).toHaveAttribute('maxLength', '6');
    });
  });

  describe('Rate Information Display', () => {
    test('displays rate information when available', () => {
      const storeWithRate = createMockStore({
        rate: { ar: '5.5', eir: '6.0' }
      });

      render(
        <Provider store={storeWithRate}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(screen.getByText('Rate Information')).toBeInTheDocument();
      expect(screen.getByText('5.5% p.a.')).toBeInTheDocument();
      expect(screen.getByText('(EIR 6.0% p.a.)')).toBeInTheDocument();
      expect(screen.getByText('Continue')).toBeInTheDocument();
    });

    test('handles continue button click when rate is available', () => {
      const storeWithRate = createMockStore({
        rate: { ar: '5.5', eir: '6.0' }
      });

      render(
        <Provider store={storeWithRate}>
          <Model {...mockProps} />
        </Provider>
      );

      const continueButton = screen.getByText('Continue');
      fireEvent.click(continueButton);

      expect(mockProps.handlebuttonClick).toHaveBeenCalled();
    });
  });

  describe('Button Click Handling', () => {
    test('handles CCThankYou continue without activation', () => {
      mockProps.name = 'CCThankYou';
      mockProps.handleContinueWithoutActivation = jest.fn();

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const button = screen.getByText('Continue Without Activation');
      fireEvent.click(button);

      expect(mockProps.handleContinueWithoutActivation).toHaveBeenCalled();
    });

    test('handles CCThankYou continue button', () => {
      mockProps.name = 'CCThankYou';

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const button = screen.getByText('Continue');
      fireEvent.click(button);

      expect(mockProps.handlebuttonClick).toHaveBeenCalled();
    });

    test('handles CCCardActivation button', () => {
      mockProps.name = 'CCCardActivation';
      mockProps.handleOTPSuccessClick = jest.fn();

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const button = screen.getByText('Activate');
      fireEvent.click(button);

      expect(mockProps.handleOTPSuccessClick).toHaveBeenCalled();
    });

    test('handles nationalityHardStop button', () => {
      mockProps.name = 'nationalityHardStop';

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const button = screen.getByText('OK');
      fireEvent.click(button);

      expect(mockProps.handlebuttonClick).toHaveBeenCalled();
    });

    test('redirects to home page on default button click', () => {
      mockProps.name = 'ageHardStop';

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const button = screen.getByText('OK');
      fireEvent.click(button);

      expect(window.location.href).toBe('https://bank.com');
    });
  });

  describe('Referral Code Functionality', () => {
    test('shows referral popup content when referral code exists', () => {
      mockProps.name = 'referral_code';
      const storeWithReferral = createMockStore({
        referralcode: { refer: 'test123', referralErrorMsg: '' },
        urlParam: { resume: false }
      });

      render(
        <Provider store={storeWithReferral}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(screen.getByText('Referral Code')).toBeInTheDocument();
      expect(screen.getByText('Do you have a referral code?')).toBeInTheDocument();
    });

    test('handles referral code Yes button click', () => {
      mockProps.name = 'referral_code';
      mockProps.setContinueWithoutReferralcode = jest.fn();
      mockProps.setShowReferralcodePopup = jest.fn();
      
      const storeWithReferral = createMockStore({
        referralcode: { refer: 'test123', referralErrorMsg: '' }
      });

      render(
        <Provider store={storeWithReferral}>
          <Model {...mockProps} />
        </Provider>
      );

      const yesButton = screen.getByText('Yes');
      fireEvent.click(yesButton);

      expect(mockProps.setContinueWithoutReferralcode).toHaveBeenCalledWith(false);
      expect(mockProps.setShowReferralcodePopup).toHaveBeenCalledWith(false);
    });

    test('handles referral code No button click', () => {
      mockProps.name = 'referral_code';
      mockProps.setContinueWithoutReferralcode = jest.fn();
      mockProps.setShowReferralcodePopup = jest.fn();
      
      const storeWithReferral = createMockStore({
        referralcode: { refer: 'test123', referralErrorMsg: '' }
      });

      render(
        <Provider store={storeWithReferral}>
          <Model {...mockProps} />
        </Provider>
      );

      const noButton = screen.getByText('No');
      fireEvent.click(noButton);

      expect(mockProps.setContinueWithoutReferralcode).toHaveBeenCalledWith(true);
      expect(mockProps.setShowReferralcodePopup).toHaveBeenCalledWith(false);
    });
  });

  describe('Event Tracking', () => {
    test('triggers Adobe event on popup view', () => {
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(mockTrackEvents.triggerAdobeEvent).toHaveBeenCalledWith(
        'popupViewed',
        'Enter Postal Code'
      );
    });

    test('triggers Adobe event on button click', () => {
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const input = screen.getByPlaceholderText('Enter postal code');
      fireEvent.change(input, { target: { value: '123456' } });

      const button = screen.getByText('Check Rate');
      fireEvent.click(button);

      expect(mockTrackEvents.triggerAdobeEvent).toHaveBeenCalledWith(
        'ctaClick',
        expect.stringContaining('Check Rate'),
        {},
        'Enter Postal Code'
      );
    });
  });

  describe('CSS Classes and Styling', () => {
    test('applies correct CSS classes for postal code popup', () => {
      const { container } = render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(container.querySelector('.popup')).toHaveClass('postal__code__popup');
      expect(container.querySelector('.popup__info__head')).toHaveClass('popup__info__head__underline');
    });

    test('applies correct CSS classes for regular popup', () => {
      mockProps.name = 'ageHardStop';

      const { container } = render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(container.querySelector('.popup')).not.toHaveClass('postal__code__popup');
      expect(container.querySelector('.waring__icon')).toBeInTheDocument();
    });

    test('applies referral popup icon class when showing referral content', () => {
      mockProps.name = 'referral_code';
      const storeWithReferral = createMockStore({
        referralcode: { refer: 'test123', referralErrorMsg: '' }
      });

      const { container } = render(
        <Provider store={storeWithReferral}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(container.querySelector('.referralcode-popup-icon')).toBeInTheDocument();
    });
  });

  describe('Edge Cases and Error Handling', () => {
    test('handles empty button click without crashing', () => {
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const button = screen.getByText('Check Rate');
      fireEvent.click(button);

      // Should not crash and should show error
      expect(screen.getByText('Please enter a valid postal code')).toBeInTheDocument();
    });

    test('handles channel reference API call', async () => {
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const input = screen.getByPlaceholderText('Enter postal code');
      fireEvent.change(input, { target: { value: '123456' } });

      const button = screen.getByText('Check Rate');
      fireEvent.click(button);

      await waitFor(() => {
        expect(mockServices.channelReference).toHaveBeenCalled();
      });
    });

    test('handles missing props gracefully', () => {
      const minimalProps = {
        name: 'postal_code'
      };

      expect(() => {
        render(
          <Provider store={mockStore}>
            <Model {...minimalProps} />
          </Provider>
        );
      }).not.toThrow();
    });

    test('handles special popup names', () => {
      const specialNames = [
        'country_of_tax_residence',
        'crs_reason_code',
        'casa_fatca_declaration_1',
        'confirmationPopup',
        'contact_preference_casa',
        'missingMandatoryDocument',
        'selectDocument'
      ];

      specialNames.forEach(name => {
        mockProps.name = name;
        expect(() => {
          render(
            <Provider store={mockStore}>
              <Model {...mockProps} />
            </Provider>
          );
        }).not.toThrow();
      });
    });
  });
});
