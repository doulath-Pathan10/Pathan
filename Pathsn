import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import Phone from './Phone';
import { lastAction } from '../../../utils/store/last-accessed-slice';
import { stagesAction } from '../../../utils/store/stages-slice';

// Mock Redux store
const mockStore = configureStore({
  reducer: {
    lov: () => ({ lov: [] }),
    stages: () => ({
      stages: [
        {
          stageId: 'bd-1',
          stageInfo: {
            applicants: {
              mobile_number_a_1: '91234567',
              mobile_number_rwb_a_1: '65',
              home_phone_number_a_1: '61234567',
              home_phone_number_rwb_a_1: '65'
            }
          }
        }
      ],
      userInput: {
        applicants: {
          mobile_number_a_1: '91234567',
          mobile_number_rwb_a_1: '65',
          home_phone_number_a_1: '61234567',
          home_phone_number_rwb_a_1: '65',
          select_alt_contacts_a_1: 'MO1,MO2'
        }
      }
    }),
    fielderror: () => ({ error: [] }),
    lastaccessed: () => ({})
  }
});

// Mock sessionStorage
const mockSessionStorage = (() => {
  let store: Record<string, string> = {};

  return {
    getItem: (key: string) => store[key] || null,
    setItem: (key: string, value: string) => {
      store[key] = value.toString();
    },
    clear: () => {
      store = {};
    }
  };
})();

Object.defineProperty(window, 'sessionStorage', {
  value: mockSessionStorage
});

describe('Phone Component', () => {
  const mockProps = {
    data: {
      logical_field_name: 'mobile_number',
      rwb_label_name: 'Mobile Number',
      min_length: '8',
      max_length: '8',
      regex: '^[0-9]*$',
      mandatory: 'Yes',
      editable: false
    },
    handleCallback: jest.fn()
  };

  beforeEach(() => {
    window.sessionStorage.setItem('currentStage', '1');
    jest.clearAllMocks();
  });

  test('renders without crashing', () => {
    render(
      <Provider store={mockStore}>
        <Phone {...mockProps} />
      </Provider>
    );

    expect(screen.getByLabelText('Mobile Number')).toBeInTheDocument();
  });

  test('displays correct placeholder for mobile number', () => {
    render(
      <Provider store={mockStore}>
        <Phone {...mockProps} />
      </Provider>
    );

    expect(screen.getByPlaceholderText('Mobile Number')).toBeInTheDocument();
  });

  test('displays correct placeholder for home phone number', () => {
    const homePhoneProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'home_phone_number',
        rwb_label_name: 'Home Phone Number'
      }
    };

    render(
      <Provider store={mockStore}>
        <Phone {...homePhoneProps} />
      </Provider>
    );

    expect(screen.getByPlaceholderText('Home Phone Number')).toBeInTheDocument();
  });

  test('loads default value from store', () => {
    render(
      <Provider store={mockStore}>
        <Phone {...mockProps} />
      </Provider>
    );

    const input = screen.getByPlaceholderText('Mobile Number') as HTMLInputElement;
    expect(input.value).toBe('91234567');
  });

  test('handles value change correctly', () => {
    render(
      <Provider store={mockStore}>
        <Phone {...mockProps} />
      </Provider>
    );

    const input = screen.getByPlaceholderText('Mobile Number');
    fireEvent.change(input, { target: { value: '98765432' } });

    expect(mockProps.handleCallback).toHaveBeenCalledWith(
      mockProps.data,
      '98765432'
    );
  });

  test('validates Singapore mobile number format', () => {
    render(
      <Provider store={mockStore}>
        <Phone {...mockProps} />
      </Provider>
    );

    const input = screen.getByPlaceholderText('Mobile Number');
    
    // Test invalid Singapore number (doesn't start with 8 or 9)
    fireEvent.change(input, { target: { value: '71234567' } });
    expect(screen.getByText(/Singapore mobile number should start with 8 or 9/)).toBeInTheDocument();
    
    // Test valid Singapore number
    fireEvent.change(input, { target: { value: '81234567' } });
    expect(screen.queryByText(/Singapore mobile number should start with 8 or 9/)).not.toBeInTheDocument();
  });

  test('validates minimum length', () => {
    render(
      <Provider store={mockStore}>
        <Phone {...mockProps} />
      </Provider>
    );

    const input = screen.getByPlaceholderText('Mobile Number');
    fireEvent.change(input, { target: { value: '1234567' } }); // 7 digits
    
    expect(screen.getByText(/Please enter 8 digits/)).toBeInTheDocument();
  });

  test('validates empty mandatory field', () => {
    render(
      <Provider store={mockStore}>
        <Phone {...mockProps} />
      </Provider>
    );

    const input = screen.getByPlaceholderText('Mobile Number');
    fireEvent.change(input, { target: { value: '' } });
    
    expect(screen.getByText(/Mobile number is required/)).toBeInTheDocument();
  });

  test('validates pattern for non-Singapore numbers', () => {
    const nonSgStore = configureStore({
      reducer: {
        lov: () => ({ lov: [] }),
        stages: () => ({
          stages: [
            {
              stageId: 'bd-1',
              stageInfo: {
                applicants: {
                  mobile_number_a_1: '12345678',
                  mobile_number_rwb_a_1: '1' // Non-SG country code
                }
              }
            }
          ],
          userInput: {
            applicants: {
              mobile_number_a_1: '12345678',
              mobile_number_rwb_a_1: '1'
            }
          }
        }),
        fielderror: () => ({ error: [] }),
        lastaccessed: () => ({})
      }
    });

    render(
      <Provider store={nonSgStore}>
        <Phone {...mockProps} />
      </Provider>
    );

    const input = screen.getByPlaceholderText('Mobile Number');
    fireEvent.change(input, { target: { value: 'abcd' } }); // Invalid pattern
    
    expect(screen.getByText(/Invalid pattern for mobile number/)).toBeInTheDocument();
  });

  test('displays error when country code is missing', () => {
    const missingCountryCodeStore = configureStore({
      reducer: {
        lov: () => ({ lov: [] }),
        stages: () => ({
          stages: [
            {
              stageId: 'bd-1',
              stageInfo: {
                applicants: {
                  mobile_number_a_1: '91234567',
                  mobile_number_rwb_a_1: ''
                }
              }
            }
          ],
          userInput: {
            applicants: {
              mobile_number_a_1: '91234567',
              mobile_number_rwb_a_1: ''
            }
          }
        }),
        fielderror: () => ({ error: [] }),
        lastaccessed: () => ({})
      }
    });

    render(
      <Provider store={missingCountryCodeStore}>
        <Phone {...mockProps} />
      </Provider>
    );

    expect(screen.getByText('Country code Required')).toBeInTheDocument();
  });

  test('handles home phone number validation', () => {
    const homePhoneProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'home_phone_number',
        rwb_label_name: 'Home Phone Number'
      }
    };

    render(
      <Provider store={mockStore}>
        <Phone {...homePhoneProps} />
      </Provider>
    );

    const input = screen.getByPlaceholderText('Home Phone Number');
    
    // Test invalid home phone number (doesn't start with 3 or 6)
    fireEvent.change(input, { target: { value: '81234567' } });
    expect(screen.getByText(/Singapore home phone number should start with 3 or 6/)).toBeInTheDocument();
    
    // Test valid home phone number
    fireEvent.change(input, { target: { value: '61234567' } });
    expect(screen.queryByText(/Singapore home phone number should start with 3 or 6/)).not.toBeInTheDocument();
  });

  test('disables input when editable is true', () => {
    const disabledProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        editable: true
      }
    };

    render(
      <Provider store={mockStore}>
        <Phone {...disabledProps} />
      </Provider>
    );

    const input = screen.getByPlaceholderText('Mobile Number');
    expect(input).toBeDisabled();
  });

  test('handles myInfo authentication case', () => {
    // Mock authenticateType to return 'myinfo'
    jest.mock('../../../utils/common/change.utils', () => ({
      ...jest.requireActual('../../../utils/common/change.utils'),
      authenticateType: () => 'myinfo'
    }));

    const myInfoStore = configureStore({
      reducer: {
        lov: () => ({ lov: [] }),
        stages: () => ({
          stages: [
            {
              stageId: 'ssf-1',
              stageInfo: {
                applicants: {
                  mobile_number_a_1: '65-91234567'
                }
              }
            }
          ],
          userInput: {
            applicants: {
              mobile_number_a_1: '91234567'
            }
          }
        }),
        fielderror: () => ({ error: [] }),
        lastaccessed: () => ({})
      }
    });

    render(
      <Provider store={myInfoStore}>
        <Phone {...mockProps} />
      </Provider>
    );

    const input = screen.getByPlaceholderText('Mobile Number') as HTMLInputElement;
    expect(input.value).toBe('91234567');
  });

  test('handles alternative contact fields visibility', () => {
    const altContactProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'mobile_1_add',
        rwb_label_name: 'Mobile No. 1'
      }
    };

    render(
      <Provider store={mockStore}>
        <Phone {...altContactProps} />
      </Provider>
    );

    // Should be visible because select_alt_contacts_a_1 includes MO1
    expect(screen.getByPlaceholderText('Mobile No. 1')).toBeInTheDocument();
  });

  test('hides alternative contact fields when not selected', () => {
    const hiddenStore = configureStore({
      reducer: {
        lov: () => ({ lov: [] }),
        stages: () => ({
          stages: [
            {
              stageId: 'bd-3',
              stageInfo: {
                applicants: {
                  mobile_1_add_a_1: '91234567'
                }
              }
            }
          ],
          userInput: {
            applicants: {
              mobile_1_add_a_1: '91234567',
              select_alt_contacts_a_1: 'MO2' // Doesn't include MO1
            }
          }
        }),
        fielderror: () => ({ error: [] }),
        lastaccessed: () => ({})
      }
    });

    const altContactProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'mobile_1_add',
        rwb_label_name: 'Mobile No. 1'
      }
    };

    render(
      <Provider store={hiddenStore}>
        <Phone {...altContactProps} />
      </Provider>
    );

    // Should not be visible because select_alt_contacts_a_1 doesn't include MO1
    expect(screen.queryByPlaceholderText('Mobile No. 1')).not.toBeInTheDocument();
  });

  test('handles office phone number validation', () => {
    const officePhoneProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        logical_field_name: 'office_phone1',
        rwb_label_name: 'Office number (Optional)'
      }
    };

    render(
      <Provider store={mockStore}>
        <Phone {...officePhoneProps} />
      </Provider>
    );

    const input = screen.getByPlaceholderText('Office Telephone No. 1');
    
    // Test invalid office phone number (doesn't start with 3 or 6)
    fireEvent.change(input, { target: { value: '81234567' } });
    expect(screen.getByText(/Singapore office number should start with 3 or 6/)).toBeInTheDocument();
    
    // Test valid office phone number
    fireEvent.change(input, { target: { value: '61234567' } });
    expect(screen.queryByText(/Singapore office number should start with 3 or 6/)).not.toBeInTheDocument();
  });

  test('triggers lastAction on focus', () => {
    render(
      <Provider store={mockStore}>
        <Phone {...mockProps} />
      </Provider>
    );

    const input = screen.getByPlaceholderText('Mobile Number');
    fireEvent.focus(input);
    
    // Verify that the lastAction was dispatched with the correct field name
    // This would typically be verified by checking the Redux store or mocking the dispatch
    // For simplicity, we'll assume the action is correctly dispatched
    expect(lastAction.getField).toHaveBeenCalledWith(mockProps.data.logical_field_name);
  });
});
