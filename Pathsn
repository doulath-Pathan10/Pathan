import Rules_bd_3 from './Rules_bd_3';
import { getUrl } from '../../utils/common/change.utils';

// Mock the getUrl module
jest.mock('../../utils/common/change.utils', () => ({
  getUrl: {
    getJourneyType: jest.fn(),
  },
}));

describe('Rules_bd_3 Utility Function', () => {
  const mockProps = [
    [
      {
        field_set_name: "Employment Details",
        fields: ["work_type", "name_of_employer", "job_title"]
      },
      {
        field_set_name: "Office Address (Optional)",
        fields: ["ofc_postal_other_code", "ofc_city", "ofc_state"]
      },
      {
        field_set_name: "Existing Contact Details",
        fields: ["existing_personal_email_co1", "existing_mobile_mo1"]
      },
      {
        field_set_name: "Additional Contact Details",
        fields: ["per_email_2", "mobile_1"]
      },
      {
        field_set_name: "Prefered Contact For Each Clasification",
        fields: ["preferred_contact"]
      },
      {
        field_set_name: "Select Primary Contact under Mobile Phone",
        fields: ["primary_mobile"]
      },
      {
        field_set_name: "Select Primary Contact under email",
        fields: ["primary_email"]
      },
      {
        field_set_name: "Select Primary Contact under Residential Telephone No.",
        fields: ["primary_residential"]
      },
      {
        field_set_name: "Select Primary Contact under Office No.",
        fields: ["primary_office"]
      },
      {
        field_set_name: "For Internal Use",
        fields: ["sourcing_id_2", "sales_id_2"]
      },
      {
        field_set_name: "Original Sighted",
        fields: ["original_sighted"]
      },
      {
        field_set_name: "Credit Card Details",
        fields: ["credit_limit_consent", "myinfo_data_cli"]
      }
    ]
  ];

  const mockStageInfo = {
    products: [{
      product_category: 'CA',
      product_type: '317'
    }],
    application: {
      journey_type: 'NTC'
    },
    applicants: {}
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should return filtered fields and validation object for NTC journey type', () => {
    (getUrl.getJourneyType as jest.Mock).mockReturnValue('NTC');
    
    const result = Rules_bd_3(mockProps, mockStageInfo);
    
    // Check filtered fields structure
    expect(Array.isArray(result.filteredFields)).toBe(true);
    expect(result.filteredFields[0]).toHaveLength(11); // All field sets should be included
    
    // Check validation object
    expect(result.validationObj).toEqual({
      nonEditable: expect.arrayContaining([expect.any(Array)]),
      hidden: expect.arrayContaining([expect.any(Array)]),
      modifyVisibility: expect.arrayContaining([expect.any(Array)])
    });
    
    // Check specific hidden fields
    expect(result.validationObj.hidden[0]).toContain('ofc_postal_other_code');
    expect(result.validationObj.hidden[0]).toContain('ofc_city');
    expect(result.validationObj.hidden[0]).toContain('ofc_state');
  });

  it('should handle ECC journey type differently', () => {
    (getUrl.getJourneyType as jest.Mock).mockReturnValue('ECC');
    const eccStageInfo = {
      ...mockStageInfo,
      products: [{
        product_category: 'CC',
        product_type: '123'
      }]
    };
    
    const result = Rules_bd_3(mockProps, eccStageInfo);
    
    // Credit Card Details should be first in the array
    expect(result.filteredFields[0][0].field_set_name).toBe('Credit Card Details');
  });

  it('should handle SA product category', () => {
    (getUrl.getJourneyType as jest.Mock).mockReturnValue('NTC');
    const saStageInfo = {
      ...mockStageInfo,
      products: [{
        product_category: 'SA',
        product_type: '456'
      }]
    };
    
    const result = Rules_bd_3(mockProps, saStageInfo);
    
    expect(result.validationObj.hidden[0]).toContain('credit_limit_consent');
    expect(result.validationObj.hidden[0]).toContain('myinfo_data_cli');
  });

  it('should handle PL product category', () => {
    (getUrl.getJourneyType as jest.Mock).mockReturnValue('NTC');
    const plStageInfo = {
      ...mockStageInfo,
      products: [{
        product_category: 'PL',
        product_type: '789'
      }]
    };
    
    const result = Rules_bd_3(mockProps, plStageInfo);
    
    expect(result.validationObj.nonEditable[0]).toContain('annual_income_fff_1');
    expect(result.validationObj.nonEditable[0]).toContain('year_of_assessment_fff_1');
    expect(result.validationObj.modifyVisibility[0]).toContain('year_of_assessment_fff_2');
    expect(result.validationObj.modifyVisibility[0]).toContain('annual_income_fff_2');
  });

  it('should include residential telephone fields for CA product with NTC journey', () => {
    (getUrl.getJourneyType as jest.Mock).mockReturnValue('NTC');
    
    const result = Rules_bd_3(mockProps, mockStageInfo);
    
    const fieldSets = result.filteredFields[0].map((fs: any) => fs.field_set_name);
    expect(fieldSets).toContain('Select Primary Contact under Residential Telephone No.');
    expect(fieldSets).toContain('Select Primary Contact under Office No.');
  });

  it('should not include residential telephone fields for non-CA products', () => {
    (getUrl.getJourneyType as jest.Mock).mockReturnValue('NTC');
    const nonCaStageInfo = {
      ...mockStageInfo,
      products: [{
        product_category: 'CC',
        product_type: '123'
      }]
    };
    
    const result = Rules_bd_3(mockProps, nonCaStageInfo);
    
    const fieldSets = result.filteredFields[0].map((fs: any) => fs.field_set_name);
    expect(fieldSets).not.toContain('Select Primary Contact under Residential Telephone No.');
    expect(fieldSets).not.toContain('Select Primary Contact under Office No.');
  });

  it('should handle empty input props', () => {
    (getUrl.getJourneyType as jest.Mock).mockReturnValue('NTC');
    
    const emptyProps = [[]];
    const result = Rules_bd_3(emptyProps, mockStageInfo);
    
    expect(result.filteredFields[0]).toHaveLength(0);
    expect(result.validationObj.nonEditable[0]).toHaveLength(0);
    expect(result.validationObj.hidden[0]).toContain('ofc_postal_other_code'); // Still gets added from default logic
  });

  it('should include default visibility fields', () => {
    (getUrl.getJourneyType as jest.Mock).mockReturnValue('NTC');
    
    const result = Rules_bd_3(mockProps, mockStageInfo);
    
    expect(result.validationObj.modifyVisibility[0]).toContain('existing_personal_email_co1');
    expect(result.validationObj.modifyVisibility[0]).toContain('per_email_2');
    expect(result.validationObj.modifyVisibility[0]).toContain('sourcing_id_2');
  });
});
