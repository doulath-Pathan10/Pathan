import axios from 'axios';
import { sha256 } from 'js-sha256';
import { generateSHA256Encrypt, defaultInterceptor, extractValue, injectStore } from './interceptor-utils';
import { getTokenChno, getUrl, keyToken } from '../utils/common/change.utils';
import submitService from '../services/submit-service';

// Mock dependencies
jest.mock('js-sha256');
jest.mock('../utils/common/change.utils');
jest.mock('../services/submit-service');
jest.mock('axios');

describe('Interceptor Utility', () => {
  const mockStore = {
    getState: jest.fn(),
    dispatch: jest.fn(),
    subscribe: jest.fn(),
  };

  beforeAll(() => {
    injectStore(mockStore);
  });

  beforeEach(() => {
    jest.clearAllMocks();
    (sha256 as jest.Mock).mockImplementation((str) => `hashed_${str}`);
    (submitService.generateUUID as jest.Mock) = 'mock-uuid';
  });

  describe('extractValue', () => {
    it('should extract and concatenate sorted object values', () => {
      const input = { b: 'value2', a: 'value1', c: 'value3' };
      const result = extractValue(input);
      expect(result).toBe('value1value2value3');
    });

    it('should handle empty object', () => {
      const result = extractValue({});
      expect(result).toBe('');
    });
  });

  describe('generateSHA256Encrypt', () => {
    const mockRequest = {
      data: {
        application: { stage: { page_id: 'p1', stage_id: 's1' } },
        applicants: [{ name: 'John' }],
      },
    };
    const mockSessionUid = 'session123';
    const mockScClientContextHeaders = {};

    beforeEach(() => {
      (getUrl.getChannelRefNo as jest.Mock).mockReturnValue({
        channelRefNo: 'channel123',
        applicationRefNo: 'app123',
      });
      (getTokenChno as jest.Mock).mockReturnValue({
        channelRefNo: 'channel123',
        code: 'code123',
      });
      (keyToken as jest.Mock).mockReturnValue('token-key');
      (getUrl.getParameterByName as jest.Mock).mockReturnValue(null);
      (getUrl.getProductInfo as jest.Mock).mockReturnValue([]);
    });

    it('should generate default authorization hash', () => {
      generateSHA256Encrypt(mockRequest, mockSessionUid, 'test', mockScClientContextHeaders);
      expect(mockScClientContextHeaders['authorization']).toBe('hashed_mock-xrtobsession123');
    });

    it('should handle resume endpoint', () => {
      generateSHA256Encrypt(mockRequest, mockSessionUid, 'resume', mockScClientContextHeaders);
      expect(mockScClientContextHeaders['authorization']).toBe('hashed_mock-xrtobsession123app123');
    });

    it('should handle authorize endpoint with products', () => {
      (getUrl.getParameterByName as jest.Mock).mockReturnValue('products');
      (getUrl.getProductInfo as jest.Mock).mockReturnValue([{ id: 'p1', name: 'Product1' }]);
      
      generateSHA256Encrypt(mockRequest, mockSessionUid, 'authorize', mockScClientContextHeaders);
      expect(mockScClientContextHeaders['products']).toBeDefined();
    });

    it('should handle customer endpoint', () => {
      generateSHA256Encrypt(mockRequest, mockSessionUid, 'customer', mockScClientContextHeaders);
      expect(mockScClientContextHeaders['tokenKeys']).toBe('hashed_mock-xrtobtoken-key');
      expect(mockScClientContextHeaders['personKeys']).toBe('hashed_mock-xrtobtoken-key');
      expect(mockScClientContextHeaders['authorization']).toBe('hashed_mock-xrtobsession123channel123code123');
    });

    it('should handle create endpoint', () => {
      generateSHA256Encrypt(mockRequest, mockSessionUid, 'create', mockScClientContextHeaders);
      expect(mockScClientContextHeaders['authorization']).toBe('hashed_mock-xrtobsession123channel123');
    });

    it('should handle personal/apply endpoints', () => {
      generateSHA256Encrypt(mockRequest, mockSessionUid, 'personal', mockScClientContextHeaders);
      expect(mockScClientContextHeaders['authorization']).toBe('hashed_mock-xrtobsession123channel123app123');
    });

    it('should handle generate OTP endpoint', () => {
      const otpRequest = {
        data: {
          mobileNo: '12345678',
          flowType: 'login',
          applnRefNo: 'app123',
        },
      };
      generateSHA256Encrypt(otpRequest, mockSessionUid, 'generate', mockScClientContextHeaders);
      expect(mockScClientContextHeaders['generate_otp']).toBe('hashed_mock-xrtob12345678loginapp123');
      expect(mockScClientContextHeaders['authorization']).toBe('hashed_mock-xrtob12345678loginapp123');
    });

    it('should handle verify OTP endpoint', () => {
      const verifyRequest = {
        data: {
          'enc-otp': 'enc123',
          'flow-type': 'login',
          'key-index': 'key1',
          'mobile-no': '12345678',
          'otp-sn': 'sn1',
          'user-id': 'user1',
        },
      };
      generateSHA256Encrypt(verifyRequest, mockSessionUid, 'verify', mockScClientContextHeaders);
      expect(mockScClientContextHeaders['verify_otp']).toBe('hashed_mock-xrtobenc123loginkey112345678sn1user1');
      expect(mockScClientContextHeaders['authorization']).toBe('hashed_mock-xrtobenc123loginkey112345678sn1user1');
    });

    it('should handle preserve endpoint', () => {
      generateSHA256Encrypt(mockRequest, mockSessionUid, 'preserve', mockScClientContextHeaders);
      expect(mockScClientContextHeaders['stage']).toBe('hashed_mock-xrtobapp123channel123p1s1');
    });

    it('should add application hash when not generate/verify endpoint', () => {
      generateSHA256Encrypt(mockRequest, mockSessionUid, 'test', mockScClientContextHeaders);
      expect(mockScClientContextHeaders['application']).toBeDefined();
    });

    it('should add applicants hash when not generate/verify endpoint', () => {
      generateSHA256Encrypt(mockRequest, mockSessionUid, 'test', mockScClientContextHeaders);
      expect(mockScClientContextHeaders['applicants']).toBeDefined();
    });
  });

  describe('defaultInterceptor', () => {
    const mockRequest = {
      url: 'https://api.example.com/test',
      headers: {},
      data: {},
    };

    beforeEach(() => {
      mockStore.getState.mockReturnValue({
        auth: { sessionUid: 'session123' },
        stages: { activateformData: false },
      });
      (getUrl.getParameterByName as jest.Mock).mockReturnValue(null);
      (axios.interceptors.request.use as jest.Mock).mockImplementation((fn) => fn(mockRequest));
    });

    it('should set default headers', () => {
      defaultInterceptor();
      const result = (axios.interceptors.request.use as jest.Mock).mock.calls[0][0](mockRequest);
      expect(result.headers['Content-Type']).toBe('application/json;charset=UTF-8');
    });

    it('should set multipart headers for activate form data', () => {
      mockStore.getState.mockReturnValue({
        auth: { sessionUid: 'session123' },
        stages: { activateformData: true },
      });
      defaultInterceptor();
      const result = (axios.interceptors.request.use as jest.Mock).mock.calls[0][0](mockRequest);
      expect(result.headers['Content-Type']).toBe('multipart/form-data');
    });

    it('should add environment header for UAT', () => {
      process.env.REACT_APP_ENVIRONMENT = 'uat';
      defaultInterceptor();
      const result = (axios.interceptors.request.use as jest.Mock).mock.calls[0][0](mockRequest);
      expect(result.headers['Env']).toBe('uat');
      delete process.env.REACT_APP_ENVIRONMENT;
    });

    it('should add session headers when sessionUid exists', () => {
      defaultInterceptor();
      const result = (axios.interceptors.request.use as jest.Mock).mock.calls[0][0](mockRequest);
      expect(result.headers['SC-CLIENT-CONTEXT']).toContain('session123');
    });

    it('should handle customer endpoint with virtual header', () => {
      const customerRequest = { ...mockRequest, url: 'https://api.example.com/customer' };
      (getUrl.getParameterByName as jest.Mock).mockReturnValue('true');
      defaultInterceptor();
      const result = (axios.interceptors.request.use as jest.Mock).mock.calls[0][0](customerRequest);
      expect(result.headers['virtual']).toBe('YES');
    });

    it('should handle ibank endpoint with token', () => {
      const ibankRequest = { ...mockRequest, url: 'https://api.example.com/ibank/test' };
      (getUrl.getParameterByName as jest.Mock).mockReturnValue('token123');
      defaultInterceptor();
      const result = (axios.interceptors.request.use as jest.Mock).mock.calls[0][0](ibankRequest);
      expect(result.headers['code']).toBe('token123');
    });

    it('should set abort signal and timeout', () => {
      defaultInterceptor();
      const result = (axios.interceptors.request.use as jest.Mock).mock.calls[0][0](mockRequest);
      expect(result.signal).toBeDefined();
    });
  });
});
