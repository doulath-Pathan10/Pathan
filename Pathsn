import React from 'react';
import { render, screen, waitFor, fireEvent, act } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import { MemoryRouter } from 'react-router-dom';
import ThankYou from './ThankYou';
import { StoreModel } from '../../../utils/model/common-model';

// Mock components with more detailed implementations
jest.mock('./thankyou-casa', () => ({ applicationDetails, submitForm }: any) => (
  <div>
    ThankYouCASA Mock
    <button onClick={submitForm}>Submit CASA</button>
    <div>{JSON.stringify(applicationDetails)}</div>
  </div>
));

jest.mock('./thankyou-upload', () => ({ applicationDetails, submitForm }: any) => (
  <div>
    ThankYouUpload Mock
    <button onClick={submitForm}>Submit Upload</button>
    <div>{JSON.stringify(applicationDetails)}</div>
  </div>
));

jest.mock('../../../shared/components/popup-model/popup-model', () => ({ children, displayPopup }: any) => 
  displayPopup ? <div data-testid="popup">{children}</div> : null);

jest.mock('../../../shared/components/model/model', () => ({ 
  name, 
  handlebuttonClick, 
  handleContinueWithoutActivation 
}: any) => (
  <div data-testid="model">
    {name} Mock
    <button onClick={handlebuttonClick}>Back Button</button>
    <button onClick={handleContinueWithoutActivation}>Continue Without Activation</button>
  </div>
));

// Mock services with more control
const mockTriggerAdobeEvent = jest.fn();
const mockPageView = jest.fn();
const mockRedirectingToIbanking = jest.fn();
const mockActivateDigitalCard = jest.fn();

jest.mock('../../../services/track-events', () => ({
  triggerAdobeEvent: () => mockTriggerAdobeEvent(),
}));

jest.mock('../../../services/ga-track-events', () => ({
  pageView: () => mockPageView(),
}));

jest.mock('../../../services/common-service', () => ({
  redirectingToIbanking: () => mockRedirectingToIbanking(),
  activateDigitalCard: () => mockActivateDigitalCard(),
}));

// Mock URL utilities with more flexibility
const mockGetParameterByName = jest.fn();
const mockGetUpdatedStage = jest.fn();
const mockGetChannelRefNo = jest.fn();

jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getParameterByName: () => mockGetParameterByName(),
    getUpdatedStage: () => mockGetUpdatedStage(),
    getChannelRefNo: () => mockGetChannelRefNo(),
  },
}));

// Mock store with more scenarios
const mockStoreGetState = jest.fn();

jest.mock('../../../utils/store/store', () => ({
  store: {
    getState: () => mockStoreGetState(),
  },
}));

describe('ThankYou Component - Additional Tests', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Default mock implementations
    mockGetParameterByName.mockReturnValue(null);
    mockGetUpdatedStage.mockReturnValue({ ccplChannel: '' });
    mockGetChannelRefNo.mockReturnValue({ applicationRefNo: 'APP123' });
    mockActivateDigitalCard.mockResolvedValue({ status: 'SUCCESS' });
    mockStoreGetState.mockReturnValue({ 
      stages: { 
        isDocumentUpload: false,
        journeyType: 'test',
        otpSuccess: false,
        stages: [] 
      } 
    });
    
    process.env.REACT_APP_HOME_PAGE_URL = 'https://example.com';
    process.env.REACT_APP_IBANKING_SC_MOBILE = 'https://ibank.example.com/mobile';
    process.env.REACT_APP_IBANKING_SC_MOBILE_TRANSFER = 'https://ibank.example.com/mobile/transfer';
  });

  const renderWithStore = (store: any) => {
    return render(
      <Provider store={store}>
        <MemoryRouter>
          <ThankYou />
        </MemoryRouter>
      </Provider>
    );
  };

  const createMockStore = (overrides = {}) => {
    return configureStore({
      reducer: {
        stages: () => ({ 
          stages: [
            {
              stageId: 'thankyou',
              stageInfo: {
                application: { application_reference: 'APP123' },
                products: [
                  { 
                    product_category: 'SA',
                    name: 'Savings Account',
                    product_sequence_number: '1',
                    product_type: 'SAVINGS',
                    acct_details: [{ account_number: '1234567890' }]
                  }
                ],
                applicants: {
                  auth_mode_a_1: 'IX',
                  embossed_name_a_1: 'John Doe'
                }
              }
            }
          ],
          journeyType: 'test',
          otpSuccess: false,
          isDocumentUpload: false,
          ...overrides
        }),
      },
    });
  };

  it('handles TD products', async () => {
    const store = createMockStore({
      stages: [
        {
          stageId: 'thankyou',
          stageInfo: {
            application: { application_reference: 'APP123' },
            products: [
              { 
                product_category: 'TD',
                name: 'Time Deposit',
                product_sequence_number: '1',
                product_type: 'DEPOSIT',
                acct_details: [{ account_number: '1234567890' }]
              }
            ],
            applicants: {
              auth_mode_a_1: 'IX'
            }
          }
        }
      ]
    });
    
    renderWithStore(store);
    
    await waitFor(() => {
      expect(screen.getByText('ThankYouCASA Mock')).toBeInTheDocument();
    });
  });

  it('handles PL products', async () => {
    const store = createMockStore({
      stages: [
        {
          stageId: 'thankyou',
          stageInfo: {
            application: { application_reference: 'APP123' },
            products: [
              { 
                product_category: 'PL',
                name: 'Personal Loan',
                product_sequence_number: '1',
                product_type: 'LOAN',
                acct_details: [{ account_number: '1234567890' }]
              },
              { 
                product_category: 'SA',
                name: 'Savings Account',
                product_sequence_number: '2',
                product_type: 'SAVINGS',
                acct_details: [{ account_number: '1234567891' }]
              }
            ],
            applicants: {
              auth_mode_a_1: 'IX'
            }
          }
        }
      ]
    });
    
    renderWithStore(store);
    
    await waitFor(() => {
      expect(screen.getByText('ThankYouCASA Mock')).toBeInTheDocument();
    });
  });

  it('handles empty acct_details', async () => {
    const store = createMockStore({
      stages: [
        {
          stageId: 'thankyou',
          stageInfo: {
            application: { application_reference: 'APP123' },
            products: [
              { 
                product_category: 'SA',
                name: 'Savings Account',
                product_sequence_number: '1',
                product_type: 'SAVINGS',
                acct_details: []
              }
            ],
            applicants: {
              auth_mode_a_1: 'IX'
            }
          }
        }
      ]
    });
    
    renderWithStore(store);
    
    await waitFor(() => {
      expect(screen.getByText('ThankYouCASA Mock')).toBeInTheDocument();
    });
  });

  it('handles missing stageInfo', async () => {
    const store = createMockStore({
      stages: [
        {
          stageId: 'thankyou',
          stageInfo: null
        }
      ]
    });
    
    renderWithStore(store);
    
    await waitFor(() => {
      expect(screen.getByTestId('form')).toBeInTheDocument();
    });
  });

  it('handles missing products', async () => {
    const store = createMockStore({
      stages: [
        {
          stageId: 'thankyou',
          stageInfo: {
            application: { application_reference: 'APP123' },
            products: null,
            applicants: {
              auth_mode_a_1: 'IX'
            }
          }
        }
      ]
    });
    
    renderWithStore(store);
    
    await waitFor(() => {
      expect(screen.getByTestId('form')).toBeInTheDocument();
    });
  });

  it('handles missing applicants', async () => {
    const store = createMockStore({
      stages: [
        {
          stageId: 'thankyou',
          stageInfo: {
            application: { application_reference: 'APP123' },
            products: [
              { 
                product_category: 'SA',
                name: 'Savings Account',
                product_sequence_number: '1',
                product_type: 'SAVINGS',
                acct_details: [{ account_number: '1234567890' }]
              }
            ],
            applicants: null
          }
        }
      ]
    });
    
    renderWithStore(store);
    
    await waitFor(() => {
      expect(screen.getByText('ThankYouCASA Mock')).toBeInTheDocument();
    });
  });

  it('handles IM auth mode', async () => {
    const store = createMockStore({
      stages: [
        {
          stageId: 'thankyou',
          stageInfo: {
            application: { application_reference: 'APP123' },
            products: [
              { 
                product_category: 'SA',
                name: 'Savings Account',
                product_sequence_number: '1',
                product_type: 'SAVINGS',
                acct_details: [{ account_number: '1234567890' }]
              }
            ],
            applicants: {
              auth_mode_a_1: 'IM'
            }
          }
        }
      ]
    });
    
    renderWithStore(store);
    
    fireEvent.click(screen.getByText('Submit CASA'));
    
    await waitFor(() => {
      expect(mockRedirectingToIbanking).toHaveBeenCalled();
    });
  });

  it('handles card activation error', async () => {
    mockActivateDigitalCard.mockResolvedValue({ status: 'FAILURE' });
    
    const store = createMockStore({
      otpSuccess: true,
      stages: [
        {
          stageId: 'thankyou',
          stageInfo: {
            application: { application_reference: 'APP123' },
            products: [
              { 
                product_category: 'CC',
                name: 'Credit Card',
                product_sequence_number: '1',
                product_type: 'CREDIT',
                acct_details: [{ card_no: '1234567890123456' }]
              }
            ],
            applicants: {
              auth_mode_a_1: 'IX',
              embossed_name_a_1: 'John Doe'
            }
          }
        }
      ]
    });
    
    renderWithStore(store);
    
    await waitFor(() => {
      expect(mockActivateDigitalCard).toHaveBeenCalled();
    });
  });

  it('handles continue without activation flow', async () => {
    const store = createMockStore({
      stages: [
        {
          stageId: 'thankyou',
          stageInfo: {
            application: { application_reference: 'APP123' },
            products: [
              { 
                product_category: 'CC',
                name: 'Credit Card',
                product_sequence_number: '1',
                product_type: 'CREDIT',
                acct_details: [{ card_no: '1234567890123456' }]
              }
            ],
            applicants: {
              auth_mode_a_1: 'IX',
              embossed_name_a_1: 'John Doe'
            }
          }
        }
      ]
    });
    
    renderWithStore(store);
    
    // Simulate user flow
    fireEvent.click(screen.getByText('Continue Without Activation'));
    await waitFor(() => {
      expect(screen.getByTestId('model')).toBeInTheDocument();
    });
    
    fireEvent.click(screen.getByText('Back Button'));
    await waitFor(() => {
      expect(screen.queryByTestId('model')).not.toBeInTheDocument();
    });
  });

  it('handles multiple product categories', async () => {
    const store = createMockStore({
      stages: [
        {
          stageId: 'thankyou',
          stageInfo: {
            application: { application_reference: 'APP123' },
            products: [
              { 
                product_category: 'SA',
                name: 'Savings Account',
                product_sequence_number: '1',
                product_type: 'SAVINGS',
                acct_details: [{ account_number: '1234567890' }]
              },
              { 
                product_category: 'CA',
                name: 'Current Account',
                product_sequence_number: '2',
                product_type: 'CURRENT',
                acct_details: [{ account_number: '1234567891' }]
              },
              { 
                product_category: 'CC',
                name: 'Credit Card',
                product_sequence_number: '3',
                product_type: 'CREDIT',
                acct_details: [{ card_no: '1234567890123456' }]
              }
            ],
            applicants: {
              auth_mode_a_1: 'IX',
              embossed_name_a_1: 'John Doe'
            }
          }
        }
      ]
    });
    
    renderWithStore(store);
    
    await waitFor(() => {
      expect(screen.getByText('ThankYouCASA Mock')).toBeInTheDocument();
    });
  });

  it('verifies applicationDetails state updates', async () => {
    const store = createMockStore();
    
    renderWithStore(store);
    
    await waitFor(() => {
      const detailsText = screen.getByText(/Savings Account/);
      expect(detailsText).toBeInTheDocument();
      expect(detailsText).toHaveTextContent('APP123');
      expect(detailsText).toHaveTextContent('1234567890');
    });
  });
});
