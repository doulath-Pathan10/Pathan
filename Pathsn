import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import DropDownModel from './DropDownModel';
import { getFields } from '../selection-box/selection-box.util';

// Mock dependencies
jest.mock('../selection-box/selection-box.util', () => ({
  getFields: jest.fn(),
}));

jest.mock('../../../modules/dashboard/fields/renderer', () => ({
  __esModule: true,
  default: jest.fn(() => <div>Mocked Render Component</div>),
}));

// Mock store setup
const mockStore = configureMockStore([]);
const mockDispatch = jest.fn();

describe('DropDownModel Component', () => {
  const baseProps = {
    logicalFieldName: 'loan_account_list',
    label: 'Test Dropdown',
    close: jest.fn(),
    addUserInput: jest.fn(),
    selectedOption: [
      {
        CODE_VALUE: 'val1',
        CODE_DESC: 'Value 1',
        checked: false,
      },
      {
        CODE_VALUE: 'val2',
        CODE_DESC: 'Value 2',
        checked: true,
      },
    ],
    selectedValue: [{ CODE_VALUE: 'test' }],
    handleCallback: jest.fn(),
    handleFieldDispatch: jest.fn(),
    value: {},
  };

  const createTestStore = (overrides = {}) => {
    return mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                {
                  product_type: '601',
                },
              ],
            },
          },
        ],
        userInput: {
          applicants: {},
        },
        ...overrides,
      },
    });
  };

  beforeEach(() => {
    jest.clearAllMocks();
    (getFields as jest.Mock).mockImplementation(() => [
      { type: 'mockField', props: {} },
    ]);
  });

  it('renders correctly with loan_account_list type', () => {
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...baseProps} />
      </Provider>
    );

    expect(screen.getByText('Test Dropdown')).toBeInTheDocument();
    expect(screen.getByText('Value 1')).toBeInTheDocument();
    expect(screen.getByText('Value 2')).toBeInTheDocument();
  });

  it('renders correctly with credit_into type', () => {
    const creditProps = {
      ...baseProps,
      logicalFieldName: 'credit_into',
      selectedOption: [
        {
          CODE_VALUE: 'bank1',
          CODE_DESC: 'Bank 1',
          checked: false,
        },
      ],
    };
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...creditProps} />
      </Provider>
    );

    expect(screen.getByText('Bank 1')).toBeInTheDocument();
    expect(screen.getByTestId('dropdown-select__popup')).toHaveClass(
      'dropdown-select__popup'
    );
  });

  it('handles radio button selection', () => {
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...baseProps} />
      </Provider>
    );

    const radioButton = screen.getByLabelText('Value 1');
    fireEvent.click(radioButton);
    expect(baseProps.addUserInput).toHaveBeenCalledWith(
      baseProps.selectedOption[0]
    );
  });

  it('shows label only for product_type 601', () => {
    const store = createTestStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                {
                  product_type: '601',
                },
              ],
            },
          },
        ],
      },
    });
    render(
      <Provider store={store}>
        <DropDownModel {...baseProps} />
      </Provider>
    );

    expect(screen.getByText('Test Dropdown')).toBeInTheDocument();
  });

  it('hides other bank radio when credit_into has <= 1 options', () => {
    const creditProps = {
      ...baseProps,
      logicalFieldName: 'credit_into',
      selectedOption: [
        {
          CODE_VALUE: 'bank1',
          CODE_DESC: 'Bank 1',
          checked: false,
        },
      ],
    };
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...creditProps} />
      </Provider>
    );

    expect(screen.getByTestId('dropdown-select__popup')).toBeInTheDocument();
  });

  it('renders additional fields for credit_into type', () => {
    const creditProps = {
      ...baseProps,
      logicalFieldName: 'credit_into',
    };
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...creditProps} />
      </Provider>
    );

    expect(screen.getByText('Mocked Render Component')).toBeInTheDocument();
  });

  it('handles close button click', () => {
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...baseProps} />
      </Provider>
    );

    const closeButton = screen.getByTestId('close-button');
    fireEvent.click(closeButton);
    expect(baseProps.close).toHaveBeenCalled();
  });

  it('applies correct class for maturity_amount type', () => {
    const maturityProps = {
      ...baseProps,
      logicalFieldName: 'maturity_amount',
    };
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...maturityProps} />
      </Provider>
    );

    expect(screen.getByTestId('dropdown-select__popup')).toHaveClass(
      'dropdown-select--tenor'
    );
  });

  it('renders account list component for loan_account_list type', () => {
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...baseProps} />
      </Provider>
    );

    expect(screen.getByText('Value 1')).toBeInTheDocument();
    expect(screen.getByText('Value 2')).toBeInTheDocument();
  });
});
