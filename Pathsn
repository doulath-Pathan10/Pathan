import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Model from './Model';

// Simple mock for the Lottie Player
jest.mock('@lottiefiles/react-lottie-player', () => ({
  Player: () => <div>Lottie Player</div>
}));

// Mock model.json data
jest.mock('../../../assets/_json/model.json', () => [
  {
    name: 'test_model',
    header_content: 'Test Header',
    body_content: ['Test content line 1'],
    buttons: ['Button 1', 'Button 2']
  },
  {
    name: 'postal_code',
    header_content: 'Postal Code Header',
    body_content: ['Postal code content'],
    buttons: ['Submit'],
    postal_code_lable: 'Enter Postal Code',
    errorDesc: 'Invalid postal code',
    header_content_second: 'Second Header',
    popupDescription: 'Popup description',
    PostalCodebuttons: ['Get Rates', 'Continue']
  }
], { virtual: true });

// Mock track events
jest.mock('../../../services/track-events', () => ({
  triggerAdobeEvent: jest.fn()
}));

const mockStore = configureStore([]);

describe('Model Component - Basic Tests', () => {
  const baseProps = {
    name: 'test_model',
    handlebuttonClick: jest.fn()
  };

  const initialState = {
    stages: {
      stages: []
    },
    referralcode: {
      refer: null
    },
    urlParam: {
      resume: false
    },
    rate: {
      ar: '',
      eir: ''
    }
  };

  test('renders basic popup with header and content', () => {
    render(
      <Provider store={mockStore(initialState)}>
        <Model {...baseProps} />
      </Provider>
    );

    expect(screen.getByText('Test Header')).toBeInTheDocument();
    expect(screen.getByText('Test content line 1')).toBeInTheDocument();
    expect(screen.getByText('Button 1')).toBeInTheDocument();
    expect(screen.getByText('Button 2')).toBeInTheDocument();
  });

  test('calls handlebuttonClick when button is clicked', () => {
    render(
      <Provider store={mockStore(initialState)}>
        <Model {...baseProps} />
      </Provider>
    );

    fireEvent.click(screen.getByText('Button 1'));
    expect(baseProps.handlebuttonClick).toHaveBeenCalled();
  });

  test('renders Lottie animation for warning popups', () => {
    render(
      <Provider store={mockStore(initialState)}>
        <Model {...baseProps} />
      </Provider>
    );

    expect(screen.getByText('Lottie Player')).toBeInTheDocument();
  });

  test('renders question mark for tooltip popups', () => {
    render(
      <Provider store={mockStore(initialState)}>
        <Model {...baseProps} isTooltip={true} />
      </Provider>
    );

    expect(screen.queryByText('Lottie Player')).not.toBeInTheDocument();
    expect(screen.getByTestId('popup-question')).toBeInTheDocument();
  });
});

describe('Model Component - Postal Code Tests', () => {
  const postalProps = {
    name: 'postal_code',
    handlebuttonClick: jest.fn()
  };

  const postalState = {
    ...initialState,
    stages: {
      stages: [{
        stageInfo: {
          fieldmetaData: {
            data: {
              stages: [{
                fields: [{
                  logical_field_name: 'postal_code',
                  min_length: 6
                }]
              }]
            }
          },
          products: [],
          applicants: {}
        }
      }]
    }
  };

  test('renders postal code input field', () => {
    render(
      <Provider store={mockStore(postalState)}>
        <Model {...postalProps} />
      </Provider>
    );

    expect(screen.getByText('Enter Postal Code')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('Enter postal code')).toBeInTheDocument();
  });

  test('accepts only numbers in postal code field', () => {
    render(
      <Provider store={mockStore(postalState)}>
        <Model {...postalProps} />
      </Provider>
    );

    const input = screen.getByPlaceholderText('Enter postal code');
    fireEvent.change(input, { target: { value: 'abc123' } });
    expect(input).toHaveValue('');
  });

  test('shows error when postal code is too short', () => {
    render(
      <Provider store={mockStore(postalState)}>
        <Model {...postalProps} />
      </Provider>
    );

    const input = screen.getByPlaceholderText('Enter postal code');
    fireEvent.change(input, { target: { value: '123' } });
    fireEvent.click(screen.getByText('Get Rates'));
    
    expect(screen.getByText('Invalid postal code')).toBeInTheDocument();
  });
});

describe('Model Component - Special Cases', () => {
  test('renders age hard stop with custom content', () => {
    const ageProps = {
      name: 'ageHardStop',
      handlebuttonClick: jest.fn(),
      body_content: '18 years'
    };

    render(
      <Provider store={mockStore(initialState)}>
        <Model {...ageProps} />
      </Provider>
    );

    expect(screen.getByText(/18 years/)).toBeInTheDocument();
  });

  test('renders referral code popup differently', () => {
    const referralState = {
      ...initialState,
      referralcode: {
        refer: 'test'
      }
    };

    render(
      <Provider store={mockStore(referralState)}>
        <Model name="referral_code" handlebuttonClick={jest.fn()} />
      </Provider>
    );

    expect(screen.queryByText('Lottie Player')).not.toBeInTheDocument();
  });
});
