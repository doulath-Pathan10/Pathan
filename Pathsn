import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import DocumentUpload from './DocumentUpload';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

// Mock axios
jest.mock('axios');
const mockedAxios = axios as jest.Mocked<typeof axios>;

// Mock react-router-dom
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: jest.fn(),
}));

// Mock other dependencies
jest.mock('../../../utils/common/change.utils', () => ({
  authenticateType: jest.fn(() => 'manual'),
  getUrl: {
    getParameterByName: jest.fn(() => null),
    getDocumentStatus: jest.fn(() => false),
    getJourneyType: jest.fn(() => 'standard')
  }
}));

jest.mock('../../../utils/store/store', () => ({
  store: {
    getState: jest.fn(() => ({
      stages: {
        stages: [{
          stageId: 'doc',
          stageInfo: {
            application: {
              channel_reference: 'test123',
              application_reference: 'app123'
            },
            applicants: {},
            products: []
          },
          isDocumentUpload: false
        }]
      }
    }))
  }
}));

// Mock services
jest.mock('../../../services/track-events', () => ({
  triggerAdobeEvent: jest.fn()
}));

const mockStore = configureStore({
  reducer: {
    stages: () => ({
      stages: [{
        stageId: 'doc',
        stageInfo: {
          application: {
            channel_reference: 'test123',
            application_reference: 'app123'
          },
          applicants: {},
          products: [],
          applicant_documents: [{
            document_list: [{
              document_category_code: 'R0006',
              document_category: 'Signature Specimen',
              docCheck: 'N',
              isSlectedForUpload: 'N',
              document_options: [{
                document_types: [{
                  document_type_code: 'SIGN',
                  document_type: 'Signature',
                  uploaded_documents: [],
                  min_options_req: 1
                }]
              }]
            }]
          }]
        },
        isDocument: false
      }],
      userInput: { applicants: {} },
      journeyType: 'standard'
    }),
    documentUploadList: () => ({
      responseDocuments: [{
        document_list: [{
          document_category_code: 'R0006',
          document_category: 'Signature Specimen',
          docCheck: 'N',
          isSlectedForUpload: 'N',
          document_options: [{
            document_types: [{
              document_type_code: 'SIGN',
              document_type: 'Signature',
              uploaded_documents: [],
              min_options_req: 1
            }]
          }]
        }]
      }],
      isDocumentUpdate: false
    }),
    fielderror: () => ({ error: [] }),
    valueUpdate: () => ({}),
    loader: () => ({ isFetching: false }),
    urlparam: () => ({})
  }
});

describe('DocumentUpload Component', () => {
  const mockNavigate = jest.fn();
  const mockBackHandler = jest.fn();
  
  const defaultProps = {
    backHandler: mockBackHandler
  };

  beforeEach(() => {
    (useNavigate as jest.Mock).mockReturnValue(mockNavigate);
    jest.clearAllMocks();
  });

  const renderComponent = (props = defaultProps) => {
    return render(
      <Provider store={mockStore}>
        <DocumentUpload {...props} />
      </Provider>
    );
  };

  // Test 1: Basic rendering
  it('renders correctly with default props', () => {
    renderComponent();
    expect(screen.getByText('Upload your signature specimen')).toBeInTheDocument();
    expect(screen.getByText('Please ensure that the attached file(s) is of the following specification:')).toBeInTheDocument();
  });

  // Test 2: Document selection and upload flow
  it('handles document selection and upload flow', async () => {
    mockedAxios.post.mockResolvedValueOnce({
      data: { success: true }
    });

    renderComponent();

    // Select document type
    const radioButton = screen.getByLabelText('Signature');
    fireEvent.click(radioButton);

    // Click upload button
    const uploadButton = screen.getByTestId('upload');
    fireEvent.click(uploadButton);

    // Upload file
    const fileInput = screen.getByLabelText('Upload your signature specimen');
    const file = new File(['test'], 'test.png', { type: 'image/png' });
    fireEvent.change(fileInput, { target: { files: [file] } });

    await waitFor(() => {
      expect(mockedAxios.post).toHaveBeenCalled();
    });
  });

  // Test 3: Document submission with validation
  it('handles document submission with validation', async () => {
    renderComponent();

    // Try to submit without uploading required documents
    const submitButton = screen.getByText('Continue');
    fireEvent.click(submitButton);

    // Should show error for missing documents
    expect(screen.getByText('Please upload all mandatory documents')).toBeInTheDocument();
  });

  // Test 4: Successful document submission
  it('handles successful document submission', async () => {
    mockedAxios.post.mockResolvedValueOnce({
      data: { success: true }
    });

    // Mock document state with uploaded file
    const customStore = configureStore({
      reducer: {
        stages: () => ({
          stages: [{
            stageId: 'doc',
            stageInfo: {
              application: {
                channel_reference: 'test123',
                application_reference: 'app123'
              },
              applicants: {},
              products: [],
              applicant_documents: [{
                document_list: [{
                  document_category_code: 'R0006',
                  document_category: 'Signature Specimen',
                  docCheck: 'Y',
                  isSlectedForUpload: 'Y',
                  document_options: [{
                    document_types: [{
                      document_type_code: 'SIGN',
                      document_type: 'Signature',
                      uploaded_documents: [{
                        documentStatus: 'Accepted',
                        docId: 'doc123'
                      }],
                      min_options_req: 1
                    }]
                  }]
                }]
              }]
            }
          }],
          userInput: { applicants: {} },
          journeyType: 'standard'
        }),
        documentUploadList: () => ({
          responseDocuments: [{
            document_list: [{
              document_category_code: 'R0006',
              document_category: 'Signature Specimen',
              docCheck: 'Y',
              isSlectedForUpload: 'Y',
              document_options: [{
                document_types: [{
                  document_type_code: 'SIGN',
                  document_type: 'Signature',
                  uploaded_documents: [{
                    documentStatus: 'Accepted',
                    docId: 'doc123'
                  }],
                  min_options_req: 1
                }]
              }]
            }]
          }],
          isDocumentUpdate: true
        }),
        fielderror: () => ({ error: [] }),
        valueUpdate: () => ({}),
        loader: () => ({ isFetching: false }),
        urlparam: () => ({})
      }
    });

    render(
      <Provider store={customStore}>
        <DocumentUpload {...defaultProps} />
      </Provider>
    );

    // Submit documents
    const submitButton = screen.getByText('Continue');
    fireEvent.click(submitButton);

    await waitFor(() => {
      expect(mockedAxios.post).toHaveBeenCalled();
    });
  });

  // Test 5: Back button handling
  it('handles back button click', () => {
    renderComponent();
    const backButton = screen.getByText('Back');
    fireEvent.click(backButton);
    expect(mockBackHandler).toHaveBeenCalled();
  });

  // Test 6: Document deletion
  it('handles document deletion', () => {
    // Mock document state with uploaded file
    const customStore = configureStore({
      reducer: {
        stages: () => ({
          stages: [{
            stageId: 'doc',
            stageInfo: {
              application: {
                channel_reference: 'test123',
                application_reference: 'app123'
              },
              applicants: {},
              products: [],
              applicant_documents: [{
                document_list: [{
                  document_category_code: 'R0006',
                  document_category: 'Signature Specimen',
                  docCheck: 'Y',
                  isSlectedForUpload: 'Y',
                  document_options: [{
                    document_types: [{
                      document_type_code: 'SIGN',
                      document_type: 'Signature',
                      uploaded_documents: [{
                        documentStatus: 'Accepted',
                        docId: 'doc123'
                      }],
                      min_options_req: 1
                    }]
                  }]
                }]
              }]
            }
          }],
          userInput: { applicants: {} },
          journeyType: 'standard'
        }),
        documentUploadList: () => ({
          responseDocuments: [{
            document_list: [{
              document_category_code: 'R0006',
              document_category: 'Signature Specimen',
              docCheck: 'Y',
              isSlectedForUpload: 'Y',
              document_options: [{
                document_types: [{
                  document_type_code: 'SIGN',
                  document_type: 'Signature',
                  uploaded_documents: [{
                    documentStatus: 'Accepted',
                    docId: 'doc123'
                  }],
                  min_options_req: 1
                }]
              }]
            }]
          }],
          isDocumentUpdate: true
        }),
        fielderror: () => ({ error: [] }),
        valueUpdate: () => ({}),
        loader: () => ({ isFetching: false }),
        urlparam: () => ({})
      }
    });

    render(
      <Provider store={customStore}>
        <DocumentUpload {...defaultProps} />
      </Provider>
    );

    // Delete document
    const deleteButton = screen.getByLabelText('delete');
    fireEvent.click(deleteButton);
  });

  // Test 7: Error handling during upload
  it('handles upload errors', async () => {
    mockedAxios.post.mockRejectedValueOnce(new Error('Upload failed'));

    renderComponent();

    // Select document type
    const radioButton = screen.getByLabelText('Signature');
    fireEvent.click(radioButton);

    // Click upload button
    const uploadButton = screen.getByTestId('upload');
    fireEvent.click(uploadButton);

    // Upload file
    const fileInput = screen.getByLabelText('Upload your signature specimen');
    const file = new File(['test'], 'test.png', { type: 'image/png' });
    fireEvent.change(fileInput, { target: { files: [file] } });

    await waitFor(() => {
      expect(mockedAxios.post).toHaveBeenCalled();
    });
  });

  // Test 8: Upload journey specific behavior
  it('handles upload journey specific behavior', () => {
    // Mock upload journey
    jest.mock('../../../utils/common/change.utils', () => ({
      getUrl: {
        getParameterByName: jest.fn(() => 'upload')
      }
    }));

    renderComponent();
    // Verify specific behavior for upload journey
  });

  // Test 9: Different document stage (doc-2)
  it('handles doc-2 stage documents', () => {
    const customStore = configureStore({
      reducer: {
        stages: () => ({
          stages: [{
            stageId: 'doc-2',
            stageInfo: {
              application: {
                channel_reference: 'test123',
                application_reference: 'app123'
              },
              applicants: {},
              products: [],
              applicant_documents: [{
                document_list: [{
                  document_category_code: 'R0002',
                  document_category: 'Proof of Address',
                  docCheck: 'N',
                  isSlectedForUpload: 'N',
                  document_options: [{
                    document_types: [{
                      document_type_code: 'POA',
                      document_type: 'Utility Bill',
                      uploaded_documents: [],
                      min_options_req: 1,
                      document_requested_stage: 'AD'
                    }]
                  }]
                }]
              }]
            }
          }],
          userInput: { applicants: {} },
          journeyType: 'standard'
        }),
        documentUploadList: () => ({
          responseDocuments: [{
            document_list: [{
              document_category_code: 'R0002',
              document_category: 'Proof of Address',
              docCheck: 'N',
              isSlectedForUpload: 'N',
              document_options: [{
                document_types: [{
                  document_type_code: 'POA',
                  document_type: 'Utility Bill',
                  uploaded_documents: [],
                  min_options_req: 1,
                  document_requested_stage: 'AD'
                }]
              }]
            }]
          }],
          isDocumentUpdate: false
        }),
        fielderror: () => ({ error: [] }),
        valueUpdate: () => ({}),
        loader: () => ({ isFetching: false }),
        urlparam: () => ({})
      }
    });

    render(
      <Provider store={customStore}>
        <DocumentUpload {...defaultProps} />
      </Provider>
    );

    expect(screen.getByText('Upload your proof of address')).toBeInTheDocument();
  });
});
