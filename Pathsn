import { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { CONSTANTS } from "../../../utils/common/constants";
import { KeyWithAnyModel, StoreModel } from "../../../utils/model/common-model";
import "./footer.scss";
import { getUrl } from "../../../utils/common/change.utils";
 
const Footer = (props: KeyWithAnyModel) => {
 /* istanbul ignore next */
  const stageSelector = useSelector((state: StoreModel) => state.stages.stages);
  const [backBtn, setBackBtn] = useState(false);
  const [ctaSpinner, setCtaSpinner] = useState(false);
  const urlEnpoint = getUrl.getUrlEndPoint();
 /* istanbul ignore next */
  const userInputSelector = useSelector(
    (state: StoreModel) => state.stages.userInput
  );
  const SignSelector1 = useSelector(
    (state: StoreModel) => state.stages.signatureDocument
  );
 
  const backHandler = () => {
    props.backHandler();
  };
 
  useEffect(() => {
    setCtaSpinner(
      urlEnpoint === "acknowledge" || urlEnpoint === "preserve" ? true : false
    );
  }, [urlEnpoint]);
 
  useEffect(() => {
    /*istanbul ignore else*/
    if (stageSelector && stageSelector.length > 0) {
      const isEnableBackBtn =
        stageSelector[0].stageId !== CONSTANTS.STAGE_NAMES.SSF_1 &&
        stageSelector[0].stageId !== CONSTANTS.STAGE_NAMES.BD_1
        // &&
        // !(props.journeyType === 'NTC' && ((stageSelector[0].stageId == CONSTANTS.STAGE_NAMES.BD_3 && stageSelector[0].stageInfo.products[0].product_category == 'CC') ||
        // (stageSelector[0].stageId == CONSTANTS.STAGE_NAMES.LD_1 && stageSelector[0].stageInfo.products[0].product_type === '280')))
          ? true
          : false;
      setBackBtn(isEnableBackBtn);
    }
  }, [stageSelector]);
 
  useEffect(() => {
    /*istanbul ignore else*/
    if (stageSelector && stageSelector.length > 0) {
      if(stageSelector[0].stageId == CONSTANTS.STAGE_NAMES.LD_1 && stageSelector[0].stageInfo.products[0].product_type === '280')
       {
        setBackBtn(false);
      }
     
     else if (
        stageSelector[0].stageId !== CONSTANTS.STAGE_NAMES.SSF_1 &&
        stageSelector[0].stageId !== CONSTANTS.STAGE_NAMES.BD_1 &&
        !props.otherMyinfo
      )
      {
        setBackBtn(true);
      }
      else {
        setBackBtn(props.otherMyinfo);
      }
    }
 
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [props.otherMyinfo]);
 
  const mobileNumber = userInputSelector.applicants?.mobile_number_a_1;
 
  const isDisabled = () => {
    return (
      (mobileNumber && mobileNumber.length > 8 && userInputSelector.applicants.mobile_number_rwb_a_1 === '65') || 
      (userInputSelector.applicants.mobile_number_rwb_a_1 === '65' && mobileNumber && mobileNumber.length === 8 && (mobileNumber && mobileNumber.charAt(0) !== '8' && mobileNumber.charAt(0) !== '9')) || 
      (stageSelector && stageSelector[0].stageInfo && stageSelector[0].stageId === "rp" && stageSelector[0].stageInfo.applicants.application_sourcing_a_1 === "1" && !SignSelector1)
    );
  };
 
  return (
    <>
      <div className="footer">
        {backBtn && !props.uploadJourney && (
          <div className="back" onClick={backHandler}>
            <span className="arrow"></span> Back
          </div>
        )}
        <button 
          type="submit" 
            className={`continue ${stageSelector && stageSelector[0].stageInfo && stageSelector[0].stageId === "rp" && stageSelector[0].stageInfo.applicants.application_sourcing_a_1 === "1" ? (SignSelector1 !== ""? "form-valid": "form-invalid") : props.validateNxt}`}
            disabled={isDisabled()}
          >
            {ctaSpinner && <div className="circle-spinner"></div>}
            {!ctaSpinner && (stageSelector[0].stageId === "rp" || props.uploadJourney === true)
              ? "Agree and Submit"
              : "Continue"}
          </button>
      </div>
    </>
  );
};
 
export default Footer;

Please write test cases using jest with RTL
