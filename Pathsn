import { renderHook } from '@testing-library/react-hooks';
import { useDispatch } from 'react-redux';
import { getFields } from './your-file-path';
import { fieldErrorAction, stagesAction } from '../../../utils/store';
import { getProductCategory, getUrl } from '../../../services/common-service';

// Mock the Redux dispatch and other dependencies
jest.mock('react-redux', () => ({
  useDispatch: jest.fn(),
}));

jest.mock('../../../services/common-service', () => ({
  getProductCategory: jest.fn(),
  getUrl: {
    getUserInputs: jest.fn(),
    getJourneyType: jest.fn(),
  },
}));

jest.mock('../../../utils/common/change.utils', () => ({
  FindIndex: jest.fn(),
  authenticateType: jest.fn(),
}));

describe('getFields function', () => {
  let dispatchMock: jest.Mock;
  const mockStages = [
    {
      stageId: 'ad-1',
      stageInfo: {
        applicants: {},
        products: [],
        fieldmetadata: {
          data: {
            stages: [
              { stageId: 'ad', fields: [] },
              { stageId: 'bd', fields: [] },
            ],
          },
        },
      },
    },
  ];

  beforeEach(() => {
    dispatchMock = jest.fn();
    (useDispatch as jest.Mock).mockReturnValue(dispatchMock);
    (getUrl.getUserInputs as jest.Mock).mockReturnValue({});
    (getUrl.getJourneyType as jest.Mock).mockReturnValue('');
    (getProductCategory as jest.Mock).mockReturnValue('');
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should handle residency_status radio selection for Singaporean', () => {
    const radioResidency = {
      logical_field_name: 'residency_status',
      value: 'CT',
    };

    const { result } = renderHook(() =>
      getFields(mockStages, radioResidency)
    );

    expect(dispatchMock).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields(["passport_no", "pass_exp_dt"])
    );
    expect(dispatchMock).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: ["passport_no", "pass_exp_dt"],
        newFields: ["NRIC"],
        value: '',
      })
    );
  });

  it('should handle residency_status radio selection for Foreigner', () => {
    const radioResidency = {
      logical_field_name: 'residency_status',
      value: 'FR',
    };

    (getUrl.getUserInputs as jest.Mock).mockReturnValue({
      'passport_no_a_1': 'test123',
      'pass_exp_dt_a_1': '2025-12-31',
    });

    const { result } = renderHook(() =>
      getFields(mockStages, radioResidency)
    );

    expect(dispatchMock).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields(["NRIC"])
    );
    expect(dispatchMock).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: ["NRIC"],
        newFields: ["passport_no", "pass_exp_dt"],
        value: {
          'passport_no_a_1': 'test123',
          'pass_exp_dt_a_1': '2025-12-31',
        },
      })
    );
  });

  it('should handle work_type radio selection for Earner', () => {
    const radioResidency = {
      logical_field_name: 'work_type',
      value: 'S',
    };

    (getUrl.getUserInputs as jest.Mock).mockReturnValue({
      'nature_of_employer_a_1': 'IT',
      'job_title_a_1': 'Developer',
      'name_of_employer_a_1': 'ABC Corp',
      'office_phone_number_a_1': '12345678',
    });

    const { result } = renderHook(() =>
      getFields(mockStages, radioResidency)
    );

    expect(dispatchMock).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields([
        "name_of_business", "nature_of_employer", "job_title", "office_phone_number"
      ])
    );
    expect(dispatchMock).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: [
          "name_of_business", "nature_of_employer", "job_title", "office_phone_number"
        ],
        newFields: [
          "name_of_employer", "nature_of_employer", "job_title", "office_phone_number"
        ],
        value: {
          'nature_of_employer_a_1': 'IT',
          'job_title_a_1': 'Developer',
          'name_of_employer_a_1': 'ABC Corp',
          'office_phone_number_a_1': '12345678',
        },
      })
    );
  });

  it('should handle credit_limit_consent radio selection for Yes', () => {
    const radioResidency = {
      logical_field_name: 'credit_limit_consent',
      value: 'Y',
    };

    const bancaSelector = {
      eligible_banca_insurances: ['life', 'health'],
    };

    const { result } = renderHook(() =>
      getFields(mockStages, radioResidency, undefined, undefined, bancaSelector)
    );

    expect(dispatchMock).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields([
        'embossed_name',
        'myinfo_data_cli',
        'insurance_consent_life',
        'insurance_consent_health',
      ])
    );
  });

  it('should handle preferred_limit radio selection for No Preference', () => {
    const radioResidency = {
      logical_field_name: 'preferred_limit',
      value: '0',
    };

    const { result } = renderHook(() =>
      getFields(mockStages, radioResidency)
    );

    expect(dispatchMock).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields([
        'preferred_credit_limit',
        'credit_limit_consent_info_5',
      ])
    );
    expect(dispatchMock).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: [
          'preferred_credit_limit',
          'credit_limit_consent_info_5',
        ],
        newFields: ['credit_limit_consent_info_8'],
        value: '',
      })
    );
  });

  it('should handle deposit_loan_to radio selection for SCB Account', () => {
    const radioResidency = {
      logical_field_name: 'deposit_loan_to',
      value: 'SCB Account',
    };

    const { result } = renderHook(() =>
      getFields(mockStages, radioResidency)
    );

    expect(dispatchMock).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields([
        'other_bank_name',
        'other_bank_account_bt',
        'reenter_other_bank_account_bt',
        'other_bank_credit_card_bt',
        'reenter_other_bank_credit_card_bt',
        'enter_account_info',
      ])
    );
    expect(dispatchMock).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: [
          'other_bank_name',
          'other_bank_account_bt',
          'reenter_other_bank_account_bt',
          'other_bank_credit_card_bt',
          'reenter_other_bank_credit_card_bt',
        ],
        newFields: [
          'scb_account_no',
          're_enter_scb_account_no',
          'enter_account_info',
        ],
        value: '',
      })
    );
  });

  it('should return filtered fields when ssfStages is provided', () => {
    const mockFields = [
      { logical_field_name: 'field1' },
      { logical_field_name: 'field2' },
    ];
    
    const modifiedStages = JSON.parse(JSON.stringify(mockStages));
    modifiedStages[0].stageInfo.fieldmetadata.data.stages[0].fields = mockFields;

    const radioResidency = {
      logical_field_name: 'residency_status',
      value: 'CT',
    };

    const { result } = renderHook(() =>
      getFields(modifiedStages, radioResidency)
    );

    // Assuming the function would filter fields based on ssfStages (["NRIC"] in this case)
    // You might need to adjust this based on actual implementation
    expect(result.current).toBeNull(); // or adjust based on expected filtered fields
  });

  it('should handle employerOther parameter for name_of_employer_other', () => {
    const employerOther = 'name_of_employer_other';

    const { result } = renderHook(() =>
      getFields(mockStages, null, employerOther)
    );

    expect(dispatchMock).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: [],
        newFields: ['name_of_employer_other'],
        value: '',
      })
    );
  });

  it('should handle stageId ad-2 with manual authentication', () => {
    (authenticateType as jest.Mock).mockReturnValue('manual');
    const modifiedStages = JSON.parse(JSON.stringify(mockStages));
    modifiedStages[0].stageId = 'ad-2';

    const { result } = renderHook(() =>
      getFields(modifiedStages, null)
    );

    expect(FindIndex).not.toHaveBeenCalled();
    // Add more assertions based on expected behavior
  });

  it('should handle stageId bd-1', () => {
    const modifiedStages = JSON.parse(JSON.stringify(mockStages));
    modifiedStages[0].stageId = 'bd-1';

    const { result } = renderHook(() =>
      getFields(modifiedStages, null)
    );

    expect(FindIndex).toHaveBeenCalled();
    // Add more assertions based on expected behavior
  });
});
