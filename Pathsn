import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import Fields from './Fields';

// Mock Redux hooks
jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

// Mock react-router-dom
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: jest.fn(),
}));

// Mock other dependencies as needed
jest.mock('../../../services/common-service');
jest.mock('../../../services/track-events');
jest.mock('../../../services/ga-track-events');

describe('Fields Component', () => {
  let mockDispatch: jest.Mock;
  let mockNavigate: jest.Mock;
  let mockStore: any;

  beforeEach(() => {
    mockDispatch = jest.fn();
    mockNavigate = jest.fn();
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useNavigate as jest.Mock).mockReturnValue(mockNavigate);

    // Mock useSelector implementation
    (useSelector as jest.Mock).mockImplementation((selector) => {
      // Return mock state based on selector
      if (selector.name === 'stages') {
        return {
          stages: [{
            stageId: 'ssf-1',
            stageInfo: {
              applicants: {},
              products: [{ product_type: '280', product_category: 'CC' }],
              fieldmetadata: { data: { stages: [] } }
            },
            currentStage: 'ssf-1',
          }],
          userInput: { applicants: {} },
          currentStage: 'ssf-1',
          journeyType: 'NTC',
        };
      }
      // Add other selector cases as needed
      return {};
    });

    mockStore = configureStore({
      reducer: {
        stages: () => ({
          stages: [{
            stageId: 'ssf-1',
            stageInfo: {
              applicants: {},
              products: [{ product_type: '280', product_category: 'CC' }],
              fieldmetadata: { data: { stages: [] } }
            },
            currentStage: 'ssf-1',
          }],
          userInput: { applicants: {} },
          currentStage: 'ssf-1',
          journeyType: 'NTC',
        }),
        // Add other reducers as needed
      },
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  // Basic rendering test
  it('should render without crashing', () => {
    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );
    expect(screen.getByRole('form')).toBeInTheDocument();
  });

  // Test form submission
  it('should handle form submission', async () => {
    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    const form = screen.getByRole('form');
    fireEvent.submit(form);

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalled();
    });
  });

  // Test back navigation
  it('should handle back navigation', () => {
    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    // Assuming your Footer component has a back button with test ID
    const backButton = screen.getByTestId('back-button');
    fireEvent.click(backButton);

    expect(mockDispatch).toHaveBeenCalled();
  });

  // Test field rendering based on stage
  it('should render different fields based on current stage', () => {
    // Mock different stage
    (useSelector as jest.Mock).mockImplementation((selector) => {
      if (selector.name === 'stages') {
        return {
          stages: [{
            stageId: 'bd-2',
            stageInfo: {
              applicants: {},
              products: [{ product_type: '280', product_category: 'CC' }],
              fieldmetadata: { data: { stages: [] } }
            },
            currentStage: 'bd-2',
          }],
          userInput: { applicants: {} },
          currentStage: 'bd-2',
          journeyType: 'NTC',
        };
      }
      return {};
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    // Add assertions for fields expected in bd-2 stage
  });

  // Test age validation popup
  it('should show age validation popup when age is invalid', () => {
    // Mock state with invalid age
    (useSelector as jest.Mock).mockImplementation((selector) => {
      if (selector.name === 'stages') {
        return {
          stages: [{
            stageId: 'ssf-1',
            stageInfo: {
              applicants: { date_of_birth_a_1: '2010-01-01' },
              products: [{ product_type: '280', product_category: 'CC', min_age: 21 }],
              fieldmetadata: { data: { stages: [] } }
            },
            currentStage: 'ssf-1',
          }],
          userInput: { applicants: {} },
          currentStage: 'ssf-1',
          journeyType: 'NTC',
        };
      }
      return {};
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    const form = screen.getByRole('form');
    fireEvent.submit(form);

    expect(screen.getByText(/age requirement/i)).toBeInTheDocument();
  });

  // Test US popup
  it('should show US popup when US tax declaration is yes', () => {
    // Mock state with US tax declaration
    (useSelector as jest.Mock).mockImplementation((selector) => {
      if (selector.name === 'stages') {
        return {
          stages: [{
            stageId: 'ad-2',
            stageInfo: {
              applicants: { casa_fatca_declaration_1_a_1: 'Y' },
              products: [{ product_type: '280', product_category: 'CC' }],
              fieldmetadata: { data: { stages: [] } }
            },
            currentStage: 'ad-2',
          }],
          userInput: { applicants: { casa_fatca_declaration_1_a_1: 'Y' } },
          currentStage: 'ad-2',
          journeyType: 'NTC',
        };
      }
      return {};
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    const form = screen.getByRole('form');
    fireEvent.submit(form);

    expect(screen.getByText(/US tax/i)).toBeInTheDocument();
  });

  // Test document upload stage
  it('should render DocumentUpload component when stage is doc', () => {
    (useSelector as jest.Mock).mockImplementation((selector) => {
      if (selector.name === 'stages') {
        return {
          stages: [{
            stageId: 'doc',
            stageInfo: {
              applicants: {},
              products: [{ product_type: '280', product_category: 'CC' }],
              fieldmetadata: { data: { stages: [] } }
            },
            currentStage: 'doc',
          }],
          userInput: { applicants: {} },
          currentStage: 'doc',
          journeyType: 'NTC',
        };
      }
      return {};
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    // Assuming DocumentUpload has a specific test ID
    expect(screen.getByTestId('document-upload')).toBeInTheDocument();
  });

  // Test review page stage
  it('should render ReviewPage component when stage is rp', () => {
    (useSelector as jest.Mock).mockImplementation((selector) => {
      if (selector.name === 'stages') {
        return {
          stages: [{
            stageId: 'rp',
            stageInfo: {
              applicants: {},
              products: [{ product_type: '280', product_category: 'CC' }],
              fieldmetadata: { data: { stages: [] } }
            },
            currentStage: 'rp',
          }],
          userInput: { applicants: {} },
          currentStage: 'rp',
          journeyType: 'NTC',
        };
      }
      return {};
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    // Assuming ReviewPage has a specific test ID
    expect(screen.getByTestId('review-page')).toBeInTheDocument();
  });

  // Test referral code popup
  it('should show referral code popup when referral flag is true and code is empty', () => {
    (useSelector as jest.Mock).mockImplementation((selector) => {
      if (selector.name === 'stages') {
        return {
          stages: [{
            stageId: 'ssf-1',
            stageInfo: {
              applicants: {},
              products: [{ product_type: '280', product_category: 'CC' }],
              fieldmetadata: { data: { stages: [] } }
            },
            currentStage: 'ssf-1',
          }],
          userInput: { applicants: {} },
          currentStage: 'ssf-1',
          journeyType: 'NTC',
        };
      }
      if (selector.name === 'referralcode') {
        return { refer: 'true', referId: '' };
      }
      return {};
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    const form = screen.getByRole('form');
    fireEvent.submit(form);

    expect(screen.getByText(/referral code/i)).toBeInTheDocument();
  });

  // Test CPF Contribution rendering
  it('should render CPFContribution when conditions are met', () => {
    (useSelector as jest.Mock).mockImplementation((selector) => {
      if (selector.name === 'stages') {
        return {
          stages: [{
            stageId: 'bd-3',
            stageInfo: {
              applicants: {
                Cpfcontributions: [{ year: '2022', amount: '1000' }],
                yearly_assessable_income_a_1: '50000',
                year_of_assessment_a_1: '2023'
              },
              products: [{ product_type: '280', product_category: 'CC' }],
              fieldmetadata: { data: { stages: [] } }
            },
            currentStage: 'bd-3',
          }],
          userInput: { applicants: {} },
          currentStage: 'bd-3',
          journeyType: 'NTC',
          otherMyinfo: true,
        };
      }
      return {};
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    expect(screen.getByText(/NOA Income Details/i)).toBeInTheDocument();
    expect(screen.getByText(/Year of Assessment/i)).toBeInTheDocument();
    expect(screen.getByText(/Yearly Assessment Income/i)).toBeInTheDocument();
  });

  // Test Banca Details rendering
  it('should render BancaDetails when conditions are met', () => {
    (useSelector as jest.Mock).mockImplementation((selector) => {
      if (selector.name === 'stages') {
        return {
          stages: [{
            stageId: 'ad-1',
            stageInfo: {
              applicants: {},
              products: [{ product_type: '280', product_category: 'CC' }],
              fieldmetadata: { data: { stages: [] } }
            },
            currentStage: 'ad-1',
          }],
          userInput: { applicants: { credit_limit_consent_a_1: 'N' } },
          currentStage: 'ad-1',
          journeyType: 'NTC',
        };
      }
      if (selector.name === 'bancaList') {
        return { 
          bancaDetails: { 
            banca_product_applicable_a_1: 'Y',
            eligible_banca_insurance_informations: [{
              insurance_name: 'Test Insurance',
              insurance_description: 'Test Description'
            }]
          } 
        };
      }
      return {};
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    expect(screen.getByText(/Insurance Protection/i)).toBeInTheDocument();
  });
});
