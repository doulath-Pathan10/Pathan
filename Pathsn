import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import DropDownModel from './DropDownModel';
import { getFields } from '../selection-box/selection-box.util';
import renderComponent from '../../../modules/dashboard/fields/renderer';

// Mock dependencies with proper TypeScript typing
jest.mock('../selection-box/selection-box.util', () => ({
  getFields: jest.fn(() => []),
}));

jest.mock('../../../modules/dashboard/fields/renderer', () => ({
  __esModule: true,
  default: jest.fn(() => <div data-testid="mocked-render-component">Mocked Component</div>),
}));

jest.mock('../selection-box/selection-box.utils', () => ({
  AccountList: jest.fn(({ item }) => <div data-testid="account-list">{item.CODE_DESC}</div>),
}));

// Create mock store with thunk middleware
const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

describe('DropDownModel Component', () => {
  const mockAddUserInput = jest.fn();
  const mockClose = jest.fn();
  const mockHandleCallback = jest.fn();
  const mockHandleFieldDispatch = jest.fn();

  const baseProps = {
    logicalFieldName: 'loan_account_list',
    label: 'Test Dropdown',
    close: mockClose,
    addUserInput: mockAddUserInput,
    selectedOption: [
      {
        CODE_VALUE: 'val1',
        CODE_DESC: 'Value 1',
        checked: false,
      },
      {
        CODE_VALUE: 'val2',
        CODE_DESC: 'Value 2',
        checked: true,
      },
    ],
    selectedValue: [{ CODE_VALUE: 'test' }],
    handleCallback: mockHandleCallback,
    handleFieldDispatch: mockHandleFieldDispatch,
    value: {},
  };

  const createTestStore = (overrides = {}) => {
    return mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                {
                  product_type: '601',
                },
              ],
            },
          },
        ],
        userInput: {
          applicants: {},
        },
        ...overrides,
      },
    });
  };

  beforeEach(() => {
    jest.clearAllMocks();
    (getFields as jest.Mock).mockClear();
    (renderComponent as jest.Mock).mockClear();
  });

  it('1. Renders basic dropdown structure', () => {
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...baseProps} />
      </Provider>
    );

    expect(screen.getByText('Test Dropdown')).toBeInTheDocument();
    expect(screen.getByRole('presentation')).toHaveClass('dropdown-select__background');
    expect(screen.getByTestId('dropdown-select__popup')).toBeInTheDocument();
  });

  it('2. Renders loan account list items correctly', () => {
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...baseProps} />
      </Provider>
    );

    expect(screen.getAllByTestId('account-list').length).toBe(2);
    expect(screen.getByText('Value 1')).toBeInTheDocument();
    expect(screen.getByText('Value 2')).toBeInTheDocument();
  });

  it('3. Handles credit_into type with radio buttons', () => {
    const creditProps = {
      ...baseProps,
      logicalFieldName: 'credit_into',
      selectedOption: [
        {
          CODE_VALUE: 'bank1',
          CODE_DESC: 'Bank 1',
          checked: false,
        },
        {
          CODE_VALUE: 'Other Bank Account',
          CODE_DESC: 'Other Bank',
          checked: false,
        },
      ],
    };
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...creditProps} />
      </Provider>
    );

    const radios = screen.getAllByRole('radio');
    expect(radios.length).toBe(2);
    expect(screen.getByText('Bank 1')).toBeInTheDocument();
    expect(screen.getByText('Other Bank')).toBeInTheDocument();
  });

  it('4. Hides other bank radio when credit_into has <= 1 options', () => {
    const creditProps = {
      ...baseProps,
      logicalFieldName: 'credit_into',
      selectedOption: [
        {
          CODE_VALUE: 'bank1',
          CODE_DESC: 'Bank 1',
          checked: false,
        },
      ],
    };
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...creditProps} />
      </Provider>
    );

    expect(screen.getByTestId('dropdown-select__popup')).toHaveClass('dropdown-select__popup');
    expect(screen.getByText('Bank 1')).toBeInTheDocument();
  });

  it('5. Dispatches getFields for credit_into type', () => {
    const creditProps = {
      ...baseProps,
      logicalFieldName: 'credit_into',
    };
    const store = createTestStore();
    
    (getFields as jest.Mock).mockReturnValueOnce([{ type: 'test', props: {} }]);
    
    render(
      <Provider store={store}>
        <DropDownModel {...creditProps} />
      </Provider>
    );

    expect(getFields).toHaveBeenCalledWith(
      store.getState().stages.stages,
      'test',
      'credit_into'
    );
    expect(screen.getByTestId('mocked-render-component')).toBeInTheDocument();
  });

  it('6. Applies special class for maturity_amount type', () => {
    const maturityProps = {
      ...baseProps,
      logicalFieldName: 'maturity_amount',
    };
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...maturityProps} />
      </Provider>
    );

    expect(screen.getByTestId('dropdown-select__popup')).toHaveClass('dropdown-select--tenor');
  });

  it('7. Handles radio button selection', () => {
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...baseProps} />
      </Provider>
    );

    const radioButton = screen.getByLabelText('Value 1');
    fireEvent.click(radioButton);
    expect(mockAddUserInput).toHaveBeenCalledWith(baseProps.selectedOption[0]);
  });

  it('8. Shows label only for product_type 601', () => {
    const store = createTestStore({
      stages: {
        stages: [
          {
            stageInfo: {
              products: [
                {
                  product_type: '601',
                },
              ],
            },
          },
        ],
      },
    });
    render(
      <Provider store={store}>
        <DropDownModel {...baseProps} />
      </Provider>
    );

    expect(screen.getByText('Test Dropdown')).toBeInTheDocument();
  });

  it('9. Handles close button click', () => {
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...baseProps} />
      </Provider>
    );

    const closeButton = screen.getByTestId('close-button');
    fireEvent.click(closeButton);
    expect(mockClose).toHaveBeenCalled();
  });

  it('10. Renders nothing when selectedOption is empty', () => {
    const emptyProps = {
      ...baseProps,
      selectedOption: [],
    };
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...emptyProps} />
      </Provider>
    );

    expect(screen.queryByText('Value 1')).not.toBeInTheDocument();
  });

  it('11. Handles undefined selectedValue gracefully', () => {
    const undefinedProps = {
      ...baseProps,
      selectedValue: undefined,
    };
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...undefinedProps} />
      </Provider>
    );

    expect(screen.getByText('Value 1')).toBeInTheDocument();
  });

  it('12. Shows bank code value for credit_into items', () => {
    const creditProps = {
      ...baseProps,
      logicalFieldName: 'credit_into',
      selectedOption: [
        {
          CODE_VALUE: 'BANK123',
          CODE_DESC: 'My Bank',
          checked: false,
        },
      ],
    };
    const store = createTestStore();
    render(
      <Provider store={store}>
        <DropDownModel {...creditProps} />
      </Provider>
    );

    expect(screen.getByText('BANK123')).toBeInTheDocument();
  });
});
