import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import '@testing-library/jest-dom';
import Model from './Model';

// Mock external dependencies
jest.mock('../../../assets/_json/model.json', () => [
  {
    name: 'postal_code',
    header_content: 'Enter Postal Code',
    header_content_second: 'Rate Information',
    body_content: ['Please enter your postal code'],
    buttons: ['Check Rate'],
    PostalCodebuttons: ['Continue'],
    postal_code_lable: 'Postal Code',
    errorDesc: 'Please enter a valid postal code',
    popupDescription: 'Your rate information'
  },
  {
    name: 'ageHardStop',
    header_content: 'Age Hard Stop',
    body_content: ['You must be at least 18 years old'],
    buttons: ['OK']
  },
  {
    name: 'usHardStop',
    header_content: 'We are unable to open accounts for US residents',
    body_content: ['US residents cannot open accounts'],
    buttons: ['OK']
  },
  {
    name: 'referral_code',
    header_content: 'Referral Code',
    body_content: ['Do you have a referral code?'],
    buttons: ['Yes', 'No']
  },
  {
    name: 'CCThankYou',
    header_content: 'Thank You',
    body_content: ['Thank you for your application'],
    buttons: ['Continue Without Activation', 'Continue']
  },
  {
    name: 'CCCardActivation',
    header_content: 'Card Activation',
    body_content: ['Please activate your card'],
    buttons: ['Activate']
  }
]);

jest.mock('../../../assets/_json/lottie/oops.json', () => ({}));
jest.mock('../../../assets/_json/error.json', () => ({
  referralcodeerror: 'Invalid referral code'
}));

jest.mock('../../../services/track-events', () => ({
  triggerAdobeEvent: jest.fn()
}));

jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getParameterByName: jest.fn(),
    getUpdatedStage: jest.fn(() => ({ ccplChannel: '' }))
  },
  FindIndex: jest.fn(),
  getTokenChno: jest.fn(() => ({ channelRefNo: 'test123' }))
}));

jest.mock('../../../services/common-service', () => ({
  redirectingToIbanking: jest.fn(),
  rateRequest: jest.fn(),
  formConfig: jest.fn(),
  submitBasicDataMyInfo: jest.fn(),
  channelReference: jest.fn(() => Promise.resolve({ data: { success: true } }))
}));

jest.mock('../../../services/validation-service', () => ({
  allowOnlyCharacter: jest.fn()
}));

jest.mock('@lottiefiles/react-lottie-player', () => ({
  Player: ({ className }) => <div className={className} data-testid="lottie-player" />
}));

jest.mock('../../../modules/dashboard/fields/fields.utils', () => ({
  stageFields: jest.fn()
}));

jest.mock('../../../modules/dashboard/fields/stage.utils', () => ({
  stateUrl: jest.fn()
}));

// Mock environment variables
process.env.REACT_APP_IBANKING_SC_MOBILE = 'https://mobile.bank.com';
process.env.REACT_APP_HOME_PAGE_URL = 'https://bank.com';
process.env.REACT_APP_PREFERRED_LIMIT_FAQS = 'https://bank.com/faqs';

// Mock Redux slices
const mockReferralcodeSlice = {
  name: 'referralcode',
  initialState: { refer: null, referralErrorMsg: '' },
  reducers: {
    setReferralErrorMsg: (state, action) => {
      state.referralErrorMsg = action.payload;
    }
  }
};

const mockStagesSlice = {
  name: 'stages',
  initialState: {
    stages: [{
      stageId: 'bd',
      stageInfo: {
        fieldmetaData: {
          data: {
            stages: [{
              fields: [{
                logical_field_name: 'postal_code',
                min_length: 6
              }]
            }]
          }
        },
        applicants: {
          full_name_a_1: 'John Doe',
          auth_mode_a_1: 'IX'
        },
        products: [{
          product_category: 'PL'
        }, {
          product_category: 'CC'
        }]
      }
    }]
  },
  reducers: {
    updateLastStageInput: (state, action) => state,
    resetCurrentStage: (state, action) => state,
    updateStageId: (state, action) => state
  }
};

const createMockStore = (initialState = {}) => {
  return configureStore({
    reducer: {
      referralcode: (state = mockReferralcodeSlice.initialState, action) => {
        switch (action.type) {
          case 'referralcode/setReferralErrorMsg':
            return { ...state, referralErrorMsg: action.payload };
          default:
            return state;
        }
      },
      stages: (state = mockStagesSlice.initialState, action) => state,
      rate: (state = { ar: '', eir: '' }, action) => state,
      urlParam: (state = { resume: false }, action) => state
    },
    preloadedState: initialState
  });
};

describe('Model Component', () => {
  let mockStore;
  let mockProps;

  beforeEach(() => {
    mockStore = createMockStore();
    mockProps = {
      name: 'postal_code',
      handlebuttonClick: jest.fn(),
      body_content: '',
      isTooltip: false
    };
    jest.clearAllMocks();
  });

  describe('Rendering', () => {
    test('renders postal code popup correctly', () => {
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(screen.getByText('Enter Postal Code')).toBeInTheDocument();
      expect(screen.getByText('Please enter your postal code')).toBeInTheDocument();
      expect(screen.getByPlaceholderText('Enter postal code')).toBeInTheDocument();
      expect(screen.getByText('Check Rate')).toBeInTheDocument();
    });

    test('renders age hard stop popup correctly', () => {
      mockProps.name = 'ageHardStop';
      mockProps.body_content = 'to apply';

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(screen.getByText('Age Hard Stop')).toBeInTheDocument();
      expect(screen.getByText('You must be at least 18 years old to apply')).toBeInTheDocument();
      expect(screen.getByTestId('lottie-player')).toBeInTheDocument();
    });

    test('renders referral code popup correctly', () => {
      mockProps.name = 'referral_code';
      const storeWithReferral = createMockStore({
        referralcode: { refer: 'test123', referralErrorMsg: '' }
      });

      render(
        <Provider store={storeWithReferral}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(screen.getByText('Referral Code')).toBeInTheDocument();
      expect(screen.getByText('Do you have a referral code?')).toBeInTheDocument();
    });

    test('renders tooltip icon when isTooltip is true', () => {
      mockProps.name = 'ageHardStop';
      mockProps.isTooltip = true;

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(screen.getByRole('generic', { class: /popup__question/ })).toBeInTheDocument();
      expect(screen.queryByTestId('lottie-player')).not.toBeInTheDocument();
    });
  });

  describe('Postal Code Functionality', () => {
    test('updates postal code input correctly', () => {
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const input = screen.getByPlaceholderText('Enter postal code');
      fireEvent.change(input, { target: { value: '123456' } });

      expect(input.value).toBe('123456');
    });

    test('validates postal code minimum length', () => {
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const input = screen.getByPlaceholderText('Enter postal code');
      fireEvent.change(input, { target: { value: '12345' } });

      const button = screen.getByText('Check Rate');
      fireEvent.click(button);

      expect(screen.getByText('Please enter a valid postal code')).toBeInTheDocument();
    });

    test('handles postal code rate request', async () => {
      const { rateRequest } = require('../../../services/common-service');
      
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const input = screen.getByPlaceholderText('Enter postal code');
      fireEvent.change(input, { target: { value: '123456' } });

      const button = screen.getByText('Check Rate');
      fireEvent.click(button);

      expect(rateRequest).toHaveBeenCalledWith('123456', expect.any(Object));
    });

    test('displays rate information when available', () => {
      const storeWithRate = createMockStore({
        rate: { ar: '5.5', eir: '6.0' }
      });

      render(
        <Provider store={storeWithRate}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(screen.getByText('5.5% p.a.')).toBeInTheDocument();
      expect(screen.getByText('(EIR 6.0% p.a.)')).toBeInTheDocument();
      expect(screen.getByText('Rate Information')).toBeInTheDocument();
    });

    test('handles continue button click with rate', async () => {
      const storeWithRate = createMockStore({
        rate: { ar: '5.5', eir: '6.0' }
      });

      render(
        <Provider store={storeWithRate}>
          <Model {...mockProps} />
        </Provider>
      );

      const continueButton = screen.getByText('Continue');
      fireEvent.click(continueButton);

      expect(mockProps.handlebuttonClick).toHaveBeenCalled();
    });
  });

  describe('Button Click Handlers', () => {
    test('handles CCThankYou button clicks', () => {
      mockProps.name = 'CCThankYou';
      mockProps.handleContinueWithoutActivation = jest.fn();

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const continueWithoutActivationButton = screen.getByText('Continue Without Activation');
      fireEvent.click(continueWithoutActivationButton);

      expect(mockProps.handleContinueWithoutActivation).toHaveBeenCalled();

      const continueButton = screen.getByText('Continue');
      fireEvent.click(continueButton);

      expect(mockProps.handlebuttonClick).toHaveBeenCalled();
    });

    test('handles CCCardActivation button click', () => {
      mockProps.name = 'CCCardActivation';
      mockProps.handleOTPSuccessClick = jest.fn();

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const activateButton = screen.getByText('Activate');
      fireEvent.click(activateButton);

      expect(mockProps.handleOTPSuccessClick).toHaveBeenCalled();
    });

    test('handles referral code button clicks', () => {
      mockProps.name = 'referral_code';
      mockProps.setContinueWithoutReferralcode = jest.fn();
      mockProps.setShowReferralcodePopup = jest.fn();

      const storeWithReferral = createMockStore({
        referralcode: { refer: 'test123', referralErrorMsg: '' }
      });

      render(
        <Provider store={storeWithReferral}>
          <Model {...mockProps} />
        </Provider>
      );

      const yesButton = screen.getByText('Yes');
      fireEvent.click(yesButton);

      expect(mockProps.setContinueWithoutReferralcode).toHaveBeenCalledWith(false);
      expect(mockProps.setShowReferralcodePopup).toHaveBeenCalledWith(false);

      const noButton = screen.getByText('No');
      fireEvent.click(noButton);

      expect(mockProps.setContinueWithoutReferralcode).toHaveBeenCalledWith(true);
      expect(mockProps.setShowReferralcodePopup).toHaveBeenCalledWith(false);
    });

    test('handles generic popup button clicks', () => {
      mockProps.name = 'nationalityHardStop';

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      // Since this popup name doesn't exist in mock data, it will use default behavior
      expect(mockProps.handlebuttonClick).not.toHaveBeenCalled();
    });
  });

  describe('Redux Integration', () => {
    test('dispatches referral code actions correctly', () => {
      mockProps.name = 'referral_code';
      mockProps.setContinueWithoutReferralcode = jest.fn();
      mockProps.setShowReferralcodePopup = jest.fn();

      const storeWithReferral = createMockStore({
        referralcode: { refer: 'test123', referralErrorMsg: '' }
      });

      render(
        <Provider store={storeWithReferral}>
          <Model {...mockProps} />
        </Provider>
      );

      const yesButton = screen.getByText('Yes');
      fireEvent.click(yesButton);

      // Verify that the component updates the store state
      const state = storeWithReferral.getState();
      expect(state.referralcode.referralErrorMsg).toBe('Invalid referral code');
    });

    test('uses selector values correctly', () => {
      const storeWithData = createMockStore({
        stages: {
          stages: [{
            stageInfo: {
              fieldmetaData: {
                data: {
                  stages: [{
                    fields: [{
                      logical_field_name: 'postal_code',
                      min_length: 8
                    }]
                  }]
                }
              },
              applicants: { full_name_a_1: 'Jane Doe' },
              products: [{ product_category: 'PL' }]
            }
          }]
        }
      });

      render(
        <Provider store={storeWithData}>
          <Model {...mockProps} />
        </Provider>
      );

      const input = screen.getByPlaceholderText('Enter postal code');
      fireEvent.change(input, { target: { value: '1234567' } });

      const button = screen.getByText('Check Rate');
      fireEvent.click(button);

      // Should show error because min length is 8 but we entered 7 characters
      expect(screen.getByText('Please enter a valid postal code')).toBeInTheDocument();
    });
  });

  describe('Event Tracking', () => {
    test('triggers Adobe events on popup view', () => {
      const trackEvents = require('../../../services/track-events');

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      expect(trackEvents.triggerAdobeEvent).toHaveBeenCalledWith(
        'popupViewed',
        'Enter Postal Code'
      );
    });

    test('triggers Adobe events on button click', () => {
      const trackEvents = require('../../../services/track-events');

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const button = screen.getByText('Check Rate');
      fireEvent.click(button);

      expect(trackEvents.triggerAdobeEvent).toHaveBeenCalledWith(
        'ctaClick',
        expect.stringContaining('Check Rate'),
        {},
        expect.any(String)
      );
    });
  });

  describe('Error Handling', () => {
    test('handles missing model data gracefully', () => {
      mockProps.name = 'nonexistent_popup';

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      // Component should not render anything if model data is not found
      expect(screen.queryByRole('generic', { class: /popup/ })).not.toBeInTheDocument();
    });

    test('handles API errors gracefully', async () => {
      const { channelReference } = require('../../../services/common-service');
      channelReference.mockRejectedValueOnce(new Error('API Error'));

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const input = screen.getByPlaceholderText('Enter postal code');
      fireEvent.change(input, { target: { value: '123456' } });

      const continueButton = screen.getByText('Check Rate');
      fireEvent.click(continueButton);

      // Component should handle the error without crashing
      await waitFor(() => {
        expect(screen.getByPlaceholderText('Enter postal code')).toBeInTheDocument();
      });
    });
  });

  describe('Accessibility', () => {
    test('has proper ARIA attributes', () => {
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const input = screen.getByPlaceholderText('Enter postal code');
      expect(input).toHaveAttribute('type', 'text');
      expect(input).toHaveAttribute('name', 'postCode');
      expect(input).toHaveAttribute('maxLength', '6');
    });

    test('supports keyboard navigation', () => {
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const button = screen.getByText('Check Rate');
      button.focus();
      expect(document.activeElement).toBe(button);

      fireEvent.keyPress(button, { key: 'Enter', code: 'Enter', charCode: 13 });
      // Should handle keyboard events properly
    });
  });

  describe('Edge Cases', () => {
    test('handles empty postal code input', () => {
      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const button = screen.getByText('Check Rate');
      fireEvent.click(button);

      expect(screen.getByText('Please enter a valid postal code')).toBeInTheDocument();
    });

    test('handles special characters in postal code', () => {
      const validateService = require('../../../services/validation-service');

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const input = screen.getByPlaceholderText('Enter postal code');
      fireEvent.keyPress(input, { key: 'a', code: 'KeyA', charCode: 97 });

      expect(validateService.allowOnlyCharacter).toHaveBeenCalled();
    });

    test('handles window location redirects', () => {
      delete window.location;
      window.location = { href: '' };

      mockProps.name = 'ageHardStop';

      render(
        <Provider store={mockStore}>
          <Model {...mockProps} />
        </Provider>
      );

      const button = screen.getByText('OK');
      fireEvent.click(button);

      expect(window.location.href).toBe('https://bank.com');
    });
  });
});
