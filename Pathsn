import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Footer from './Footer';

const mockStore = configureStore([]);

describe('Footer Component', () => {
  let store;
  const mockBackHandler = jest.fn();
  const defaultProps = {
    backHandler: mockBackHandler,
    validateNxt: 'form-valid',
    otherMyinfo: false,
    uploadJourney: false,
    journeyType: 'standard'
  };

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'SSF_1',
          stageInfo: {
            products: [{
              product_type: '100',
              product_category: 'PL'
            }],
            applicants: {
              application_sourcing_a_1: '0'
            }
          }
        }],
        userInput: {
          applicants: {
            mobile_number_a_1: '',
            mobile_number_rwb_a_1: '65'
          }
        },
        signatureDocument: ''
      }
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(
      <Provider store={store}>
        <Footer {...defaultProps} />
      </Provider>
    );
    expect(screen.getByRole('button', { name: /Continue/i })).toBeInTheDocument();
  });

  it('shows back button when not on SSF_1 or BD_1 stages', () => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'SSF_2',
          stageInfo: {
            products: [{
              product_type: '100',
              product_category: 'PL'
            }]
          }
        }],
        userInput: {
          applicants: {
            mobile_number_a_1: '',
            mobile_number_rwb_a_1: '65'
          }
        },
        signatureDocument: ''
      }
    });

    render(
      <Provider store={store}>
        <Footer {...defaultProps} />
      </Provider>
    );
    
    expect(screen.getByText(/Back/i)).toBeInTheDocument();
  });

  it('does not show back button on SSF_1 stage', () => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'SSF_1',
          stageInfo: {
            products: [{
              product_type: '100',
              product_category: 'PL'
            }]
          }
        }],
        userInput: {
          applicants: {
            mobile_number_a_1: '',
            mobile_number_rwb_a_1: '65'
          }
        },
        signatureDocument: ''
      }
    });

    render(
      <Provider store={store}>
        <Footer {...defaultProps} />
      </Provider>
    );
    
    expect(screen.queryByText(/Back/i)).not.toBeInTheDocument();
  });

  it('calls backHandler when back button is clicked', () => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'SSF_2',
          stageInfo: {
            products: [{
              product_type: '100',
              product_category: 'PL'
            }]
          }
        }],
        userInput: {
          applicants: {
            mobile_number_a_1: '',
            mobile_number_rwb_a_1: '65'
          }
        },
        signatureDocument: ''
      }
    });

    render(
      <Provider store={store}>
        <Footer {...defaultProps} />
      </Provider>
    );
    
    fireEvent.click(screen.getByText(/Back/i));
    expect(mockBackHandler).toHaveBeenCalled();
  });

  it('shows "Agree and Submit" text on rp stage', () => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'rp',
          stageInfo: {
            products: [{
              product_type: '100',
              product_category: 'PL'
            }],
            applicants: {
              application_sourcing_a_1: '0'
            }
          }
        }],
        userInput: {
          applicants: {
            mobile_number_a_1: '',
            mobile_number_rwb_a_1: '65'
          }
        },
        signatureDocument: ''
      }
    });

    render(
      <Provider store={store}>
        <Footer {...defaultProps} />
      </Provider>
    );
    
    expect(screen.getByText(/Agree and Submit/i)).toBeInTheDocument();
  });

  it('shows spinner when urlEndpoint is acknowledge or preserve', () => {
    // Mock getUrl.getUrlEndPoint to return 'acknowledge'
    jest.mock('../../../utils/common/change.utils', () => ({
      getUrl: {
        getUrlEndPoint: jest.fn(() => 'acknowledge')
      }
    }));

    render(
      <Provider store={store}>
        <Footer {...defaultProps} />
      </Provider>
    );
    
    expect(screen.getByRole('button').querySelector('.circle-spinner')).toBeInTheDocument();
  });

  it('disables button when mobile number is invalid', () => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'SSF_1',
          stageInfo: {
            products: [{
              product_type: '100',
              product_category: 'PL'
            }],
            applicants: {
              application_sourcing_a_1: '0'
            }
          }
        }],
        userInput: {
          applicants: {
            mobile_number_a_1: '1234567',
            mobile_number_rwb_a_1: '65'
          }
        },
        signatureDocument: ''
      }
    });

    render(
      <Provider store={store}>
        <Footer {...defaultProps} />
      </Provider>
    );
    
    expect(screen.getByRole('button')).toBeDisabled();
  });

  it('enables button when mobile number is valid', () => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'SSF_1',
          stageInfo: {
            products: [{
              product_type: '100',
              product_category: 'PL'
            }],
            applicants: {
              application_sourcing_a_1: '0'
            }
          }
        }],
        userInput: {
          applicants: {
            mobile_number_a_1: '91234567',
            mobile_number_rwb_a_1: '65'
          }
        },
        signatureDocument: ''
      }
    });

    render(
      <Provider store={store}>
        <Footer {...defaultProps} />
      </Provider>
    );
    
    expect(screen.getByRole('button')).not.toBeDisabled();
  });

  it('shows form-invalid class when signature is missing on rp stage', () => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'rp',
          stageInfo: {
            products: [{
              product_type: '100',
              product_category: 'PL'
            }],
            applicants: {
              application_sourcing_a_1: '1'
            }
          }
        }],
        userInput: {
          applicants: {
            mobile_number_a_1: '91234567',
            mobile_number_rwb_a_1: '65'
          }
        },
        signatureDocument: ''
      }
    });

    render(
      <Provider store={store}>
        <Footer {...defaultProps} />
      </Provider>
    );
    
    expect(screen.getByRole('button')).toHaveClass('form-invalid');
  });

  it('shows form-valid class when signature is present on rp stage', () => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'rp',
          stageInfo: {
            products: [{
              product_type: '100',
              product_category: 'PL'
            }],
            applicants: {
              application_sourcing_a_1: '1'
            }
          }
        }],
        userInput: {
          applicants: {
            mobile_number_a_1: '91234567',
            mobile_number_rwb_a_1: '65'
          }
        },
        signatureDocument: 'signature-data'
      }
    });

    render(
      <Provider store={store}>
        <Footer {...defaultProps} />
      </Provider>
    );
    
    expect(screen.getByRole('button')).toHaveClass('form-valid');
  });

  it('hides back button when on LD_1 stage with product_type 280', () => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'LD_1',
          stageInfo: {
            products: [{
              product_type: '280',
              product_category: 'CC'
            }]
          }
        }],
        userInput: {
          applicants: {
            mobile_number_a_1: '',
            mobile_number_rwb_a_1: '65'
          }
        },
        signatureDocument: ''
      }
    });

    render(
      <Provider store={store}>
        <Footer {...defaultProps} />
      </Provider>
    );
    
    expect(screen.queryByText(/Back/i)).not.toBeInTheDocument();
  });

  it('shows back button when otherMyinfo is true', () => {
    store = mockStore({
      stages: {
        stages: [{
          stageId: 'SSF_1',
          stageInfo: {
            products: [{
              product_type: '100',
              product_category: 'PL'
            }]
          }
        }],
        userInput: {
          applicants: {
            mobile_number_a_1: '',
            mobile_number_rwb_a_1: '65'
          }
        },
        signatureDocument: ''
      }
    });

    render(
      <Provider store={store}>
        <Footer {...defaultProps} otherMyinfo={true} />
      </Provider>
    );
    
    expect(screen.getByText(/Back/i)).toBeInTheDocument();
  });
});
