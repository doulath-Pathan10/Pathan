import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import DocumentUpload from './DocumentUpload';
import { store } from '../../../utils/store/store';
import axios from 'axios';

// Mock axios
jest.mock('axios');
const mockedAxios = axios as jest.Mocked<typeof axios>;

// Mock other dependencies
jest.mock('../../../services/track-events');
jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getParameterByName: jest.fn(() => null),
    getDocumentStatus: jest.fn(() => false),
    getJourneyType: jest.fn(() => null),
  },
  authenticateType: jest.fn(() => 'manual'),
}));

jest.mock('../../../services/common-service', () => ({
  documentSubmit: jest.fn(() => Promise.resolve({})),
  channelReference: jest.fn(() => Promise.resolve({ data: {} })),
  lovRequests: jest.fn(),
  dispatchLoader: jest.fn(),
  dispatchCtaLoader: jest.fn(),
  checkProductDetails: jest.fn(() => false),
}));

describe('DocumentUpload Component', () => {
  const mockProps = {
    backHandler: jest.fn(),
  };

  const mockDocumentData = [
    {
      document_list: [
        {
          document_category_code: 'ID',
          document_category: 'Identification',
          docCheck: 'N',
          isSlectedForUpload: 'N',
          min_options_req: 1,
          document_options: [
            {
              document_types: [
                {
                  document_type_code: 'R0001',
                  document_type: 'NRIC',
                  uploaded_documents: [],
                  selectDocument: null,
                  document_requested_stage: 'BD',
                },
              ],
            },
          ],
        },
      ],
      isSignatureDoc: false,
    },
  ];

  beforeEach(() => {
    // Reset the store to initial state
    store.dispatch({
      type: 'documentUploadList/getDocumentList',
      payload: {
        responseDocuments: mockDocumentData,
      },
    });

    store.dispatch({
      type: 'stages/getStage',
      payload: {
        id: 'doc',
        stages: [
          {
            stageId: 'doc',
            stageInfo: {
              applicant_documents: mockDocumentData,
              application: {
                channel_reference: 'TEST123',
                application_reference: 'APP123',
              },
              applicants: {},
              products: [{ product_category: 'CC' }],
            },
          },
        ],
      },
    });
  });

  test('renders basic document upload form', () => {
    render(
      <Provider store={store}>
        <DocumentUpload {...mockProps} />
      </Provider>
    );

    expect(screen.getByText('Upload your identification')).toBeInTheDocument();
    expect(screen.getByLabelText('NRIC')).toBeInTheDocument();
    expect(screen.getByText('Upload')).toBeInTheDocument();
  });

  test('shows upload section when upload button is clicked', () => {
    render(
      <Provider store={store}>
        <DocumentUpload {...mockProps} />
      </Provider>
    );

    // Select the radio button first
    fireEvent.click(screen.getByLabelText('NRIC'));
    
    // Then click upload button
    fireEvent.click(screen.getByText('Upload'));

    expect(screen.getByText('Upload your nric')).toBeInTheDocument();
    expect(screen.getByTestId('file-input')).toBeInTheDocument();
  });

  test('handles file upload successfully', async () => {
    const mockFile = new File(['test'], 'test.png', { type: 'image/png' });
    mockedAxios.post.mockResolvedValue({
      data: { docId: 'DOC123', documentStatus: 'Accepted' },
    });

    render(
      <Provider store={store}>
        <DocumentUpload {...mockProps} />
      </Provider>
    );

    // Select document and go to upload view
    fireEvent.click(screen.getByLabelText('NRIC'));
    fireEvent.click(screen.getByText('Upload'));

    // Upload file
    const fileInput = screen.getByTestId('file-input');
    fireEvent.change(fileInput, { target: { files: [mockFile] } });

    await waitFor(() => {
      expect(mockedAxios.post).toHaveBeenCalled();
    });
  });

  test('shows error when trying to submit without required documents', async () => {
    render(
      <Provider store={store}>
        <DocumentUpload {...mockProps} />
      </Provider>
    );

    fireEvent.click(screen.getByText('Continue'));

    await waitFor(() => {
      expect(screen.getByText(/Please upload all mandatory documents/i)).toBeInTheDocument();
    });
  });

  test('allows submission when required documents are uploaded', async () => {
    // Mock store with uploaded document
    store.dispatch({
      type: 'documentUploadList/getDocumentList',
      payload: {
        responseDocuments: [
          {
            document_list: [
              {
                document_category_code: 'ID',
                document_category: 'Identification',
                docCheck: 'Y',
                isSlectedForUpload: 'Y',
                min_options_req: 1,
                document_options: [
                  {
                    document_types: [
                      {
                        document_type_code: 'R0001',
                        document_type: 'NRIC',
                        uploaded_documents: [
                          {
                            docId: 'DOC123',
                            documentStatus: 'Accepted',
                          },
                        ],
                        selectDocument: 'NRIC',
                        document_requested_stage: 'BD',
                      },
                    ],
                  },
                ],
              },
            ],
            isSignatureDoc: false,
          },
        ],
      },
    });

    render(
      <Provider store={store}>
        <DocumentUpload {...mockProps} />
      </Provider>
    );

    fireEvent.click(screen.getByText('Continue'));

    await waitFor(() => {
      expect(screen.queryByText(/Please upload all mandatory documents/i)).not.toBeInTheDocument();
    });
  });

  test('handles back button click', () => {
    render(
      <Provider store={store}>
        <DocumentUpload {...mockProps} />
      </Provider>
    );

    fireEvent.click(screen.getByText('Back'));
    expect(mockProps.backHandler).toHaveBeenCalled();
  });

  test('displays file specifications', () => {
    render(
      <Provider store={store}>
        <DocumentUpload {...mockProps} />
      </Provider>
    );

    expect(screen.getByText(/JPG, PNG, TIFF, and PDF formats/i)).toBeInTheDocument();
    expect(screen.getByText(/less than 10 MB/i)).toBeInTheDocument();
  });
});
