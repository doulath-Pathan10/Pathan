import { getFields } from '../path/to/your/getFields'; // Adjust import path
import { fieldErrorAction } from "../../../utils/store/field-error-slice";
import { stagesAction } from "../../../utils/store/stages-slice";
import { getProductCategory } from "../../../services/common-service";
import { FindIndex, getUrl, authenticateType } from "../../../utils/common/change.utils";

// Mock all dependencies
jest.mock("../../../utils/store/field-error-slice", () => ({
  fieldErrorAction: {
    removeMandatoryFields: jest.fn(),
    getMandatoryFields: jest.fn()
  }
}));

jest.mock("../../../utils/store/stages-slice", () => ({
  stagesAction: {
    removeAddToggleField: jest.fn(),
    resetDefaultValue: jest.fn(),
    resetNewAndOldFields: jest.fn()
  }
}));

jest.mock("../../../services/common-service", () => ({
  getProductCategory: jest.fn()
}));

jest.mock("../../../utils/common/change.utils", () => ({
  FindIndex: jest.fn(),
  getUrl: {
    getUserInputs: jest.fn(),
    getJourneyType: jest.fn()
  },
  authenticateType: jest.fn()
}));

describe('getFields', () => {
  let mockDispatch: jest.Mock;
  
  const mockStageDetails = {
    stageId: 'ad-1',
    stageInfo: {
      fieldmetadata: {
        data: {
          stages: [
            {
              stageId: 'ad',
              fields: [
                { logical_field_name: 'NRIC' },
                { logical_field_name: 'passport_no' },
                { logical_field_name: 'pass_exp_dt' }
              ]
            },
            {
              stageId: 'bd',
              fields: [
                { logical_field_name: 'name_of_employer' },
                { logical_field_name: 'job_title' }
              ]
            }
          ]
        }
      },
      applicants: {
        NRIC_a_1: '123456789',
        banca_product_applicable_a_1: 'Y'
      },
      products: [{ category: 'CC' }]
    }
  };

  beforeEach(() => {
    mockDispatch = jest.fn();
    jest.clearAllMocks();
  });

  describe('Stage ID Logic', () => {
    it('should handle ad-2 stage with manual authentication', () => {
      (authenticateType as jest.Mock).mockReturnValue('manual');
      const stages = [{ ...mockStageDetails, stageId: 'ad-2' }];
      
      const result = getFields(stages, null);
      const thunk = result(mockDispatch);
      
      expect(thunk).toBeNull();
    });

    it('should handle ad-2 stage with myinfo authentication', () => {
      (authenticateType as jest.Mock).mockReturnValue('myinfo');
      (FindIndex as jest.Mock).mockReturnValue(0);
      const stages = [{ ...mockStageDetails, stageId: 'ad-2' }];
      
      const result = getFields(stages, null);
      const thunk = result(mockDispatch);
      
      expect(FindIndex).toHaveBeenCalledWith(stages[0].stageInfo, 'ad');
      expect(thunk).toBeNull();
    });

    it('should handle ad-1 stage with manual authentication', () => {
      (authenticateType as jest.Mock).mockReturnValue('manual');
      (FindIndex as jest.Mock).mockReturnValue(0);
      const stages = [{ ...mockStageDetails, stageId: 'ad-1' }];
      
      const result = getFields(stages, null);
      const thunk = result(mockDispatch);
      
      expect(FindIndex).toHaveBeenCalledWith(stages[0].stageInfo, 'ad');
    });

    it('should handle bd-1 stage', () => {
      (FindIndex as jest.Mock).mockReturnValue(1);
      const stages = [{ ...mockStageDetails, stageId: 'bd-1' }];
      
      const result = getFields(stages, null);
      const thunk = result(mockDispatch);
      
      expect(FindIndex).toHaveBeenCalledWith(stages[0].stageInfo, 'bd');
    });

    it('should handle ssf-1 stage with manual authentication', () => {
      (authenticateType as jest.Mock).mockReturnValue('manual');
      (FindIndex as jest.Mock).mockReturnValue(1);
      const stages = [{ ...mockStageDetails, stageId: 'ssf-1' }];
      
      const result = getFields(stages, null);
      const thunk = result(mockDispatch);
      
      expect(FindIndex).toHaveBeenCalledWith(stages[0].stageInfo, 'bd');
    });
  });

  describe('Residency Status Logic', () => {
    beforeEach(() => {
      (FindIndex as jest.Mock).mockReturnValue(0);
      (getUrl.getUserInputs as jest.Mock).mockReturnValue({});
    });

    it('should handle residency status CT (Citizen)', () => {
      const radioResidency = {
        logical_field_name: 'residency_status',
        value: 'CT'
      };
      const stages = [mockStageDetails];
      
      const result = getFields(stages, radioResidency);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields(['passport_no', 'pass_exp_dt'])
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: ['passport_no', 'pass_exp_dt'],
          newFields: ['NRIC'],
          value: '123456789'
        })
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.getMandatoryFields(['NRIC'])
      );
      
      const filteredFields = thunk;
      expect(filteredFields).toEqual([{ logical_field_name: 'NRIC' }]);
    });

    it('should handle residency status PR (Permanent Resident)', () => {
      const radioResidency = {
        logical_field_name: 'residency_status',
        value: 'PR'
      };
      const stages = [mockStageDetails];
      
      const result = getFields(stages, radioResidency);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields(['passport_no', 'pass_exp_dt'])
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: ['passport_no', 'pass_exp_dt'],
          newFields: ['NRIC'],
          value: '123456789'
        })
      );
    });

    it('should handle residency status FR (Foreigner)', () => {
      (getUrl.getUserInputs as jest.Mock).mockReturnValue({
        passport_no_a_1: 'P123456',
        pass_exp_dt_a_1: '2025-12-31'
      });
      
      const radioResidency = {
        logical_field_name: 'residency_status',
        value: 'FR'
      };
      const stages = [mockStageDetails];
      
      const result = getFields(stages, radioResidency);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields(['NRIC'])
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: ['NRIC'],
          newFields: ['passport_no', 'pass_exp_dt'],
          value: {
            passport_no_a_1: 'P123456',
            pass_exp_dt_a_1: '2025-12-31'
          }
        })
      );
    });
  });

  describe('Work Type Logic', () => {
    beforeEach(() => {
      (FindIndex as jest.Mock).mockReturnValue(0);
      (getUrl.getUserInputs as jest.Mock).mockReturnValue({});
    });

    it('should handle work type O (Others)', () => {
      const radioResidency = {
        logical_field_name: 'work_type',
        value: 'O'
      };
      const stages = [mockStageDetails];
      
      const result = getFields(stages, radioResidency);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.resetDefaultValue({
          logical_field_name: 'work_type',
          value: 'O'
        })
      );
      expect(mockDispatch).toHaveBeenCalledWith(stagesAction.resetNewAndOldFields());
      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields([
          'name_of_employer', 'nature_of_employer', 'job_title', 'office_phone_number', 'name_of_business'
        ])
      );
      expect(thunk).toBeNull();
    });

    it('should handle work type S (Salaried)', () => {
      (getUrl.getUserInputs as jest.Mock).mockReturnValue({
        nature_of_employer_a_1: 'Private',
        job_title_a_1: 'Developer',
        name_of_employer_a_1: 'Tech Corp',
        office_phone_number_a_1: '12345678'
      });
      
      const radioResidency = {
        logical_field_name: 'work_type',
        value: 'S'
      };
      const stages = [mockStageDetails];
      
      const result = getFields(stages, radioResidency);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields(['name_of_business', 'nature_of_employer', 'job_title', 'office_phone_number'])
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: ['name_of_business', 'nature_of_employer', 'job_title', 'office_phone_number'],
          newFields: ['name_of_employer', 'nature_of_employer', 'job_title', 'office_phone_number'],
          value: {
            nature_of_employer_a_1: 'Private',
            job_title_a_1: 'Developer',
            name_of_employer_a_1: 'Tech Corp',
            office_phone_number_a_1: '12345678'
          }
        })
      );
    });

    it('should handle work type E (Self-Employed)', () => {
      const radioResidency = {
        logical_field_name: 'work_type',
        value: 'E'
      };
      const stages = [mockStageDetails];
      
      const result = getFields(stages, radioResidency);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields(['name_of_employer', 'nature_of_employer', 'job_title', 'office_phone_number'])
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: ['name_of_employer', 'nature_of_employer', 'job_title', 'office_phone_number'],
          newFields: ['name_of_business', 'nature_of_employer', 'job_title', 'office_phone_number'],
          value: expect.any(Object)
        })
      );
    });
  });

  describe('FATCA Declaration Logic', () => {
    it('should handle casa_fatca_declaration', () => {
      const radioResidency = {
        logical_field_name: 'casa_fatca_declaration',
        value: 'Y'
      };
      const stages = [mockStageDetails];
      
      const result = getFields(stages, radioResidency);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: [],
          newFields: ['casa_fatca_declaration'],
          value: 'Y'
        })
      );
    });
  });

  describe('Preferred Limit Logic', () => {
    beforeEach(() => {
      (FindIndex as jest.Mock).mockReturnValue(0);
    });

    it('should handle preferred_limit with value 0', () => {
      const radioResidency = {
        logical_field_name: 'preferred_limit',
        value: '0'
      };
      const stages = [mockStageDetails];
      
      const result = getFields(stages, radioResidency);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.resetDefaultValue({
          logical_field_name: 'preferred_limit',
          radioResidency: '0'
        })
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields(['preferred_credit_limit', 'credit_limit_consent_info_5'])
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: ['preferred_credit_limit', 'credit_limit_consent_info_5'],
          newFields: ['credit_limit_consent_info_8'],
          value: ''
        })
      );
    });

    it('should handle preferred_limit with value 1', () => {
      const radioResidency = {
        logical_field_name: 'preferred_limit',
        value: '1'
      };
      const stages = [mockStageDetails];
      
      const result = getFields(stages, radioResidency);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields(['credit_limit_consent_info_8'])
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: ['credit_limit_consent_info_8'],
          newFields: ['preferred_credit_limit', 'credit_limit_consent_info_5'],
          value: ''
        })
      );
    });
  });

  describe('Credit Limit Consent Logic', () => {
    beforeEach(() => {
      (FindIndex as jest.Mock).mockReturnValue(0);
      (getProductCategory as jest.Mock).mockReturnValue('CC');
      (getUrl.getJourneyType as jest.Mock).mockReturnValue('NORMAL');
    });

    it('should handle credit_limit_consent with value Y', () => {
      const radioResidency = {
        logical_field_name: 'credit_limit_consent',
        value: 'Y'
      };
      const stages = [mockStageDetails];
      const bancaSelector = {
        eligible_banca_insurances: ['life', 'health']
      };
      
      const result = getFields(stages, radioResidency, undefined, undefined, bancaSelector);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.resetDefaultValue({
          logical_field_name: 'credit_limit_consent',
          radioResidency: 'Y'
        })
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields([
          'embossed_name', 'myinfo_data_cli', 'insurance_consent_life', 'insurance_consent_health'
        ])
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: ['embossed_name', 'myinfo_data_cli', 'insurance_consent_life', 'insurance_consent_health'],
          newFields: ['work_type'],
          value: ''
        })
      );
    });

    it('should handle credit_limit_consent with value N and banca applicable', () => {
      const radioResidency = {
        logical_field_name: 'credit_limit_consent',
        value: 'N'
      };
      const stages = [mockStageDetails];
      const bancaSelector = {
        eligible_banca_insurances: ['life']
      };
      
      const result = getFields(stages, radioResidency, undefined, undefined, bancaSelector);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields([
          'work_type', 'name_of_employer', 'name_of_employer_other', 'name_of_business',
          'job_title', 'nature_of_employer', 'myinfo_data_cli', 'office_phone_number'
        ])
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: [
            'work_type', 'name_of_employer', 'name_of_employer_other', 'name_of_business',
            'job_title', 'nature_of_employer', 'myinfo_data_cli', 'office_phone_number'
          ],
          newFields: ['embossed_name', 'insurance_consent_life'],
          value: ''
        })
      );
    });

    it('should handle credit_limit_consent with value N for ETC PL journey', () => {
      (getUrl.getJourneyType as jest.Mock).mockReturnValue('ETC');
      (getProductCategory as jest.Mock).mockReturnValue('PL');
      
      const radioResidency = {
        logical_field_name: 'credit_limit_consent',
        value: 'N'
      };
      const stages = [mockStageDetails];
      const bancaSelector = {
        eligible_banca_insurances: ['life']
      };
      
      const result = getFields(stages, radioResidency, undefined, undefined, bancaSelector);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: [
            'work_type', 'name_of_employer', 'name_of_employer_other', 'name_of_business',
            'job_title', 'nature_of_employer', 'myinfo_data_cli', 'office_phone_number'
          ],
          newFields: ['insurance_consent_life'],
          value: ''
        })
      );
    });
  });

  describe('Transfer/Deposit Logic', () => {
    beforeEach(() => {
      (FindIndex as jest.Mock).mockReturnValue(0);
    });

    it('should handle deposit_loan_to with SCB Account', () => {
      const radioResidency = {
        logical_field_name: 'deposit_loan_to',
        value: 'SCB Account'
      };
      const stages = [mockStageDetails];
      
      const result = getFields(stages, radioResidency);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields([
          'other_bank_name', 'other_bank_account_bt', 'reenter_other_bank_account_bt',
          'other_bank_credit_card_bt', 'reenter_other_bank_credit_card_bt', 'enter_account_info'
        ])
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: [
            'other_bank_name', 'other_bank_account_bt', 'reenter_other_bank_account_bt',
            'other_bank_credit_card_bt', 'reenter_other_bank_credit_card_bt'
          ],
          newFields: ['scb_account_no', 're_enter_scb_account_no', 'enter_account_info'],
          value: ''
        })
      );
    });

    it('should handle Transfer_amount_to with Other Bank Account', () => {
      const radioResidency = {
        logical_field_name: 'Transfer_amount_to',
        value: 'Other Bank Account'
      };
      const stages = [mockStageDetails];
      
      const result = getFields(stages, radioResidency);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: [
            'scb_account_no', 're_enter_scb_account_no', 'enter_account_info',
            'other_bank_credit_card_bt', 'reenter_other_bank_credit_card_bt'
          ],
          newFields: ['other_bank_name', 'other_bank_account_bt', 'reenter_other_bank_account_bt'],
          value: ''
        })
      );
    });

    it('should handle transfer_amount_to with Other Bank Credit Card', () => {
      const radioResidency = {
        logical_field_name: 'transfer_amount_to',
        value: 'Other Bank Credit Card'
      };
      const stages = [mockStageDetails];
      
      const result = getFields(stages, radioResidency);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: [
            'scb_account_no', 're_enter_scb_account_no', 'other_bank_account_bt', 'reenter_other_bank_account_bt'
          ],
          newFields: ['other_bank_name', 'other_bank_credit_card_bt', 'reenter_other_bank_credit_card_bt'],
          value: ''
        })
      );
    });
  });

  describe('Phoenix Limit Porting Logic', () => {
    beforeEach(() => {
      (FindIndex as jest.Mock).mockReturnValue(0);
    });

    it('should handle Customer_Agree_for_Phoenix_Limit_porting with Y', () => {
      const radioResidency = {
        logical_field_name: 'Customer_Agree_for_Phoenix_Limit_porting',
        value: 'Y'
      };
      const stages = [mockStageDetails];
      
      const result = getFields(stages, radioResidency);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.resetDefaultValue({
          logical_field_name: 'Customer_Agree_for_Phoenix_Limit_porting',
          radioResidency: 'Y'
        })
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields([])
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: [],
          newFields: ['min_limit'],
          value: ''
        })
      );
    });

    it('should handle Customer_Agree_for_Phoenix_Limit_porting with N', () => {
      const radioResidency = {
        logical_field_name: 'Customer_Agree_for_Phoenix_Limit_porting',
        value: 'N'
      };
      const stages = [mockStageDetails];
      
      const result = getFields(stages, radioResidency);
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields(['min_limit'])
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: ['min_limit'],
          newFields: [],
          value: ''
        })
      );
    });
  });

  describe('Employer Other Logic', () => {
    beforeEach(() => {
      (FindIndex as jest.Mock).mockReturnValue(0);
    });

    it('should handle employerOther as name_of_employer_other', () => {
      const stages = [mockStageDetails];
      
      const result = getFields(stages, null, 'name_of_employer_other');
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: [],
          newFields: ['name_of_employer_other'],
          value: ''
        })
      );
    });

    it('should handle employerOther as fields', () => {
      const stages = [mockStageDetails];
      
      const result = getFields(stages, null, 'fields');
      const thunk = result(mockDispatch);
      
      expect(mockDispatch).toHaveBeenCalledWith(
        fieldErrorAction.removeMandatoryFields(['name_of_employer_other'])
      );
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.removeAddToggleField({
          removeFields: ['name_of_employer_other'],
          newFields: [],
          value: ''
        })
      );
      expect(thunk).toBeNull();
    });
  });

  describe('Edge Cases', () => {
    it('should handle empty stages array', () => {
      const result = getFields([], null);
      const thunk = result(mockDispatch);
      
      expect(thunk).toBeNull();
    });

    it('should handle stages without stageInfo', () => {
      const stages = [{ stageId: 'test', stageInfo: null }];
      
      const result = getFields(stages, null);
      const thunk = result(mockDispatch);
      
      expect(thunk).toBeNull();
    });

    it('should handle preferred_contact_per_email with no value', () => {
      const radioResidency = {
        logical_field_name: 'preferred_contact_per_email',
        value: null
      };
      const stages = [mockStageDetails];
      
      const result = getFields(stages, radioResidency);
      result(mockDispatch);
      
      expect(radioResidency.value).toBe('COL');
    });

    it('should handle preferred_limit with no value', () => {
      const radioResidency = {
        logical_field_name: 'preferred_limit',
        value: null
      };
      const stages = [mockStageDetails];
      
      const result = getFields(stages, radioResidency);
      result(mockDispatch);
      
      expect(radioResidency.value).toBe('0');
    });

    it('should return null when no ssfStages or fields', () => {
      const stages = [mockStageDetails];
      
      const result = getFields(stages, null);
      const thunk = result(mockDispatch);
      
      expect(thunk).toBeNull();
    });

    it('should handle undefined stageIndex', () => {
      (FindIndex as jest.Mock).mockReturnValue(undefined);
      const stages = [mockStageDetails];
      
      const result = getFields(stages, null);
      const thunk = result(mockDispatch);
      
      expect(thunk).toBeNull();
    });
  });

  describe('Default Stage ID Handling', () => {
    it('should handle default stage ID case', () => {
      const stages = [{
        ...mockStageDetails,
        stageId: 'custom-stage',
        stageInfo: {
          ...mockStageDetails.stageInfo,
          fieldmetadata: {
            data: {
              stages: [
                {
                  stageId: 'custom-stage',
                  fields: [{ logical_field_name: 'test_field' }]
                }
              ]
            }
          }
        }
      }];
      
      const result = getFields(stages, null);
      const thunk = result(mockDispatch);
      
      expect(thunk).toBeNull();
    });
  });
});
