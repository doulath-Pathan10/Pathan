import Rules_ad_1 from './Rules_ad_1';
import rulesUtils from './rules.utils';

// Mock the rulesUtils module
jest.mock('./rules.utils');

// Mock localStorage
const localStorageMock = (() => {
  let store: Record<string, string> = {};
  return {
    getItem: (key: string) => store[key] || null,
    setItem: (key: string, value: string) => {
      store[key] = value.toString();
    },
    clear: () => {
      store = {};
    },
  };
})();

Object.defineProperty(window, 'localStorage', {
  value: localStorageMock,
});

describe('Rules_ad_1 Utility Function', () => {
  const baseProps = [
    [
      {
        field_set_name: 'Additional Details',
        fields: [
          { logical_field_name: 'reason_for_account_rwb', component_type: 'Text' },
          { logical_field_name: 'Initial_deposit_rwb', component_type: 'Text' },
          { logical_field_name: 'source_of_fund_rwb', component_type: 'Text' },
        ],
      },
      {
        field_set_name: 'Banking Services',
        fields: [
          { logical_field_name: 'debit_card_request_rwb', component_type: 'Checkbox' },
          { logical_field_name: 'issuance_type', component_type: 'SelectionBox' },
          { logical_field_name: 'embossed_dc_name_rwb', component_type: 'Text' },
          { logical_field_name: 'existing_account_no_dc', component_type: 'Text' },
          { logical_field_name: 'cheque_book_request_rwb', component_type: 'Checkbox' },
        ],
      },
      {
        field_set_name: 'Time Deposit Details',
        fields: [
          { logical_field_name: 'td_product_currency_value', component_type: 'Text' },
          { logical_field_name: 'td_depoist_amount', component_type: 'Text' },
          { logical_field_name: 'td_term_type', component_type: 'SelectionBox' },
          { logical_field_name: 'td_fund_account_etc_currency', component_type: 'Text' },
          { logical_field_name: 'td_fund_account_new_currency', component_type: 'Text' },
        ],
      },
    ],
  ];

  const baseStageInfo = {
    applicants: {
      no_of_accounts_rwb_a_1: 1,
    },
    products: [{ product_category: 'CA', product_type: '310' }],
  };

  beforeEach(() => {
    localStorage.clear();
    (rulesUtils as jest.Mock).mockClear();
  });

  // Test case 1: Empty products array
  it('should handle empty products array', () => {
    localStorage.setItem('products', '[]');
    Rules_ad_1(baseProps, baseStageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 2: Single product with no special conditions
  it('should handle single product case', () => {
    localStorage.setItem('products', JSON.stringify([{ product_category_name: 'CA', name: 'Current Account' }]));
    Rules_ad_1(baseProps, baseStageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 3: Multiple products with product type 307 and 318
  it('should handle product types 307 and 318', () => {
    localStorage.setItem(
      'products',
      JSON.stringify([
        { product_category_name: 'CA', name: 'Current Account' },
        { product_category_name: 'CA', name: 'Savings Account' },
      ])
    );
    const stageInfo = {
      ...baseStageInfo,
      products: [
        { product_type: '307', product_category: 'CA' },
        { product_type: '318', product_category: 'CA' },
      ],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 4: Multiple products with product type 339 and 318
  it('should handle product types 339 and 318', () => {
    localStorage.setItem(
      'products',
      JSON.stringify([
        { product_category_name: 'CA', name: 'Current Account' },
        { product_category_name: 'CA', name: 'Premium Account' },
      ])
    );
    const stageInfo = {
      ...baseStageInfo,
      products: [
        { product_type: '339', product_category: 'CA' },
        { product_type: '318', product_category: 'CA' },
      ],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 5: Multiple products with product type 504 and 516
  it('should handle product types 504 and 516', () => {
    localStorage.setItem(
      'products',
      JSON.stringify([
        { product_category_name: 'CA', name: 'Business Account' },
        { product_category_name: 'CA', name: 'Corporate Account' },
      ])
    );
    const stageInfo = {
      ...baseStageInfo,
      products: [
        { product_type: '504', product_category: 'CA' },
        { product_type: '516', product_category: 'CA' },
      ],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 6: Multiple products with product type 504 and 507
  it('should handle product types 504 and 507', () => {
    localStorage.setItem(
      'products',
      JSON.stringify([
        { product_category_name: 'CA', name: 'Business Account' },
        { product_category_name: 'CA', name: 'Enterprise Account' },
      ])
    );
    const stageInfo = {
      ...baseStageInfo,
      products: [
        { product_type: '504', product_category: 'CA' },
        { product_type: '507', product_category: 'CA' },
      ],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 7: Repeat count with product type 310
  it('should handle repeat count with product type 310', () => {
    localStorage.setItem('products', JSON.stringify([{ product_category_name: 'CA', name: 'Current Account' }]));
    const stageInfo = {
      ...baseStageInfo,
      applicants: {
        no_of_accounts_rwb_a_1: 3,
      },
      products: [{ product_type: '310', product_category: 'CA' }],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 8: Repeat count with product type 307
  it('should handle repeat count with product type 307', () => {
    localStorage.setItem('products', JSON.stringify([{ product_category_name: 'CA', name: 'Current Account' }]));
    const stageInfo = {
      ...baseStageInfo,
      applicants: {
        no_of_accounts_rwb_a_1: 2,
      },
      products: [{ product_type: '307', product_category: 'CA' }],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 9: Repeat count with product type 324
  it('should handle repeat count with product type 324', () => {
    localStorage.setItem('products', JSON.stringify([{ product_category_name: 'CA', name: 'Current Account' }]));
    const stageInfo = {
      ...baseStageInfo,
      applicants: {
        no_of_accounts_rwb_a_1: 4,
      },
      products: [{ product_type: '324', product_category: 'CA' }],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 10: Time Deposit product
  it('should handle TD product category', () => {
    localStorage.setItem('products', JSON.stringify([{ product_category_name: 'TD', name: 'Time Deposit' }]));
    const stageInfo = {
      ...baseStageInfo,
      products: [{ product_category: 'TD' }],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 11: Multiple products including TD
  it('should handle multiple products with TD', () => {
    localStorage.setItem(
      'products',
      JSON.stringify([
        { product_category_name: 'CA', name: 'Current Account' },
        { product_category_name: 'TD', name: 'Time Deposit' },
      ])
    );
    const stageInfo = {
      ...baseStageInfo,
      products: [
        { product_type: '307', product_category: 'CA' },
        { product_category: 'TD' },
      ],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 12: TD with product type 337
  it('should handle TD with product type 337', () => {
    localStorage.setItem(
      'products',
      JSON.stringify([
        { product_category_name: 'TD', name: 'Premium Deposit' },
        { product_category_name: 'CA', name: 'Current Account' },
      ])
    );
    const stageInfo = {
      ...baseStageInfo,
      products: [
        { product_type: '337', product_category: 'TD' },
        { product_type: '310', product_category: 'CA' },
      ],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 13: TD with product type 337 and 329
  it('should handle TD with product types 337 and 329', () => {
    localStorage.setItem(
      'products',
      JSON.stringify([
        { product_category_name: 'TD', name: 'Premium Deposit' },
        { product_category_name: 'CA', name: 'Business Account' },
      ])
    );
    const stageInfo = {
      ...baseStageInfo,
      products: [
        { product_type: '337', product_category: 'TD' },
        { product_type: '329', product_category: 'CA' },
      ],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 14: TD with product type 337 and 339
  it('should handle TD with product types 337 and 339', () => {
    localStorage.setItem(
      'products',
      JSON.stringify([
        { product_category_name: 'TD', name: 'Premium Deposit' },
        { product_category_name: 'CA', name: 'Enterprise Account' },
      ])
    );
    const stageInfo = {
      ...baseStageInfo,
      products: [
        { product_type: '337', product_category: 'TD' },
        { product_type: '339', product_category: 'CA' },
      ],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 15: Product types 514 and 504
  it('should handle product types 514 and 504', () => {
    localStorage.setItem(
      'products',
      JSON.stringify([
        { product_category_name: 'CA', name: 'Corporate Account' },
        { product_category_name: 'CA', name: 'Business Plus' },
      ])
    );
    const stageInfo = {
      ...baseStageInfo,
      products: [
        { product_type: '514', product_category: 'CA' },
        { product_type: '504', product_category: 'CA' },
      ],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 16: Product types 514 and 507
  it('should handle product types 514 and 507', () => {
    localStorage.setItem(
      'products',
      JSON.stringify([
        { product_category_name: 'CA', name: 'Corporate Account' },
        { product_category_name: 'CA', name: 'Enterprise Plus' },
      ])
    );
    const stageInfo = {
      ...baseStageInfo,
      products: [
        { product_type: '514', product_category: 'CA' },
        { product_type: '507', product_category: 'CA' },
      ],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 17: Product types 516 and 507
  it('should handle product types 516 and 507', () => {
    localStorage.setItem(
      'products',
      JSON.stringify([
        { product_category_name: 'CA', name: 'Global Account' },
        { product_category_name: 'CA', name: 'Enterprise Plus' },
      ])
    );
    const stageInfo = {
      ...baseStageInfo,
      products: [
        { product_type: '516', product_category: 'CA' },
        { product_type: '507', product_category: 'CA' },
      ],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 18: CA product with type 317
  it('should handle CA product with type 317', () => {
    localStorage.setItem('products', JSON.stringify([{ product_category_name: 'CA', name: 'Premium Account' }]));
    const stageInfo = {
      ...baseStageInfo,
      products: [{ product_type: '317', product_category: 'CA' }],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 19: CA product with type 314
  it('should handle CA product with type 314', () => {
    localStorage.setItem('products', JSON.stringify([{ product_category_name: 'CA', name: 'Basic Account' }]));
    const stageInfo = {
      ...baseStageInfo,
      products: [{ product_type: '314', product_category: 'CA' }],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 20: Verify field modifications for TD products
  it('should modify fields correctly for TD products', () => {
    localStorage.setItem('products', JSON.stringify([{ product_category_name: 'TD', name: 'Time Deposit' }]));
    const stageInfo = {
      ...baseStageInfo,
      products: [{ product_category: 'TD' }],
    };
    
    Rules_ad_1(baseProps, stageInfo);
    
    const filteredFields = (rulesUtils as jest.Mock).mock.calls[0][0][0];
    const validationObj = (rulesUtils as jest.Mock).mock.calls[0][1];
    
    // Verify field modification
    const tdCurrencyField = filteredFields
      .find((fs: any) => fs.field_set_name === 'Time Deposit Details')
      ?.fields.find((f: any) => f.logical_field_name === 'td_product_currency_value');
    expect(tdCurrencyField?.component_type).toBe('SelectionBox');
    
    // Verify hidden fields
    expect(validationObj.hidden[0]).toContain('debit_card_request_rwb');
    expect(validationObj.hidden[0]).toContain('existing_account_no_dc');
    expect(validationObj.hidden[0]).toContain('issuance_type');
    
    // Verify modifyVisibility fields
    expect(validationObj.modifyVisibility[0]).toContain('td_product_currency_value');
    expect(validationObj.modifyVisibility[0]).toContain('td_depoist_amount');
  });

  // Test case 21: Verify field modifications for multiple products with TD
  it('should modify fields correctly for multiple products with TD', () => {
    localStorage.setItem(
      'products',
      JSON.stringify([
        { product_category_name: 'CA', name: 'Current Account' },
        { product_category_name: 'TD', name: 'Time Deposit' },
      ])
    );
    const stageInfo = {
      ...baseStageInfo,
      products: [
        { product_type: '307', product_category: 'CA' },
        { product_category: 'TD' },
      ],
    };
    
    Rules_ad_1(baseProps, stageInfo);
    
    const validationObj = (rulesUtils as jest.Mock).mock.calls[0][1];
    expect(validationObj.hidden[0]).toContain('embossed_dc_name_rwb');
  });

  // Test case 22: Verify empty props handling
  it('should handle empty props', () => {
    localStorage.setItem('products', JSON.stringify([{ product_category_name: 'CA', name: 'Current Account' }]));
    Rules_ad_1([], baseStageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 23: Verify undefined no_of_accounts_rwb_a_1
  it('should handle undefined no_of_accounts_rwb_a_1', () => {
    localStorage.setItem('products', JSON.stringify([{ product_category_name: 'CA', name: 'Current Account' }]));
    const stageInfo = {
      applicants: {},
      products: [{ product_type: '310', product_category: 'CA' }],
    };
    Rules_ad_1(baseProps, stageInfo);
    expect(rulesUtils).toHaveBeenCalled();
  });

  // Test case 24: Verify all possible hidden fields for product type 307
  it('should hide all specified fields for product type 307', () => {
    localStorage.setItem('products', JSON.stringify([{ product_category_name: 'CA', name: 'Current Account' }]));
    const stageInfo = {
      ...baseStageInfo,
      applicants: {
        no_of_accounts_rwb_a_1: 3,
      },
      products: [{ product_type: '307', product_category: 'CA' }],
    };
    
    Rules_ad_1(baseProps, stageInfo);
    
    const validationObj = (rulesUtils as jest.Mock).mock.calls[0][1];
    expect(validationObj.hidden[0]).toEqual(
      expect.arrayContaining([
        'reason_for_account_rwb',
        'source_of_fund_rwb',
        'reason_for_account_rwb_2',
        'Initial_deposit_rwb_2',
        'source_of_fund_rwb_2',
        'reason_for_account_rwb_3',
        'Initial_deposit_rwb_3',
        'source_of_fund_rwb_3',
      ])
    );
  });
});
