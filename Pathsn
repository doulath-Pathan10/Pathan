import { getFields } from './getFields';
import { getUrl } from '../../utils/common/change.utils';
import { fieldErrorAction, stagesAction } from '../../utils/store';

// Mock dependencies
jest.mock('../../utils/common/change.utils', () => ({
  getUrl: {
    getJourneyType: jest.fn()
  }
}));

jest.mock('../../utils/store', () => ({
  fieldErrorAction: {
    getMandatoryFields: jest.fn()
  },
  stagesAction: {
    removeAddToggleField: jest.fn()
  }
}));

describe('getFields', () => {
  const mockGetStages = [
    {
      stageInfo: {
        fieldmetadata: {
          data: {
            stages: [
              {},
              {
                fields: [
                  {
                    logical_field_name: 'no_of_tax_residency_country',
                    component_type: 'Text',
                    rwb_label_name: 'Tax Residency Count',
                    hide_remove_btn: false
                  },
                  {
                    logical_field_name: 'country_of_tax_residence',
                    component_type: 'Text',
                    rwb_label_name: 'Tax Residence Country',
                    hide_remove_btn: false
                  },
                  {
                    logical_field_name: 'tax_id_no',
                    component_type: 'Text',
                    rwb_label_name: 'Tax ID',
                    hide_remove_btn: false
                  },
                  {
                    logical_field_name: 'crs_reason_code',
                    component_type: 'Text',
                    rwb_label_name: 'CRS Reason',
                    hide_remove_btn: false
                  },
                  {
                    logical_field_name: 'crs_comments',
                    component_type: 'Text',
                    rwb_label_name: 'CRS Comments',
                    hide_remove_btn: false
                  }
                ]
              }
            ]
          }
        }
      }
    }
  ];

  const mockTaxSelector = {
    fields: [
      'no_of_tax_residency_country',
      'country_of_tax_residence_1',
      'country_of_tax_residence_2',
      'tax_id_no_1',
      'tax_id_no_2',
      'crs_reason_code_1',
      'crs_comments_1',
      'crs_comments_2'
    ]
  };

  const mockApplicantsSelector = {
    'country_of_tax_residence_1_a_1': 'US',
    'tax_id_no_2_a_1': '12345',
    'crs_comments_1_a_1': 'Test comment'
  };

  const mockDispatch = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    (getUrl.getJourneyType as jest.Mock).mockReturnValue('');
  });

  describe('Field Cloning and Transformation', () => {
    it('should clone and transform no_of_tax_residency_country field', async () => {
      const action = getFields(
        mockGetStages,
        { fields: ['no_of_tax_residency_country'] },
        'add',
        {}
      );
      
      const result = await action(mockDispatch);
      
      expect(result[0]).toEqual({
        logical_field_name: 'no_of_tax_residency_country',
        component_type: 'Selection Box',
        rwb_label_name: 'Tax Residency Count',
        hide_remove_btn: false
      });
    });

    it('should clone and transform country_of_tax_residence field with index', async () => {
      const action = getFields(
        mockGetStages,
        { fields: ['country_of_tax_residence_1'] },
        'add',
        {}
      );
      
      const result = await action(mockDispatch);
      
      expect(result[0]).toEqual({
        logical_field_name: 'country_of_tax_residence_1',
        component_type: 'Selection Box',
        rwb_label_name: 'Tax Residence Country',
        hide_remove_btn: false
      });
    });

    it('should clone and transform tax_id_no field with index', async () => {
      const action = getFields(
        mockGetStages,
        { fields: ['tax_id_no_1'] },
        'add',
        {}
      );
      
      const result = await action(mockDispatch);
      
      expect(result[0]).toEqual({
        logical_field_name: 'tax_id_no_1',
        component_type: 'Text',
        rwb_label_name: 'Tax ID',
        hide_remove_btn: false
      });
    });

    it('should clone and transform crs_reason_code field with index', async () => {
      const action = getFields(
        mockGetStages,
        { fields: ['crs_reason_code_1'] },
        'add',
        {}
      );
      
      const result = await action(mockDispatch);
      
      expect(result[0]).toEqual({
        logical_field_name: 'crs_reason_code_1',
        component_type: 'Selection Box',
        rwb_label_name: 'CRS Reason',
        hide_remove_btn: false
      });
    });

    it('should clone and transform crs_comments field with index', async () => {
      const action = getFields(
        mockGetStages,
        { fields: ['crs_comments_1'] },
        'add',
        {}
      );
      
      const result = await action(mockDispatch);
      
      expect(result[0]).toEqual({
        logical_field_name: 'crs_comments_1',
        component_type: 'Text',
        rwb_label_name: 'CRS Comments',
        hide_remove_btn: false
      });
    });
  });

  describe('Journey Type Handling', () => {
    it('should set hide_remove_btn to true when journeyType exists', async () => {
      (getUrl.getJourneyType as jest.Mock).mockReturnValue('ECC');
      
      const action = getFields(
        mockGetStages,
        { fields: ['no_of_tax_residency_country'] },
        'add',
        {}
      );
      
      const result = await action(mockDispatch);
      
      expect(result[0].hide_remove_btn).toBe(true);
    });
  });

  describe('Dispatch Actions', () => {
    it('should dispatch getMandatoryFields with correct fields', async () => {
      const action = getFields(
        mockGetStages,
        mockTaxSelector,
        'add',
        {}
      );
      
      await action(mockDispatch);
      
      expect(fieldErrorAction.getMandatoryFields).toHaveBeenCalledWith([
        'no_of_tax_residency_country',
        'country_of_tax_residence_1',
        'country_of_tax_residence_2',
        'tax_id_no_1',
        'tax_id_no_2',
        'crs_reason_code_1',
        'crs_comments_1',
        'crs_comments_2'
      ]);
    });

    it('should dispatch removeAddToggleField with correct values', async () => {
      const action = getFields(
        mockGetStages,
        mockTaxSelector,
        'add',
        mockApplicantsSelector
      );
      
      await action(mockDispatch);
      
      expect(stagesAction.removeAddToggleField).toHaveBeenCalledWith({
        removeFields: [],
        newFields: [
          'no_of_tax_residency_country',
          'country_of_tax_residence_1',
          'country_of_tax_residence_2',
          'tax_id_no_1',
          'tax_id_no_2',
          'crs_reason_code_1',
          'crs_comments_1',
          'crs_comments_2'
        ],
        value: {
          'country_of_tax_residence_1_a_1': 'US',
          'tax_id_no_2_a_1': '12345',
          'crs_comments_1_a_1': 'Test comment'
        }
      });
    });

    it('should not dispatch actions when no fields are processed', async () => {
      const action = getFields(
        mockGetStages,
        { fields: [] },
        'add',
        {}
      );
      
      await action(mockDispatch);
      
      expect(fieldErrorAction.getMandatoryFields).not.toHaveBeenCalled();
      expect(stagesAction.removeAddToggleField).not.toHaveBeenCalled();
    });
  });

  describe('Edge Cases', () => {
    it('should handle missing fields in stageInfo', async () => {
      const emptyStages = [{
        stageInfo: {
          fieldmetadata: {
            data: {
              stages: [{}, {}] // Empty fields array
            }
          }
        }
      }];
      
      const action = getFields(
        emptyStages,
        { fields: ['no_of_tax_residency_country'] },
        'add',
        {}
      );
      
      const result = await action(mockDispatch);
      
      expect(result).toEqual([]);
    });

    it('should handle undefined field metadata', async () => {
      const invalidStages = [{
        stageInfo: {} // No fieldmetadata
      }];
      
      const action = getFields(
        invalidStages,
        { fields: ['no_of_tax_residency_country'] },
        'add',
        {}
      );
      
      const result = await action(mockDispatch);
      
      expect(result).toEqual([]);
    });

    it('should handle unknown field types', async () => {
      const action = getFields(
        mockGetStages,
        { fields: ['unknown_field'] },
        'add',
        {}
      );
      
      const result = await action(mockDispatch);
      
      expect(result).toEqual([]);
    });
  });
});
