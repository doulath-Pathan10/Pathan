import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import LoanDetailsInfo from './LoanDetailsInfo';
import { rateAction } from '../../../utils/store/rate-slice';

// Mock the validateService and Model component
jest.mock('../../../services/validation-service', () => ({
  formateCurrency: jest.fn((value) => value),
  getEIRNew: jest.fn(() => '6,5'),
}));

jest.mock('../model/model', () => () => <div data-testid="model">Model</div>);

const mockStore = configureStore([]);

describe('LoanDetailsInfo Component', () => {
  const initialState = {
    stages: {
      userInput: {
        applicants: {
          loan_tenor_a_1: '12',
          required_loan_amount_a_1: '10000',
          Transfer_amount_a_1: '5000',
        },
      },
      updatedStageInputs: [],
      stages: [
        {
          stageId: 'ad-1',
          stageInfo: {
            products: [
              { product_type: '280', campaign: 'TEST', product_category: 'PL' },
              { product_type: '210', campaign: 'TEST', product_category: 'CC' }
            ],
            applicants: {
              staff_category_a_1: 'N',
              rbp_applied_rate_a_1: '5',
            },
          },
        },
      ],
      journeyType: 'ETC',
    },
    loanTopUp: {
      existingLoanTopUp: false,
      topupAmount: '',
      interestRate: '5',
    },
    rate: {
      ar: '5',
      eir: '6',
      updatedInterestRates: [
        { tenure: '12', ProcessingFee: '1', EIR: '6' }
      ],
      ipEirRate: [],
    },
  };

  let store;

  beforeEach(() => {
    store = mockStore(initialState);
    store.dispatch = jest.fn();
  });

  it('renders without crashing for product type 280', () => {
    render(
      <Provider store={store}>
        <LoanDetailsInfo />
      </Provider>
    );
    
    expect(screen.getByText(/SGD 10000 \/ 12 months/)).toBeInTheDocument();
  });

  it('displays correct repayment information for PL product', () => {
    render(
      <Provider store={store}>
        <LoanDetailsInfo />
      </Provider>
    );
    
    expect(screen.getByText('SGD 10000 / 12 months')).toBeInTheDocument();
    expect(screen.getByText('-SGD 199')).toBeInTheDocument();
    expect(screen.getByText('5%')).toBeInTheDocument();
    expect(screen.getByText('6% p.a.')).toBeInTheDocument();
  });

  it('displays correct repayment information for CC product', () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        userInput: {
          applicants: {
            loan_tenor_a_1: '12',
            Transfer_amount_a_1: '5000',
          },
        },
      },
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <LoanDetailsInfo />
      </Provider>
    );
    
    expect(screen.getByText('SGD 5000')).toBeInTheDocument();
    expect(screen.getByText('+SGD 50')).toBeInTheDocument();
  });

  it('shows model when info icon is clicked', () => {
    render(
      <Provider store={store}>
        <LoanDetailsInfo />
      </Provider>
    );
    
    const infoIcons = screen.getAllByRole('button');
    fireEvent.click(infoIcons[0]);
    
    expect(screen.getByTestId('model')).toBeInTheDocument();
  });

  it('displays cashback when conditions are met', () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        userInput: {
          applicants: {
            loan_tenor_a_1: '12',
            required_loan_amount_a_1: '20000',
          },
        },
      },
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <LoanDetailsInfo />
      </Provider>
    );
    
    expect(screen.getByText('SGD 200')).toBeInTheDocument();
  });

  it('updates EIR and AR rates when tenure changes', () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        userInput: {
          applicants: {
            loan_tenor_a_1: '24',
            required_loan_amount_a_1: '10000',
          },
        },
      },
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <LoanDetailsInfo />
      </Provider>
    );
    
    expect(store.dispatch).toHaveBeenCalledWith(rateAction.updateEIR('6'));
    expect(store.dispatch).toHaveBeenCalledWith(rateAction.updateAR('5'));
  });

  it('uses loanTopUp interest rate when existingLoanTopUp is true', () => {
    const customState = {
      ...initialState,
      loanTopUp: {
        existingLoanTopUp: true,
        interestRate: '7',
      },
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <LoanDetailsInfo />
      </Provider>
    );
    
    expect(screen.getByText('7%')).toBeInTheDocument();
  });

  it('shows "No Cashback" when loan amount is below threshold', () => {
    const customState = {
      ...initialState,
      stages: {
        ...initialState.stages,
        userInput: {
          applicants: {
            loan_tenor_a_1: '12',
            required_loan_amount_a_1: '5000',
          },
        },
      },
    };
    
    store = mockStore(customState);
    
    render(
      <Provider store={store}>
        <LoanDetailsInfo />
      </Provider>
    );
    
    expect(screen.getByText('No Cashback')).toBeInTheDocument();
  });
});
