import { createElement } from "react";
import Dates from "../../../shared/components/dates/dates";
import Date from "../../../shared/components/dates/dates";
import Information from "../../../shared/components/information/information";
import MultiSelectionBox from "../../../shared/components/multi-selection-box/multi-selection-box";
import Number from "../../../shared/components/number/number";
import OtherMyinfo from "../../../shared/components/other-myinfo/other-myinfo";
import Phone from "../../../shared/components/phone/phone";
import RadioWithLabel from "../../../shared/components/radio-with-label/radio-with-label";
import SelectionBox from "../../../shared/components/selection-box/selection-box";
import Text from "../../../shared/components/text/text";
import Toggle from "../../../shared/components/toggle/toggle";
import TypeAhead from "../../../shared/components/type-ahead/type-ahead";
import { KeyWithAnyModel } from "../../../utils/model/common-model";
import Button from "../../../shared/components/button/button";
import Amount from "../../../shared/components/amount/amount";
import SliderWithLimit from "../../../shared/components/slider-with-limit/slider-with-limit";
import SliderWithCurrency from "../../../shared/components/slider-with-currency/slider-with-currency";
import { authenticateType } from "../../../utils/common/change.utils";
import Signature from "../../../shared/components/signature/signature";
// import ButtonGroup from "../../../shared/components/button-group/button-group";

const keysToComponentMap: KeyWithAnyModel = {
  Dates: Dates,
  RadioWithLabel: RadioWithLabel,
  Phone:Phone,
  Text: Text,
  SelectionBox: SelectionBox,
  MultiSelectionBox: MultiSelectionBox,
  Toggle: Toggle,
  Number: Number,
  Information: Information,
  OtherMyinfo: OtherMyinfo,
  TypeAhead: TypeAhead,
  Button: Button,
  Amount: Amount,
  SliderWithLimit: SliderWithLimit,
  SliderWithlimit: SliderWithLimit,
  SliderWithCurrency: SliderWithCurrency,
 // Display: Signature,
 Display:Text,
  // ButtonGroup: ButtonGroup,
  RateButton: Button,
  authorize: Toggle, 
  Date: Date,
  Infowithoutmodal:Information,
  PhoneAreaCode: Phone
};

const renderComponent = (
  currentSection: KeyWithAnyModel,
  _i: number,
  handleCallback: any,
  handleFieldDispatch: any,
  userInput: { [key: string]: string }
) => {
  /* istanbul ignore next */
  let component = currentSection.component_type.replace(/\s/g, "");
  if(currentSection.logical_field_name === "mobile_number_rwb"){
    keysToComponentMap['Phone']= SelectionBox;
  }else if(currentSection.logical_field_name === "mobile_number"){
    keysToComponentMap['Phone']=  Phone;
  }else if(currentSection.logical_field_name === "mobile_1"){
    keysToComponentMap['Phone']= SelectionBox;
  }else if(currentSection.logical_field_name === "mobile_1_add"){
    keysToComponentMap['Phone']=  Phone;
  }else if(currentSection.logical_field_name === "mobile_2"){
    keysToComponentMap['Phone']= SelectionBox;
  }else if(currentSection.logical_field_name === "mobile_2_add"){
    keysToComponentMap['Phone']=  Phone;
  }else if(currentSection.logical_field_name === "overseas_mobile1_contact_no"){
    keysToComponentMap['Phone']= SelectionBox;
  }else if(currentSection.logical_field_name === "overseas_mobile1"){
    keysToComponentMap['Phone']=  Phone;
  }else if(currentSection.logical_field_name === "overseas_mobile2_contact_no"){
    keysToComponentMap['Phone']= SelectionBox;
  }else if(currentSection.logical_field_name === "overseas_mobile2"){
    keysToComponentMap['Phone']=  Phone;
  }else if(currentSection.logical_field_name === "ofc1_number"){
    keysToComponentMap['PhoneAreaCode']= SelectionBox;
  }else if(currentSection.logical_field_name === "ofc1"){
    keysToComponentMap['Phone']=  Phone;
  }else if(currentSection.logical_field_name === "ofc2_number"){
    keysToComponentMap['PhoneAreaCode']= SelectionBox;
  }else if(currentSection.logical_field_name === "ofc2"){
    keysToComponentMap['Phone']=  Phone;
  }else if(currentSection.logical_field_name === "home_phone2_number"){
    keysToComponentMap['Phone']= SelectionBox;
  }else if(currentSection.logical_field_name === "home_phone2"){
    keysToComponentMap['Phone']=  Phone;
  }else if(currentSection.logical_field_name === "office_phone1_number"){
    keysToComponentMap['Phone']= SelectionBox;
  }else if(currentSection.logical_field_name === "office_phone1"){
    keysToComponentMap['Phone']=  Phone;
  }else if(currentSection.logical_field_name === "office_phone2_number"){
    keysToComponentMap['Phone']= SelectionBox;
  }else if(currentSection.logical_field_name === "office_phone2"){
    keysToComponentMap['Phone']=  Phone;
  }else if(currentSection.logical_field_name === "ohph1_number"){
    keysToComponentMap['PhoneAreaCode']= SelectionBox;
  }else if(currentSection.logical_field_name === "ohph1"){
    keysToComponentMap['Phone']=  Phone;
  }else if(currentSection.logical_field_name === "ohph2_number"){
    keysToComponentMap['PhoneAreaCode']= SelectionBox;
  }else if(currentSection.logical_field_name === "ohph2"){
    keysToComponentMap['Phone']=  Phone;
  }
  else if(currentSection.logical_field_name === "home_phone_number_rwb"){
    keysToComponentMap['Phone']= SelectionBox;
  }
  else if(currentSection.logical_field_name === "home_phone_number"){
    keysToComponentMap['Phone']=  Phone;
  }
  /* istanbul ignore else */
  if (typeof keysToComponentMap[component] !== "undefined") {
    return createElement(keysToComponentMap[component], {
      data: currentSection,
      key: currentSection.logical_field_name,
      handleCallback: handleCallback,
      handleFieldDispatch: handleFieldDispatch,
      value: userInput,
    });
  }
};

export default renderComponent;

Please write test cases using jest with RTL
