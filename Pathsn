import React from 'react';
import { render, screen, act } from '@testing-library/react';
import { Provider } from 'react-redux';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import { store } from './utils/store/store';
import * as trackEvents from './services/track-events';

// Mock child components that might cause issues
jest.mock('./router/main', () => () => <div>Main Component</div>);
jest.mock('./shared/components/spinner/spinner', () => () => <div>Spinner Component</div>);

// Mock the activity detector
jest.mock('react-activity-detector', () => ({
  __esModule: true,
  default: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,
}));

describe('App Component', () => {
  const renderApp = (mockStore = store) => {
    return render(
      <Provider store={mockStore}>
        <BrowserRouter>
          <App />
        </BrowserRouter>
      </Provider>
    );
  };

  beforeEach(() => {
    jest.clearAllMocks();
    // Reset the store to initial state
    store.dispatch({ type: 'RESET' });
  });

  it('should render without crashing', () => {
    renderApp();
    expect(screen.getByText('Main Component')).toBeInTheDocument();
  });

  it('should disable right click', () => {
    const preventDefault = jest.fn();
    const addEventListenerSpy = jest.spyOn(window, 'addEventListener');
    
    renderApp();
    
    // Verify event listener was added
    expect(addEventListenerSpy).toHaveBeenCalledWith(
      'contextmenu',
      expect.any(Function)
    );
    
    // Simulate right click
    const contextMenuEvent = new Event('contextmenu', { bubbles: true });
    contextMenuEvent.preventDefault = preventDefault;
    window.dispatchEvent(contextMenuEvent);
    
    expect(preventDefault).toHaveBeenCalled();
  });

  it('should show spinner when loading', () => {
    // Modify the store to simulate loading state
    const mockStore = {
      ...store,
      getState: () => ({
        loader: { isFetching: { isFetching: true } },
        error: { errors: [], exceptionList: [] },
        // Add other necessary state slices
      }),
    };
    
    renderApp(mockStore);
    expect(screen.getByText('Spinner Component')).toBeInTheDocument();
  });

  it('should track errors with Adobe Analytics', () => {
    const triggerAdobeEventSpy = jest.spyOn(trackEvents, 'triggerAdobeEvent');
    
    // Modify the store to simulate error state
    const mockStore = {
      ...store,
      getState: () => ({
        loader: { isFetching: { isFetching: false } },
        error: { 
          errors: ['Test error'], 
          exceptionList: [{ error_header: 'Test exception' }] 
        },
      }),
    };
    
    renderApp(mockStore);
    expect(triggerAdobeEventSpy).toHaveBeenCalledWith('formError');
  });

  it('should track form abandonment on unload', () => {
    const triggerAdobeEventSpy = jest.spyOn(trackEvents, 'triggerAdobeEvent');
    const addEventListenerSpy = jest.spyOn(window, 'addEventListener');
    
    renderApp();
    
    // Verify event listener was added
    expect(addEventListenerSpy).toHaveBeenCalledWith(
      'unload',
      expect.any(Function)
    );
    
    // Simulate unload event
    window.dispatchEvent(new Event('unload'));
    expect(triggerAdobeEventSpy).toHaveBeenCalledWith(
      'formAbandonment',
      'BrowserClose'
    );
  });

  describe('Idle Timeout', () => {
    it('should show idle timeout modal after inactivity', () => {
      renderApp();
      
      // Mock the activity detector's onIdle callback
      const activityDetectorProps = jest.requireMock('react-activity-detector').default.mock.calls[0][0];
      act(() => {
        activityDetectorProps.onIdle();
      });
      
      expect(screen.getByText(/session timeout/i)).toBeInTheDocument();
    });

    it('should not show idle modal when loading', () => {
      // Modify the store to simulate loading state
      const mockStore = {
        ...store,
        getState: () => ({
          loader: { isFetching: { isFetching: true } },
          error: { errors: [], exceptionList: [] },
        }),
      };
      
      renderApp(mockStore);
      
      // Mock the activity detector's onIdle callback
      const activityDetectorProps = jest.requireMock('react-activity-detector').default.mock.calls[0][0];
      act(() => {
        activityDetectorProps.onIdle();
      });
      
      expect(screen.queryByText(/session timeout/i)).not.toBeInTheDocument();
    });
  });
});
