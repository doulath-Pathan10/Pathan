import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import ThankYouCC from './ThankYouCC';
import '@testing-library/jest-dom';

describe('ThankYouCC Component', () => {
  const mockProps = {
    applicationDetails: {
      isStp: false,
      thankyouProp: 'standard',
      thankyouText: 'standard',
      productName: ['Credit Card', 'Personal Loan'],
      cardNumber: '1234 5678 9012 3456'
    },
    thankyou: {
      standard: {
        CCPL: {
          banner_header: 'Thank you for your application!',
          banner_body_2: 'We will process your application shortly.',
          resumeUrl: '/resume',
          title: 'What happens next?',
          content: 'Here are the next steps in your application process.',
          timeLine: [
            { title: 'Step 1', description: 'Application received', completed: true },
            { title: 'Step 2', description: 'Under review', completed: false }
          ],
          note_title: 'Important Notes',
          note_content_1: 'Note content 1',
          note_content_2: 'Note content 2',
          note_content_3: 'Note content 3',
          note_content_4: 'Click here for more info',
          note_link: 'https://example.com/info',
          refId_lbl: 'Reference Number:'
        },
        timeLine: 'Application Timeline'
      },
      STPCCBanner: {
        banner_header: 'STP Application Complete',
        banner_body_1: 'Your ',
        banner_body_2: ' application is complete.'
      },
      CCPL: {
        note_title: 'General Notes',
        note_content_1: 'General note 1',
        note_content_2: 'General note 2',
        note_content_3: 'General note 3',
        note_content_4: 'General link',
        note_link: 'https://example.com/general'
      }
    },
    applicationReferenceNo: 'APP12345678',
    showOTPPopup: jest.fn(),
    showContinuePopup: jest.fn(),
    submitForm: jest.fn()
  };

  const mockSTPProps = {
    ...mockProps,
    applicationDetails: {
      ...mockProps.applicationDetails,
      isStp: true
    }
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(<ThankYouCC {...mockProps} />);
    expect(screen.getByText('Thank you for your application!')).toBeInTheDocument();
  });

  describe('Non-STP Application', () => {
    it('displays the correct banner header', () => {
      render(<ThankYouCC {...mockProps} />);
      expect(screen.getByText('Thank you for your application!')).toBeInTheDocument();
    });

    it('displays the product name in banner', () => {
      render(<ThankYouCC {...mockProps} />);
      expect(screen.getByText('Credit Card and Personal Loan')).toBeInTheDocument();
    });

    it('displays the timeline section', () => {
      render(<ThankYouCC {...mockProps} />);
      expect(screen.getByText('What happens next?')).toBeInTheDocument();
      expect(screen.getByText('Application received')).toBeInTheDocument();
    });

    it('displays the notes section', () => {
      render(<ThankYouCC {...mockProps} />);
      expect(screen.getByText('Important Notes')).toBeInTheDocument();
      expect(screen.getByText('Note content 1')).toBeInTheDocument();
    });

    it('displays the reference number', () => {
      render(<ThankYouCC {...mockProps} />);
      expect(screen.getByText('Reference Number:')).toBeInTheDocument();
      expect(screen.getByText('APP12345678')).toBeInTheDocument();
    });

    it('shows the Done button for non-STP applications', () => {
      render(<ThankYouCC {...mockProps} />);
      const button = screen.getByRole('button', { name: /done/i });
      expect(button).toBeInTheDocument();
    });

    it('calls submitForm when Done button is clicked', () => {
      render(<ThankYouCC {...mockProps} />);
      const button = screen.getByRole('button', { name: /done/i });
      fireEvent.click(button);
      expect(mockProps.submitForm).toHaveBeenCalled();
    });
  });

  describe('STP Application', () => {
    it('displays the STP banner header', () => {
      render(<ThankYouCC {...mockSTPProps} />);
      expect(screen.getByText('STP Application Complete')).toBeInTheDocument();
    });

    it('displays the product name in STP format', () => {
      render(<ThankYouCC {...mockSTPProps} />);
      expect(screen.getByText('Your Credit Card and Personal Loan application is complete.')).toBeInTheDocument();
    });

    it('displays the card number for STP applications', () => {
      render(<ThankYouCC {...mockSTPProps} />);
      expect(screen.getByText('1234 5678 9012 3456')).toBeInTheDocument();
    });

    it('shows the Continue button for STP applications', () => {
      render(<ThankYouCC {...mockSTPProps} />);
      const button = screen.getByRole('button', { name: /continue/i });
      expect(button).toBeInTheDocument();
    });

    it('calls showContinuePopup when Continue button is clicked', () => {
      render(<ThankYouCC {...mockSTPProps} />);
      const button = screen.getByRole('button', { name: /continue/i });
      fireEvent.click(button);
      expect(mockProps.showContinuePopup).toHaveBeenCalled();
    });

    it('does not display the notes section for STP applications', () => {
      render(<ThankYouCC {...mockSTPProps} />);
      expect(screen.queryByText('Important Notes')).not.toBeInTheDocument();
    });
  });

  it('renders the ThankYouSurvey component', () => {
    render(<ThankYouCC {...mockProps} />);
    expect(screen.getByTestId('thank-you-survey')).toBeInTheDocument();
  });

  it('handles timeline link clicks', () => {
    render(<ThankYouCC {...mockProps} />);
    const timelineItem = screen.getByText('Application received');
    fireEvent.click(timelineItem);
    expect(mockProps.showOTPPopup).toHaveBeenCalled();
  });

  it('renders the correct link in notes', () => {
    render(<ThankYouCC {...mockProps} />);
    const link = screen.getByText('Click here for more info');
    expect(link).toHaveAttribute('href', 'https://example.com/info');
    expect(link).toHaveAttribute('target', '_blank');
    expect(link).toHaveAttribute('rel', 'feedback noreferrer');
  });
});
