import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { BrowserRouter } from 'react-router-dom';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import ThankYou from './thank-you';

// Create mock store
const middlewares = [thunk];
const mockStore = configureStore(middlewares);

// Mock all external dependencies
jest.mock('../../../utils/common/change.utils', () => ({
  getUrl: {
    getChannelRefNo: jest.fn(() => ({ applicationRefNo: 'APP123456' })),
    getParameterByName: jest.fn(() => null),
    getUpdatedStage: jest.fn(() => ({ ccplChannel: 'WEB' }))
  }
}));

jest.mock('../../../services/track-events', () => ({
  __esModule: true,
  default: {
    triggerAdobeEvent: jest.fn()
  }
}));

jest.mock('../../../services/ga-track-events', () => ({
  __esModule: true,
  default: {
    pageView: jest.fn()
  }
}));

jest.mock('../../../services/common-service', () => ({
  redirectingToIbanking: jest.fn(),
  activateDigitalCard: jest.fn(() => Promise.resolve({ status: 'SUCCESS' }))
}));

jest.mock('../../../utils/store/store', () => ({
  store: {
    getState: jest.fn(() => ({
      stages: {
        isDocumentUpload: false
      }
    }))
  }
}));

// Mock child components
jest.mock('./thankyou-casa', () => {
  return function MockThankYouCASA({ submitForm, applicationReferenceNo }) {
    return (
      <div data-testid="thankyou-casa">
        <button onClick={submitForm} data-testid="casa-submit">Submit CASA</button>
        <span data-testid="casa-ref">{applicationReferenceNo}</span>
      </div>
    );
  };
});

jest.mock('./thankyou-upload', () => {
  return function MockThankYouUpload({ submitForm }) {
    return (
      <div data-testid="thankyou-upload">
        <button onClick={submitForm} data-testid="upload-submit">Submit Upload</button>
      </div>
    );
  };
});

jest.mock('./thankyou-error', () => {
  return function MockThankyouError() {
    return <div data-testid="thankyou-error">Error Component</div>;
  };
});

jest.mock('../../../shared/components/popup-model/popup-model', () => {
  return function MockPopupModel({ children, displayPopup }) {
    return displayPopup ? <div data-testid="popup-model">{children}</div> : null;
  };
});

jest.mock('../../../shared/components/model/model', () => {
  return function MockModel({ handlebuttonClick, handleContinueWithoutActivation }) {
    return (
      <div data-testid="model">
        <button onClick={handlebuttonClick} data-testid="model-back">Back</button>
        <button onClick={handleContinueWithoutActivation} data-testid="model-continue">Continue</button>
      </div>
    );
  };
});

// Mock environment variables
const originalEnv = process.env;
beforeEach(() => {
  process.env = {
    ...originalEnv,
    REACT_APP_HOME_PAGE_URL: 'https://example.com/home',
    REACT_APP_IBANKING_SC_MOBILE: 'https://mobile.example.com',
    REACT_APP_IBANKING_SC_MOBILE_TRANSFER: 'https://transfer.example.com'
  };
  
  // Mock window.location
  delete window.location;
  window.location = { href: '' };
});

afterEach(() => {
  process.env = originalEnv;
  jest.clearAllMocks();
});

describe('ThankYou Component', () => {
  const mockInitialState = {
    stages: {
      stages: [{
        stageId: 'thankyou',
        stageInfo: {
          application: {
            application_reference: 'APP123456'
          },
          products: [{
            product_category: 'SA',
            name: 'Savings Account',
            product_sequence_number: 1,
            product_type: 'REGULAR',
            acct_details: [{
              account_number: '1234567890',
              card_no: 'CARD123456'
            }]
          }],
          applicants: {
            embossed_name_a_1: 'John Doe',
            auth_mode_a_1: 'IX'
          }
        }
      }],
      journeyType: 'NTB',
      otpSuccess: false,
      isDocumentUpload: false
    }
  };

  const renderComponent = (initialState = mockInitialState) => {
    const store = mockStore(initialState);
    store.dispatch = jest.fn(() => Promise.resolve({ status: 'SUCCESS' }));
    
    return render(
      <Provider store={store}>
        <BrowserRouter>
          <ThankYou />
        </BrowserRouter>
      </Provider>
    );
  };

  describe('Basic Rendering', () => {
    test('renders without crashing', () => {
      renderComponent();
      expect(screen.getByTestId('form')).toBeInTheDocument();
    });

    test('renders main container elements', () => {
      renderComponent();
      expect(screen.getByTestId('app thankyou')).toBeInTheDocument();
      expect(screen.getByTestId('app__body')).toBeInTheDocument();
    });

    test('renders ThankYouCASA component for SA products', () => {
      renderComponent();
      expect(screen.getByTestId('thankyou-casa')).toBeInTheDocument();
    });

    test('renders ThankYouCASA component for CA products', () => {
      const caState = {
        ...mockInitialState,
        stages: {
          ...mockInitialState.stages,
          stages: [{
            ...mockInitialState.stages.stages[0],
            stageInfo: {
              ...mockInitialState.stages.stages[0].stageInfo,
              products: [{
                product_category: 'CA',
                name: 'Current Account',
                product_sequence_number: 1,
                product_type: 'REGULAR',
                acct_details: [{ account_number: '1234567890' }]
              }]
            }
          }]
        }
      };
      
      renderComponent(caState);
      expect(screen.getByTestId('thankyou-casa')).toBeInTheDocument();
    });
  });

  describe('Upload Flow', () => {
    test('renders ThankYouUpload when auth parameter is upload', () => {
      const { getUrl } = require('../../../utils/common/change.utils');
      getUrl.getParameterByName.mockReturnValue('upload');
      
      renderComponent();
      expect(screen.getByTestId('thankyou-upload')).toBeInTheDocument();
    });

    test('renders ThankYouUpload when isDocumentUpload is true', () => {
      const uploadState = {
        ...mockInitialState,
        stages: {
          ...mockInitialState.stages,
          isDocumentUpload: true
        }
      };
      
      renderComponent(uploadState);
      expect(screen.getByTestId('thankyou-upload')).toBeInTheDocument();
    });
  });

  describe('Form Submission', () => {
    test('redirects to home page for non-ibanking users', () => {
      const nonIbankingState = {
        ...mockInitialState,
        stages: {
          ...mockInitialState.stages,
          stages: [{
            ...mockInitialState.stages.stages[0],
            stageInfo: {
              ...mockInitialState.stages.stages[0].stageInfo,
              applicants: {
                auth_mode_a_1: 'OTHER'
              }
            }
          }]
        }
      };
      
      renderComponent(nonIbankingState);
      
      const submitButton = screen.getByTestId('casa-submit');
      fireEvent.click(submitButton);
      
      expect(window.location.href).toBe('https://example.com/home');
    });

    test('calls ibanking redirection for IX auth mode', () => {
      const { redirectingToIbanking } = require('../../../services/common-service');
      
      renderComponent();
      
      const submitButton = screen.getByTestId('casa-submit');
      fireEvent.click(submitButton);
      
      expect(redirectingToIbanking).toHaveBeenCalled();
    });

    test('redirects to mobile app when source is scm', () => {
      const { getUrl } = require('../../../utils/common/change.utils');
      getUrl.getParameterByName.mockImplementation((param) => {
        return param === 'source' ? 'scm' : null;
      });
      
      renderComponent();
      
      const submitButton = screen.getByTestId('casa-submit');
      fireEvent.click(submitButton);
      
      expect(window.location.href).toBe('https://mobile.example.com');
    });

    test('redirects to mobile transfer when channel is MBNK', () => {
      const { getUrl } = require('../../../utils/common/change.utils');
      getUrl.getParameterByName.mockImplementation((param) => {
        return param === 'channel' ? 'MBNK' : null;
      });
      
      renderComponent();
      
      const submitButton = screen.getByTestId('casa-submit');
      fireEvent.click(submitButton);
      
      expect(window.location.href).toBe('https://transfer.example.com');
    });
  });

  describe('Application Reference Number', () => {
    test('displays correct application reference number', () => {
      renderComponent();
      expect(screen.getByTestId('casa-ref')).toHaveTextContent('APP123456');
    });

    test('uses application reference from URL when available', () => {
      const { getUrl } = require('../../../utils/common/change.utils');
      getUrl.getChannelRefNo.mockReturnValue({ applicationRefNo: 'URL123456' });
      
      renderComponent();
      expect(screen.getByTestId('casa-ref')).toHaveTextContent('URL123456');
    });
  });

  describe('Event Tracking', () => {
    test('triggers Adobe analytics event on load', () => {
      const trackEvents = require('../../../services/track-events').default;
      
      renderComponent();
      
      expect(trackEvents.triggerAdobeEvent).toHaveBeenCalledWith('formSubmit');
    });

    test('triggers GA page view event on load', () => {
      const gaTrackEvents = require('../../../services/ga-track-events').default;
      
      renderComponent();
      
      expect(gaTrackEvents.pageView).toHaveBeenCalledWith('thankyou');
    });

    test('does not trigger events when auth is upload', () => {
      const { getUrl } = require('../../../utils/common/change.utils');
      getUrl.getParameterByName.mockReturnValue('upload');
      
      const trackEvents = require('../../../services/track-events').default;
      const gaTrackEvents = require('../../../services/ga-track-events').default;
      
      renderComponent();
      
      expect(trackEvents.triggerAdobeEvent).not.toHaveBeenCalled();
      expect(gaTrackEvents.pageView).not.toHaveBeenCalled();
    });
  });

  describe('Error Handling', () => {
    test('handles empty stages array gracefully', () => {
      const emptyState = {
        stages: {
          stages: [],
          journeyType: 'NTB',
          otpSuccess: false,
          isDocumentUpload: false
        }
      };
      
      expect(() => renderComponent(emptyState)).not.toThrow();
    });

    test('handles missing products array gracefully', () => {
      const noProductsState = {
        ...mockInitialState,
        stages: {
          ...mockInitialState.stages,
          stages: [{
            stageId: 'thankyou',
            stageInfo: {
              application: { application_reference: 'APP123456' }
            }
          }]
        }
      };
      
      expect(() => renderComponent(noProductsState)).not.toThrow();
    });

    test('renders error component when showErrorUI is true', async () => {
      const errorState = {
        ...mockInitialState,
        stages: {
          ...mockInitialState.stages,
          otpSuccess: true
        }
      };
      
      const { activateDigitalCard } = require('../../../services/common-service');
      activateDigitalCard.mockResolvedValue({ status: 'FAILED' });
      
      const store = mockStore(errorState);
      store.dispatch = jest.fn(() => Promise.resolve({ status: 'FAILED' }));
      
      render(
        <Provider store={store}>
          <BrowserRouter>
            <ThankYou />
          </BrowserRouter>
        </Provider>
      );
      
      await waitFor(() => {
        expect(screen.getByTestId('thankyou-error')).toBeInTheDocument();
      });
    });
  });

  describe('Product Category Logic', () => {
    test('correctly identifies SA products', () => {
      renderComponent();
      expect(screen.getByTestId('thankyou-casa')).toBeInTheDocument();
    });

    test('handles multiple product categories', () => {
      const multiProductState = {
        ...mockInitialState,
        stages: {
          ...mockInitialState.stages,
          stages: [{
            ...mockInitialState.stages.stages[0],
            stageInfo: {
              ...mockInitialState.stages.stages[0].stageInfo,
              products: [
                {
                  product_category: 'SA',
                  name: 'Savings Account',
                  product_sequence_number: 1,
                  product_type: 'REGULAR'
                },
                {
                  product_category: 'CA',
                  name: 'Current Account',
                  product_sequence_number: 2,
                  product_type: 'BUSINESS'
                }
              ]
            }
          }]
        }
      };
      
      renderComponent(multiProductState);
      expect(screen.getByTestId('thankyou-casa')).toBeInTheDocument();
    });
  });

  describe('Component State Updates', () => {
    test('updates application details state correctly', () => {
      renderComponent();
      // Component should render without errors, indicating state is set correctly
      expect(screen.getByTestId('thankyou-casa')).toBeInTheDocument();
    });

    test('handles STP vs NSTP determination', () => {
      const stpState = {
        ...mockInitialState,
        stages: {
          ...mockInitialState.stages,
          stages: [{
            ...mockInitialState.stages.stages[0],
            stageInfo: {
              ...mockInitialState.stages.stages[0].stageInfo,
              products: [{
                product_category: 'SA',
                name: 'Savings Account',
                acct_details: [{
                  account_number: '1234567890'
                }]
              }]
            }
          }]
        }
      };
      
      renderComponent(stpState);
      expect(screen.getByTestId('thankyou-casa')).toBeInTheDocument();
    });
  });

  describe('Navigation', () => {
    test('form prevents default submission', () => {
      renderComponent();
      
      const form = screen.getByTestId('form');
      const submitEvent = new Event('submit', { bubbles: true, cancelable: true });
      const preventDefaultSpy = jest.spyOn(submitEvent, 'preventDefault');
      
      fireEvent(form, submitEvent);
      
      expect(preventDefaultSpy).toHaveBeenCalled();
    });
  });
});
