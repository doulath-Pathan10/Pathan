import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import DropDownModel from './DropDownModel';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

describe('DropDownModel', () => {
  const mockProps = {
    logicalFieldName: 'test_field',
    label: 'Test Label',
    selectedOption: [
      {
        CODE_VALUE: 'option1',
        CODE_DESC: 'Option 1',
        checked: false
      },
      {
        CODE_VALUE: 'option2',
        CODE_DESC: 'Option 2',
        checked: true
      }
    ],
    selectedValue: [{ CODE_VALUE: 'val1' }],
    addUserInput: jest.fn(),
    close: jest.fn(),
    handleCallback: jest.fn(),
    handleFieldDispatch: jest.fn(),
    value: {}
  };

  const store = mockStore({
    stages: {
      stages: [
        {
          stageInfo: {
            products: [
              {
                product_type: '601'
              }
            ]
          }
        }
      ],
      userInput: {
        applicants: []
      }
    }
  });

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(
      <Provider store={store}>
        <DropDownModel {...mockProps} />
      </Provider>
    );
    expect(screen.getByText('Test Label')).toBeInTheDocument();
  });

  it('displays the correct number of options', () => {
    render(
      <Provider store={store}>
        <DropDownModel {...mockProps} />
      </Provider>
    );
    expect(screen.getAllByRole('radio')).toHaveLength(2);
  });

  it('calls addUserInput when an option is clicked', () => {
    render(
      <Provider store={store}>
        <DropDownModel {...mockProps} />
      </Provider>
    );
    fireEvent.click(screen.getAllByRole('radio')[0]);
    expect(mockProps.addUserInput).toHaveBeenCalledWith(mockProps.selectedOption[0]);
  });

  it('calls close when the close button is clicked', () => {
    render(
      <Provider store={store}>
        <DropDownModel {...mockProps} />
      </Provider>
    );
    fireEvent.click(screen.getByTestId('close-button'));
    expect(mockProps.close).toHaveBeenCalled();
  });

  it('renders AccountList when logicalFieldName is loan_account_list', () => {
    const customProps = {
      ...mockProps,
      logicalFieldName: 'loan_account_list'
    };
    render(
      <Provider store={store}>
        <DropDownModel {...customProps} />
      </Provider>
    );
    expect(screen.getByTestId('account-list')).toBeInTheDocument();
  });

  it('applies radio-hidden class for credit_into with single option', () => {
    const customProps = {
      ...mockProps,
      logicalFieldName: 'credit_into',
      selectedOption: [{ CODE_VALUE: 'option1', CODE_DESC: 'Option 1', checked: false }]
    };
    render(
      <Provider store={store}>
        <DropDownModel {...customProps} />
      </Provider>
    );
    expect(screen.getByTestId('dropdown-item')).toHaveClass('radio-hidden');
  });

  it('renders additional fields for credit_into', () => {
    const customProps = {
      ...mockProps,
      logicalFieldName: 'credit_into'
    };
    render(
      <Provider store={store}>
        <DropDownModel {...customProps} />
      </Provider>
    );
    expect(screen.getByTestId('additional-fields')).toBeInTheDocument();
  });

  it('shows label content for credit_into options', () => {
    const customProps = {
      ...mockProps,
      logicalFieldName: 'credit_into'
    };
    render(
      <Provider store={store}>
        <DropDownModel {...customProps} />
      </Provider>
    );
    expect(screen.getByTestId('label-content')).toBeInTheDocument();
  });

  it('applies dropdown-select--tenor class for maturity_amount', () => {
    const customProps = {
      ...mockProps,
      logicalFieldName: 'maturity_amount'
    };
    render(
      <Provider store={store}>
        <DropDownModel {...customProps} />
      </Provider>
    );
    expect(screen.getByTestId('dropdown-popup')).toHaveClass('dropdown-select--tenor');
  });

  it('shows the correct label visibility based on product type', () => {
    render(
      <Provider store={store}>
        <DropDownModel {...mockProps} />
      </Provider>
    );
    expect(screen.getByTestId('dropdown-label')).toBeVisible();
  });
});
