import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import Spinner from './Spinner';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { CONSTANTS } from '../../../utils/common/constants';

// Mock the postFulFilmentData function
jest.mock('../../../modules/preApproval/services/preApprovalPostServices', () => ({
  postFulFilmentData: jest.fn(),
}));

// Mock the lottie player
jest.mock('@lottiefiles/react-lottie-player', () => ({
  Player: jest.fn(() => <div>Lottie Player</div>),
}));

const mockStore = configureStore([]);

describe('Spinner Component', () => {
  let store: any;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageId: 'ACD_1',
            stageInfo: {
              application: {
                channel_reference: 'test-ref',
              },
            },
          },
        ],
      },
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should render without crashing', () => {
    render(
      <Provider store={store}>
        <Spinner />
      </Provider>
    );
    expect(screen.getByTestId('spinner-component')).toBeInTheDocument();
  });

  it('should display the default lottie animation when no loaderType is provided', () => {
    render(
      <Provider store={store}>
        <Spinner />
      </Provider>
    );
    
    expect(screen.getByText('Lottie Player')).toBeInTheDocument();
    expect(screen.getByText(/Processing your application/)).toBeInTheDocument();
  });

  it('should display the showTimmer spinner when loaderType is "showTimmer"', () => {
    render(
      <Provider store={store}>
        <Spinner loaderType="showTimmer" />
      </Provider>
    );
    
    expect(screen.getByText(/Thank you for your application/)).toBeInTheDocument();
    expect(screen.getByText(/Please do not close or refresh browser/)).toBeInTheDocument();
  });

  it('should display the resumeTimmer spinner when loaderType is "resumeTimmer"', () => {
    render(
      <Provider store={store}>
        <Spinner loaderType="resumeTimmer" />
      </Provider>
    );
    
    expect(screen.getByText(/Resume application/)).toBeInTheDocument();
  });

  it('should display the showSearchSpinner when loaderType is "showSearchSpinner"', () => {
    render(
      <Provider store={store}>
        <Spinner loaderType="showSearchSpinner" />
      </Provider>
    );
    
    expect(screen.getByText(/We are reviewing your application submission/)).toBeInTheDocument();
  });

  it('should display the last step spinner when loaderType is "lastStep"', () => {
    render(
      <Provider store={store}>
        <Spinner loaderType="lastStep" enable={true} />
      </Provider>
    );
    
    expect(screen.getByText(/You're at the last step!/)).toBeInTheDocument();
    expect(screen.getByText(/See final approval result/)).toBeInTheDocument();
  });

  it('should call getFFD2Status when the "See final approval result" button is clicked', async () => {
    const { postFulFilmentData } = require('../../../modules/preApproval/services/preApprovalPostServices');
    postFulFilmentData.mockResolvedValue({
      status: 200,
      data: {
        application: {
          response_type: 'INFO',
          response_action: 'SUCCESS'
        },
        applicants: {}
      }
    });

    render(
      <Provider store={store}>
        <Spinner loaderType="lastStep" enable={true} />
      </Provider>
    );
    
    const button = screen.getByText(/See final approval result/);
    fireEvent.click(button);
    
    await waitFor(() => {
      expect(postFulFilmentData).toHaveBeenCalled();
    });
  });

  it('should handle error in getFFD2Status', async () => {
    const { postFulFilmentData } = require('../../../modules/preApproval/services/preApprovalPostServices');
    postFulFilmentData.mockRejectedValue(new Error('API Error'));

    render(
      <Provider store={store}>
        <Spinner loaderType="lastStep" enable={true} />
      </Provider>
    );
    
    const button = screen.getByText(/See final approval result/);
    fireEvent.click(button);
    
    await waitFor(() => {
      expect(screen.getByText(/Processing your application/)).toBeInTheDocument();
    });
  });

  it('should display different text based on language', () => {
    // Mock getLanguageInfo to return CN
    jest.mock('../../../utils/common/change.utils', () => ({
      getUrl: {
        getLanguageInfo: jest.fn(() => 'CN'),
      },
    }));

    render(
      <Provider store={store}>
        <Spinner />
      </Provider>
    );
    
    expect(screen.getByText(/感谢您的申请/)).toBeInTheDocument();
  });

  it('should display different processing text based on stageId', () => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageId: 'DOC_3',
            stageInfo: {
              application: {
                channel_reference: 'test-ref',
              },
            },
          },
        ],
      },
    });

    render(
      <Provider store={store}>
        <Spinner />
      </Provider>
    );
    
    expect(screen.getByText(/We are validating your documents/)).toBeInTheDocument();
  });

  it('should disable the button when enable prop is false', () => {
    render(
      <Provider store={store}>
        <Spinner loaderType="lastStep" enable={false} />
      </Provider>
    );
    
    const button = screen.getByText(/See final approval result/);
    expect(button).toBeDisabled();
  });
});
