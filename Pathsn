import { renderHook } from '@testing-library/react-hooks';
import { useDispatch } from 'react-redux';
import { getFields } from './your-file-path';
import { AppDispatch } from '../../../services/common-service';
import { fieldErrorAction, stagesAction } from '../../../utils/store';
import { getProductCategory } from '../../../services/common-service';

// Mock the Redux dispatch and other dependencies
jest.mock('react-redux', () => ({
  useDispatch: jest.fn(),
}));

jest.mock('../../../utils/common/change.utils', () => ({
  FindIndex: jest.fn(),
  getUrl: {
    getUserInputs: jest.fn(),
    getJourneyType: jest.fn(),
  },
  authenticateType: jest.fn(),
}));

jest.mock('../../../services/common-service', () => ({
  getProductCategory: jest.fn(),
}));

describe('getFields function', () => {
  let dispatch: jest.Mocked<AppDispatch>;
  
  beforeEach(() => {
    dispatch = jest.fn();
    (useDispatch as jest.Mock).mockReturnValue(dispatch);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  const mockStages = [
    {
      stageId: 'ad-1',
      stageInfo: {
        fieldmetadata: {
          data: {
            stages: [
              { stageId: 'ad', fields: [{ logical_field_name: 'NRIC' }, { logical_field_name: 'passport_no' }] },
              { stageId: 'bd', fields: [{ logical_field_name: 'work_type' }, { logical_field_name: 'name_of_employer' }] }
            ]
          }
        },
        applicants: {
          NRIC_a_1: 'S1234567A'
        },
        products: []
      }
    }
  ];

  it('should handle residency_status radio selection for Singaporean/PR', () => {
    const radioResidency = {
      logical_field_name: 'residency_status',
      value: 'CT'
    };

    const { result } = renderHook(() => getFields(mockStages, radioResidency));
    result.current(dispatch);

    expect(dispatch).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields(['passport_no', 'pass_exp_dt'])
    );
    expect(dispatch).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: ['passport_no', 'pass_exp_dt'],
        newFields: ['NRIC'],
        value: 'S1234567A'
      })
    );
  });

  it('should handle residency_status radio selection for Foreigner', () => {
    const radioResidency = {
      logical_field_name: 'residency_status',
      value: 'FR'
    };

    // Mock getUserInputs to return some values
    require('../../../utils/common/change.utils').getUrl.getUserInputs.mockReturnValue({
      'passport_no_a_1': 'E12345678',
      'pass_exp_dt_a_1': '2025-12-31'
    });

    const { result } = renderHook(() => getFields(mockStages, radioResidency));
    result.current(dispatch);

    expect(dispatch).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields(['NRIC'])
    );
    expect(dispatch).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: ['NRIC'],
        newFields: ['passport_no', 'pass_exp_dt'],
        value: {
          'passport_no_a_1': 'E12345678',
          'pass_exp_dt_a_1': '2025-12-31'
        }
      })
    );
  });

  it('should handle work_type radio selection for Earner', () => {
    const radioResidency = {
      logical_field_name: 'work_type',
      value: 'S'
    };

    // Mock getUserInputs
    require('../../../utils/common/change.utils').getUrl.getUserInputs.mockReturnValue({
      'nature_of_employer_a_1': 'IT',
      'job_title_a_1': 'Developer',
      'name_of_employer_a_1': 'ABC Corp',
      'office_phone_number_a_1': '12345678'
    });

    const { result } = renderHook(() => getFields(mockStages, radioResidency));
    result.current(dispatch);

    expect(dispatch).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields([
        'name_of_business', 'nature_of_employer', 'job_title', 'office_phone_number'
      ])
    );
    expect(dispatch).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: ['name_of_business', 'nature_of_employer', 'job_title', 'office_phone_number'],
        newFields: ['name_of_employer', 'nature_of_employer', 'job_title', 'office_phone_number'],
        value: {
          'nature_of_employer_a_1': 'IT',
          'job_title_a_1': 'Developer',
          'name_of_employer_a_1': 'ABC Corp',
          'office_phone_number_a_1': '12345678'
        }
      })
    );
  });

  it('should handle credit_limit_consent radio selection for Yes', () => {
    const radioResidency = {
      logical_field_name: 'credit_limit_consent',
      value: 'Y'
    };

    const bancaSelector = {
      eligible_banca_insurances: ['life', 'health']
    };

    const { result } = renderHook(() => 
      getFields(mockStages, radioResidency, undefined, undefined, bancaSelector)
    );
    result.current(dispatch);

    expect(dispatch).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields([
        'embossed_name', 'myinfo_data_cli', 'insurance_consent_life', 'insurance_consent_health'
      ])
    );
    expect(dispatch).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: [
          'embossed_name', 'myinfo_data_cli', 'insurance_consent_life', 'insurance_consent_health'
        ],
        newFields: ['work_type'],
        value: ''
      })
    );
  });

  it('should handle stageId ad-2 with manual authentication', () => {
    const modifiedStages = JSON.parse(JSON.stringify(mockStages));
    modifiedStages[0].stageId = 'ad-2';
    
    require('../../../utils/common/change.utils').authenticateType.mockReturnValue('manual');
    require('../../../utils/common/change.utils').FindIndex.mockReturnValue(0);

    const { result } = renderHook(() => getFields(modifiedStages, null));
    result.current(dispatch);

    expect(require('../../../utils/common/change.utils').FindIndex).toHaveBeenCalledWith(
      modifiedStages[0].stageInfo, 'ad'
    );
  });

  it('should handle deposit_loan_to radio selection for SCB Account', () => {
    const radioResidency = {
      logical_field_name: 'deposit_loan_to',
      value: 'SCB Account'
    };

    const { result } = renderHook(() => getFields(mockStages, radioResidency));
    result.current(dispatch);

    expect(dispatch).toHaveBeenCalledWith(
      fieldErrorAction.removeMandatoryFields([
        'other_bank_name', 'other_bank_account_bt', 'reenter_other_bank_account_bt', 
        'other_bank_credit_card_bt', 'reenter_other_bank_credit_card_bt', 'enter_account_info'
      ])
    );
    expect(dispatch).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: [
          'other_bank_name', 'other_bank_account_bt', 'reenter_other_bank_account_bt', 
          'other_bank_credit_card_bt', 'reenter_other_bank_credit_card_bt'
        ],
        newFields: ['scb_account_no', 're_enter_scb_account_no', 'enter_account_info'],
        value: ''
      })
    );
  });

  it('should return null when no ssfStages are determined', () => {
    const { result } = renderHook(() => getFields(mockStages, null));
    const returnedValue = result.current(dispatch);
    expect(returnedValue).toBeNull();
  });

  it('should handle employerOther parameter for name_of_employer_other', () => {
    const { result } = renderHook(() => getFields(mockStages, null, 'name_of_employer_other'));
    result.current(dispatch);

    expect(dispatch).toHaveBeenCalledWith(
      stagesAction.removeAddToggleField({
        removeFields: [],
        newFields: ['name_of_employer_other'],
        value: ''
      })
    );
  });
});
