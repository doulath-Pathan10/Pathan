import { getFields } from './your-file-path';
import { fieldErrorAction, stagesAction } from '../../../utils/store';

// Minimal mocks
jest.mock('../../../utils/store/field-error-slice', () => ({
  removeMandatoryFields: jest.fn(),
  getMandatoryFields: jest.fn()
}));

jest.mock('../../../utils/store/stages-slice', () => ({
  removeAddToggleField: jest.fn(),
  resetDefaultValue: jest.fn(),
  resetNewAndOldFields: jest.fn()
}));

const mockDispatch = jest.fn();

// Helper to create basic stage config
const createStage = (stageId: string, fields: string[]) => ({
  stageId,
  stageInfo: {
    applicants: {},
    products: [],
    fieldmetadata: {
      data: {
        stages: [{
          stageId: stageId.split('-')[0], // Extract base stage ID
          fields: fields.map(name => ({ logical_field_name: name }))
        }]
      }
    }
  }
});

describe('getFields function', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    // Default mock implementations
    jest.mock('../../../utils/common/change.utils', () => ({
      authenticateType: () => 'manual',
      FindIndex: () => 0,
      getUrl: () => ({ getUserInputs: () => ({}) })
    }));
  });

  // Test 1: Basic residency status handling (CT/PR)
  it('handles Singaporean/PR residency status', () => {
    const stages = [createStage('ad-1', ['NRIC', 'passport_no', 'pass_exp_dt'])];
    const radioResidency = { logical_field_name: 'residency_status', value: 'CT' };
    
    const result = getFields(stages, radioResidency)(mockDispatch);
    
    expect(fieldErrorAction.removeMandatoryFields).toHaveBeenCalledWith(['passport_no', 'pass_exp_dt']);
    expect(stagesAction.removeAddToggleField).toHaveBeenCalledWith({
      removeFields: ['passport_no', 'pass_exp_dt'],
      newFields: ['NRIC'],
      value: ''
    });
    expect(result).toEqual([{ logical_field_name: 'NRIC' }]);
  });

  // Test 2: Foreigner residency status
  it('handles Foreigner residency status', () => {
    const stages = [createStage('ad-1', ['NRIC', 'passport_no', 'pass_exp_dt'])];
    const radioResidency = { logical_field_name: 'residency_status', value: 'FR' };
    
    // Mock getUserInputs
    require('../../../utils/common/change.utils').getUrl = () => ({
      getUserInputs: () => ({
        'passport_no_a_1': 'AB123456',
        'pass_exp_dt_a_1': '2030-01-01'
      })
    });
    
    const result = getFields(stages, radioResidency)(mockDispatch);
    
    expect(fieldErrorAction.removeMandatoryFields).toHaveBeenCalledWith(['NRIC']);
    expect(result).toEqual([
      { logical_field_name: 'passport_no' },
      { logical_field_name: 'pass_exp_dt' }
    ]);
  });

  // Test 3: Work type employed
  it('handles employed work type', () => {
    const stages = [createStage('bd-1', [
      'work_type', 'name_of_employer', 'name_of_business'
    ])];
    const radioResidency = { logical_field_name: 'work_type', value: 'S' };
    
    const result = getFields(stages, radioResidency)(mockDispatch);
    
    expect(fieldErrorAction.removeMandatoryFields).toHaveBeenCalledWith(['name_of_business']);
    expect(result).toEqual([
      { logical_field_name: 'work_type' },
      { logical_field_name: 'name_of_employer' }
    ]);
  });

  // Test 4: Credit limit consent (Y)
  it('handles credit limit consent (Y)', () => {
    const stages = [createStage('bd-1', [
      'credit_limit_consent', 'work_type', 'embossed_name'
    ])];
    const radioResidency = { logical_field_name: 'credit_limit_consent', value: 'Y' };
    
    const result = getFields(stages, radioResidency, undefined, undefined, {
      eligible_banca_insurances: ['life']
    })(mockDispatch);
    
    expect(fieldErrorAction.removeMandatoryFields).toHaveBeenCalledWith([
      'embossed_name', 'myinfo_data_cli', 'insurance_consent_life'
    ]);
    expect(result).toEqual([
      { logical_field_name: 'credit_limit_consent' },
      { logical_field_name: 'work_type' }
    ]);
  });

  // Test 5: Preferred limit (0)
  it('handles preferred limit (0)', () => {
    const stages = [createStage('bd-1', [
      'preferred_limit', 'credit_limit_consent_info_8', 'preferred_credit_limit'
    ])];
    const radioResidency = { logical_field_name: 'preferred_limit', value: '0' };
    
    const result = getFields(stages, radioResidency)(mockDispatch);
    
    expect(fieldErrorAction.removeMandatoryFields).toHaveBeenCalledWith([
      'preferred_credit_limit', 'credit_limit_consent_info_5'
    ]);
    expect(result).toEqual([{ logical_field_name: 'credit_limit_consent_info_8' }]);
  });

  // Test 6: No radioResidency provided
  it('returns null when no radioResidency provided', () => {
    const stages = [createStage('ad-1', ['NRIC'])];
    const result = getFields(stages)(mockDispatch);
    expect(result).toBeNull();
  });

  // Test 7: Employer other field
  it('handles employerOther parameter', () => {
    const stages = [createStage('bd-1', ['name_of_employer_other'])];
    const result = getFields(stages, null, 'name_of_employer_other')(mockDispatch);
    
    expect(stagesAction.removeAddToggleField).toHaveBeenCalledWith({
      removeFields: [],
      newFields: ['name_of_employer_other'],
      value: ''
    });
    expect(result).toEqual([{ logical_field_name: 'name_of_employer_other' }]);
  });
});
