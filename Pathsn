import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import SelectionBox from './SelectionBox';
import { StoreModel } from '../../../utils/model/common-model';
import { fieldErrorAction } from '../../../utils/store/field-error-slice';
import { stagesAction } from '../../../utils/store/stages-slice';
import { taxAction } from '../../../utils/store/tax-slice';
import { ValueUpdateAction } from '../../../utils/store/value-update-slice';
import { lastAction } from '../../../utils/store/last-accessed-slice';

// Mock Redux store
const mockStore = configureStore({
  reducer: {
    lov: () => ({
      lov: [
        {
          label: 'country_of_tax_residence',
          value: [
            { CODE_VALUE: 'US', CODE_DESC: 'United States' },
            { CODE_VALUE: 'SG', CODE_DESC: 'Singapore' },
          ],
        },
      ],
    }),
    fielderror: () => ({ error: {} }),
    stages: () => ({
      stages: [
        {
          stageId: 'bd-2',
          stageInfo: {
            applicants: {
              country_rwb_a_1: 'SG',
            },
            products: [{ product_type: '153' }],
          },
        },
      ],
      userInput: {
        applicants: {},
      },
      myinfoResponse: {},
      dependencyFields: [],
    }),
    tax: () => ({}),
    lastaccessed: () => ({}),
    valueupdate: () => ({}),
  },
});

// Mock props
const mockProps = {
  data: {
    logical_field_name: 'country_of_tax_residence',
    rwb_label_name: 'Country of Tax Residence',
    info_tooltips: 'Yes',
    details: 'Tooltip details',
    editable: false,
  },
  handleCallback: jest.fn(),
};

describe('SelectionBox Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('renders without crashing', () => {
    render(
      <Provider store={mockStore}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    expect(screen.getByText('Country of Tax Residence')).toBeInTheDocument();
  });

  test('displays placeholder text when no option is selected', () => {
    render(
      <Provider store={mockStore}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    expect(screen.getByPlaceholderText('Select the purpose of the account')).toBeInTheDocument();
  });

  test('opens dropdown on click', async () => {
    render(
      <Provider store={mockStore}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    const dropdown = screen.getByRole('textbox');
    fireEvent.click(dropdown);
    await waitFor(() => {
      expect(screen.getByText('United States')).toBeInTheDocument();
    });
  });

  test('selects an option from dropdown', async () => {
    render(
      <Provider store={mockStore}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    const dropdown = screen.getByRole('textbox');
    fireEvent.click(dropdown);
    const option = await screen.findByText('United States');
    fireEvent.click(option);
    await waitFor(() => {
      expect(mockProps.handleCallback).toHaveBeenCalled();
    });
  });

  test('displays error message when field is required but not selected', () => {
    const errorStore = configureStore({
      reducer: {
        ...mockStore.reducer,
        fielderror: () => ({
          error: { country_of_tax_residence: 'Please select a country' },
        }),
      },
    });
    render(
      <Provider store={errorStore}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    expect(screen.getByText('Please select your Country of Tax Residence')).toBeInTheDocument();
  });

  test('displays tooltip when info_tooltips is "Yes"', () => {
    render(
      <Provider store={mockStore}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    const tooltip = screen.getByRole('button', { name: /info-tooltip/i });
    expect(tooltip).toBeInTheDocument();
  });

  test('opens tooltip popup on click', async () => {
    render(
      <Provider store={mockStore}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    const tooltip = screen.getByRole('button', { name: /info-tooltip/i });
    fireEvent.click(tooltip);
    await waitFor(() => {
      expect(screen.getByText('Tooltip details')).toBeInTheDocument();
    });
  });

  test('disables dropdown when field is not editable', () => {
    const nonEditableProps = {
      ...mockProps,
      data: { ...mockProps.data, editable: false },
    };
    render(
      <Provider store={mockStore}>
        <SelectionBox {...nonEditableProps} />
      </Provider>
    );
    const dropdown = screen.getByRole('textbox');
    expect(dropdown).toBeDisabled();
  });

  test('removes selected value when close button is clicked', async () => {
    const storeWithSelection = configureStore({
      reducer: {
        ...mockStore.reducer,
        stages: () => ({
          stages: [
            {
              stageId: 'bd-2',
              stageInfo: {
                applicants: {
                  country_of_tax_residence_a_1: 'US',
                },
                products: [{ product_type: '153' }],
              },
            },
          ],
          userInput: {
            applicants: {},
          },
        }),
      },
    });
    render(
      <Provider store={storeWithSelection}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    const closeButton = screen.getByRole('button', { name: /close/i });
    fireEvent.click(closeButton);
    await waitFor(() => {
      expect(screen.queryByText('United States')).not.toBeInTheDocument();
    });
  });

  test('filters options based on search input', async () => {
    render(
      <Provider store={mockStore}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    const dropdown = screen.getByRole('textbox');
    fireEvent.click(dropdown);
    const searchInput = screen.getByPlaceholderText('Search');
    fireEvent.change(searchInput, { target: { value: 'Sing' } });
    await waitFor(() => {
      expect(screen.getByText('Singapore')).toBeInTheDocument();
      expect(screen.queryByText('United States')).not.toBeInTheDocument();
    });
  });
});
