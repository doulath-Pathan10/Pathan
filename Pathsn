import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import Fields from './Fields';

// Mock Redux hooks
jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

// Mock react-router-dom
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: jest.fn(),
}));

// Mock other dependencies
jest.mock('../../../services/common-service');
jest.mock('../../../services/track-events');
jest.mock('../../../services/ga-track-events');
jest.mock('../../../utils/common/change.utils');

describe('Fields Component', () => {
  let mockDispatch, mockNavigate, mockStore;

  beforeEach(() => {
    mockDispatch = jest.fn();
    mockNavigate = jest.fn();
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useNavigate as jest.Mock).mockReturnValue(mockNavigate);

    // Mock useSelector implementation
    (useSelector as jest.Mock).mockImplementation((selector) => {
      // Return different values based on the selector function
      if (selector.toString().includes('stages.stages')) {
        return [
          {
            stageId: 'ssf-1',
            stageInfo: {
              products: [{ product_type: '280', product_category: 'CC' }],
              applicants: {
                no_of_accounts_rwb_a_1: 1,
                full_name_a_1: 'John Doe',
                date_of_birth_a_1: '1990-01-01',
                residency_status_a_1: 'PR',
                work_type_a_1: 'E',
                mobile_number_rwb_a_1: '65-12345678',
                home_phone_number_rwb_a_1: '65-87654321',
                select_alt_addresses_a_1: 'PER,AL1',
              },
              fieldmetadata: {
                data: {
                  stages: [
                    { stageId: 'ssf-1', fields: [] },
                    { stageId: 'bd-1', fields: [] },
                  ],
                },
              },
            },
          },
        ];
      }
      if (selector.toString().includes('stages.currentStage')) {
        return 'ssf-1';
      }
      if (selector.toString().includes('fielderror.mandatoryFields')) {
        return [];
      }
      return null;
    });

    mockStore = configureStore({
      reducer: {
        stages: () => ({
          stages: [],
          currentStage: 'ssf-1',
          journeyType: 'NTC',
        }),
        fielderror: () => ({
          mandatoryFields: [],
        }),
      },
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );
    expect(screen.getByRole('form')).toBeInTheDocument();
  });

  it('displays stage headers correctly', () => {
    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );
    expect(screen.getByText('Personal Details')).toBeInTheDocument();
  });

  it('handles form submission', async () => {
    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    const form = screen.getByRole('form');
    fireEvent.submit(form);

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalled();
    });
  });

  it('shows age validation popup when age is invalid', async () => {
    // Mock age validation to return invalid
    jest.spyOn(require('../../../services/validation-service'), 'validateAge').mockReturnValue(true);
    
    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    const form = screen.getByRole('form');
    fireEvent.submit(form);

    await waitFor(() => {
      expect(screen.getByText('ageHardStop')).toBeInTheDocument();
    });
  });

  it('navigates to next stage on valid submission', async () => {
    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    const form = screen.getByRole('form');
    fireEvent.submit(form);

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalled();
      // Add more specific assertions about navigation
    });
  });

  it('handles back button click', () => {
    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    const backButton = screen.getByText('Back');
    fireEvent.click(backButton);

    expect(mockDispatch).toHaveBeenCalled();
  });

  it('displays document upload when stage is "doc"', () => {
    // Mock useSelector to return doc stage
    (useSelector as jest.Mock).mockImplementation((selector) => {
      if (selector.toString().includes('stages.stages')) {
        return [{ stageId: 'doc' }];
      }
      return null;
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    expect(screen.getByText('DocumentUpload')).toBeInTheDocument();
  });

  it('shows referral code popup when conditions are met', async () => {
    // Mock referral code selector
    (useSelector as jest.Mock).mockImplementation((selector) => {
      if (selector.toString().includes('referralcode')) {
        return { refer: 'true', referId: null };
      }
      return null;
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    const form = screen.getByRole('form');
    fireEvent.submit(form);

    await waitFor(() => {
      expect(screen.getByText('referral_code')).toBeInTheDocument();
    });
  });

  it('handles myInfo field dispatch', () => {
    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    // Simulate myInfo field change
    const myInfoField = screen.getByLabelText('myInfoField');
    fireEvent.change(myInfoField, { target: { value: 'test' } });

    expect(mockDispatch).toHaveBeenCalled();
  });

  it('displays CPF contribution section when conditions are met', () => {
    // Mock useSelector to return CPF data
    (useSelector as jest.Mock).mockImplementation((selector) => {
      if (selector.toString().includes('stages.stages')) {
        return [
          {
            stageId: 'bd-3',
            stageInfo: {
              products: [{ product_type: '280', product_category: 'CC' }],
              applicants: {
                Cpfcontributions: [{ year: '2022', amount: '5000' }],
              },
            },
          },
        ];
      }
      return null;
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    expect(screen.getByText('CPF Contribution')).toBeInTheDocument();
  });

  it('handles checkbox status update in review page', () => {
    // Mock useSelector to return review page stage
    (useSelector as jest.Mock).mockImplementation((selector) => {
      if (selector.toString().includes('stages.stages')) {
        return [{ stageId: 'rp' }];
      }
      return null;
    });

    render(
      <Provider store={mockStore}>
        <Fields />
      </Provider>
    );

    const checkbox = screen.getByRole('checkbox');
    fireEvent.click(checkbox);

    // Verify checkbox status update
    expect(checkbox).toBeChecked();
  });
});
