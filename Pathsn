import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import SelectionBox from './SelectionBox';
import { KeyWithAnyModel } from '../../../utils/model/common-model';

// Mock Redux store
const mockStore = configureStore({
  reducer: {
    lov: () => ({
      lov: [
        {
          label: 'country_of_tax_residence',
          value: [
            { CODE_DESC: 'Singapore', CODE_VALUE: 'SG' },
            { CODE_DESC: 'United States', CODE_VALUE: 'US' },
          ],
        },
      ],
    }),
    stages: () => ({
      stages: [
        {
          stageId: 'bd-2',
          stageInfo: {
            applicants: {
              country_rwb_a_1: 'SG',
            },
            products: [{ product_type: '153' }],
          },
        },
      ],
    }),
    fielderror: () => ({ error: {} }),
    tax: () => ({}),
    lastaccessed: () => ({}),
    valueupdate: () => ({}),
  },
});

// Mock props
const mockProps: KeyWithAnyModel = {
  data: {
    logical_field_name: 'country_of_tax_residence',
    rwb_label_name: 'Country of Tax Residence',
    editable: true,
    info_tooltips: 'Yes',
    details: 'Tooltip details',
  },
  handleCallback: jest.fn(),
};

describe('SelectionBox Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('renders without crashing', () => {
    render(
      <Provider store={mockStore}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    expect(screen.getByText('Country of Tax Residence')).toBeInTheDocument();
  });

  test('displays dropdown when clicked', async () => {
    render(
      <Provider store={mockStore}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    
    const dropdown = screen.getByRole('textbox');
    fireEvent.click(dropdown);
    
    await waitFor(() => {
      expect(screen.getByText('Singapore')).toBeInTheDocument();
      expect(screen.getByText('United States')).toBeInTheDocument();
    });
  });

  test('allows selecting an option', async () => {
    render(
      <Provider store={mockStore}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    
    const dropdown = screen.getByRole('textbox');
    fireEvent.click(dropdown);
    
    const option = await screen.findByText('Singapore');
    fireEvent.click(option);
    
    await waitFor(() => {
      expect(screen.getByText('Singapore')).toBeInTheDocument();
      expect(mockProps.handleCallback).toHaveBeenCalled();
    });
  });

  test('shows error message when required field is empty', () => {
    const errorStore = configureStore({
      reducer: {
        lov: () => ({ lov: [] }),
        stages: () => ({ stages: [] }),
        fielderror: () => ({
          error: { country_of_tax_residence: 'This field is required' },
        }),
        tax: () => ({}),
        lastaccessed: () => ({}),
        valueupdate: () => ({}),
      },
    });
    
    render(
      <Provider store={errorStore}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    
    expect(screen.getByText('Please select your Country of Tax Residence')).toBeInTheDocument();
  });

  test('displays tooltip when info icon is clicked', async () => {
    render(
      <Provider store={mockStore}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    
    const infoIcon = screen.getByRole('button', { name: /info/i });
    fireEvent.click(infoIcon);
    
    await waitFor(() => {
      expect(screen.getByText('Tooltip details')).toBeInTheDocument();
    });
  });

  test('filters options based on search input', async () => {
    render(
      <Provider store={mockStore}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    
    const dropdown = screen.getByRole('textbox');
    fireEvent.click(dropdown);
    
    const searchInput = screen.getByPlaceholderText('Search');
    fireEvent.change(searchInput, { target: { value: 'Sing' } });
    
    await waitFor(() => {
      expect(screen.getByText('Singapore')).toBeInTheDocument();
      expect(screen.queryByText('United States')).not.toBeInTheDocument();
    });
  });

  test('disables dropdown when field is not editable', () => {
    const nonEditableProps = {
      ...mockProps,
      data: {
        ...mockProps.data,
        editable: false,
      },
    };
    
    render(
      <Provider store={mockStore}>
        <SelectionBox {...nonEditableProps} />
      </Provider>
    );
    
    expect(screen.getByRole('textbox')).toBeDisabled();
  });

  test('handles removal of selected value', async () => {
    render(
      <Provider store={mockStore}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    
    // First select an option
    const dropdown = screen.getByRole('textbox');
    fireEvent.click(dropdown);
    const option = await screen.findByText('Singapore');
    fireEvent.click(option);
    
    // Then remove it
    const removeButton = screen.getByRole('button', { name: /close/i });
    fireEvent.click(removeButton);
    
    await waitFor(() => {
      expect(screen.queryByText('Singapore')).not.toBeInTheDocument();
    });
  });

  test('pre-selects value from store', async () => {
    const storeWithValue = configureStore({
      reducer: {
        lov: () => ({
          lov: [
            {
              label: 'country_of_tax_residence',
              value: [
                { CODE_DESC: 'Singapore', CODE_VALUE: 'SG', checked: true },
                { CODE_DESC: 'United States', CODE_VALUE: 'US' },
              ],
            },
          ],
        }),
        stages: () => ({
          stages: [
            {
              stageId: 'bd-2',
              stageInfo: {
                applicants: {
                  country_of_tax_residence_a_1: 'SG',
                },
                products: [{ product_type: '153' }],
              },
            },
          ],
        }),
        fielderror: () => ({ error: {} }),
        tax: () => ({}),
        lastaccessed: () => ({}),
        valueupdate: () => ({}),
      },
    });
    
    render(
      <Provider store={storeWithValue}>
        <SelectionBox {...mockProps} />
      </Provider>
    );
    
    expect(screen.getByText('Singapore')).toBeInTheDocument();
  });
});
